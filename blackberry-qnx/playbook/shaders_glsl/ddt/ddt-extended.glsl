// GLSL shader autogenerated by cg2glsl.py.
#if defined(VERTEX)

#if __VERSION__ >= 130
#define COMPAT_VARYING out
#define COMPAT_ATTRIBUTE in
#define COMPAT_TEXTURE texture
#else
#define COMPAT_VARYING varying 
#define COMPAT_ATTRIBUTE attribute 
#define COMPAT_TEXTURE texture2D
#endif

#ifdef GL_ES
#define COMPAT_PRECISION mediump
#else
#define COMPAT_PRECISION
#endif
COMPAT_VARYING     vec2 VARloc;
COMPAT_VARYING     vec4 VARt1;
COMPAT_VARYING     vec2 _texCoord2;
COMPAT_VARYING     vec4 _color1;
COMPAT_VARYING     vec4 _position1;
struct input_dummy {
    vec2 _video_size;
    vec2 _texture_size;
    vec2 _output_dummy_size;
};
struct out_vertex {
    vec4 _position1;
    vec4 _color1;
    vec2 _texCoord2;
    vec4 VARt1;
    vec2 VARloc;
};
out_vertex _ret_0;
input_dummy _IN1;
vec4 _r0008;
COMPAT_ATTRIBUTE vec4 VertexCoord;
COMPAT_ATTRIBUTE vec4 COLOR;
COMPAT_ATTRIBUTE vec4 TexCoord;
COMPAT_VARYING vec4 COL0;
COMPAT_VARYING vec4 TEX0;
 
uniform mat4 MVPMatrix;
uniform int FrameDirection;
uniform int FrameCount;
uniform COMPAT_PRECISION vec2 OutputSize;
uniform COMPAT_PRECISION vec2 TextureSize;
uniform COMPAT_PRECISION vec2 InputSize;
void main()
{
    out_vertex _OUT;
    vec2 _ps;
    vec2 _texCoord;
    _r0008 = VertexCoord.x*MVPMatrix[0];
    _r0008 = _r0008 + VertexCoord.y*MVPMatrix[1];
    _r0008 = _r0008 + VertexCoord.z*MVPMatrix[2];
    _r0008 = _r0008 + VertexCoord.w*MVPMatrix[3];
    _ps = vec2(float((1.00000000E+00/TextureSize.x)), float((1.00000000E+00/TextureSize.y)));
    _texCoord = TexCoord.xy + vec2( 1.00000001E-07, 1.00000001E-07);
    _OUT.VARt1.xy = vec2(_ps.x, 0.00000000E+00);
    _OUT.VARt1.zw = vec2(0.00000000E+00, _ps.y);
    _OUT.VARloc = vec2(float((_texCoord*TextureSize).x), float((_texCoord*TextureSize).y));
    _ret_0._position1 = _r0008;
    _ret_0._color1 = COLOR;
    _ret_0._texCoord2 = _texCoord;
    VARt1 = _OUT.VARt1;
    VARloc = _OUT.VARloc;
    gl_Position = vec4(float(_r0008.x), float(_r0008.y), float(_r0008.z), float(_r0008.w));
    COL0 = COLOR;
    TEX0.xy = _texCoord;
    return;
    COL0 = _ret_0._color1;
    TEX0.xy = _ret_0._texCoord2;
} 
#elif defined(FRAGMENT)

#if __VERSION__ >= 130
#define COMPAT_VARYING in
#define COMPAT_TEXTURE texture
out vec4 FragColor;
#else
#define COMPAT_VARYING varying
#define FragColor gl_FragColor
#define COMPAT_TEXTURE texture2D
#endif

#ifdef GL_ES
#ifdef GL_FRAGMENT_PRECISION_HIGH
precision highp float;
#else
precision mediump float;
#endif
#define COMPAT_PRECISION mediump
#else
#define COMPAT_PRECISION
#endif
COMPAT_VARYING     vec2 VARloc;
COMPAT_VARYING     vec4 VARt1;
COMPAT_VARYING     vec2 _texCoord;
COMPAT_VARYING     vec4 _color2;
struct input_dummy {
    vec2 _video_size;
    vec2 _texture_size;
    vec2 _output_dummy_size;
};
struct out_vertex {
    vec4 _color2;
    vec2 _texCoord;
    vec4 VARt1;
    vec2 VARloc;
};
vec4 _ret_0;
float _TMP52;
float _TMP51;
float _TMP50;
float _TMP49;
float _TMP48;
float _TMP47;
float _TMP46;
float _TMP45;
float _TMP44;
float _TMP43;
float _TMP42;
float _TMP41;
float _TMP40;
float _TMP39;
float _TMP38;
float _TMP37;
float _TMP36;
float _TMP35;
float _TMP34;
float _TMP33;
float _TMP32;
float _TMP31;
float _TMP30;
float _TMP29;
float _TMP28;
float _TMP27;
float _TMP26;
float _TMP25;
float _TMP24;
float _TMP23;
float _TMP22;
float _TMP21;
float _TMP20;
float _TMP19;
float _TMP18;
float _TMP17;
float _TMP55;
float _TMP57;
float _TMP54;
float _TMP56;
vec4 _TMP16;
vec4 _TMP15;
vec4 _TMP14;
vec4 _TMP13;
vec4 _TMP12;
vec4 _TMP11;
vec4 _TMP10;
vec4 _TMP9;
vec4 _TMP8;
vec4 _TMP7;
vec4 _TMP6;
vec4 _TMP5;
vec4 _TMP4;
vec4 _TMP3;
vec4 _TMP2;
vec4 _TMP1;
vec2 _TMP0;
vec2 _TMP53;
out_vertex _VAR1;
uniform sampler2D Texture;
vec2 _val0065;
vec2 _c0069;
vec2 _c0071;
vec2 _c0073;
vec2 _c0075;
vec2 _c0077;
vec2 _c0079;
vec2 _c0081;
vec2 _c0083;
vec2 _c0085;
vec2 _c0087;
vec2 _c0089;
vec2 _c0091;
vec2 _c0093;
vec2 _c0095;
vec2 _c0097;
float _TMP166;
vec2 _v0167;
float _TMP174;
vec2 _v0175;
float _a0183;
float _a0185;
float _a0187;
float _a0189;
float _a0191;
float _a0193;
float _a0195;
float _a0197;
float _a0199;
float _a0201;
float _a0203;
float _a0205;
float _a0207;
float _a0209;
float _a0211;
float _a0213;
float _a0215;
float _a0217;
float _a0219;
float _a0221;
float _a0223;
float _a0225;
float _a0227;
float _a0229;
float _a0231;
float _a0233;
float _a0235;
float _a0237;
float _a0239;
float _a0241;
float _a0243;
float _a0245;
float _a0247;
float _a0249;
float _a0251;
float _a0253;
COMPAT_VARYING vec4 TEX0;
 
uniform int FrameDirection;
uniform int FrameCount;
uniform COMPAT_PRECISION vec2 OutputSize;
uniform COMPAT_PRECISION vec2 TextureSize;
uniform COMPAT_PRECISION vec2 InputSize;
void main()
{
    vec2 _pos;
    vec2 _dir;
    vec2 _g1;
    vec2 _g2;
    vec3 _A1;
    vec3 _B1;
    vec3 _C1;
    vec3 _D1;
    vec3 _C00;
    vec3 _C01;
    vec3 _C02;
    vec3 _C03;
    vec3 _C10;
    vec3 _C20;
    vec3 _C13;
    vec3 _C23;
    vec3 _C30;
    vec3 _C31;
    vec3 _C32;
    vec3 _C33;
    float _a;
    float _b;
    float _c;
    float _d;
    float _c00;
    float _c01;
    float _c02;
    float _c03;
    float _c10;
    float _c20;
    float _c13;
    float _c23;
    float _c30;
    float _c31;
    float _c32;
    float _c33;
    float _p1;
    float _q1;
    float _count1;
    float _count2;
    vec3 _color1;
    _TMP53 = fract(vec2(float(VARloc.x), float(VARloc.y)));
    _TMP0 = vec2(float(_TMP53.x), float(_TMP53.y));
    _pos = vec2(float(_TMP0.x), float(_TMP0.y)) - vec2( 5.00000000E-01, 5.00000000E-01);
    _val0065 = vec2(float((_pos.x > 0.00000000E+00)), float((_pos.y > 0.00000000E+00)));
    _dir = _val0065 - vec2(float((_pos.x < 0.00000000E+00)), float((_pos.y < 0.00000000E+00)));
    _g1 = _dir*vec2(float(VARt1.x), float(VARt1.y));
    _g2 = _dir*vec2(float(VARt1.z), float(VARt1.w));
    _TMP1 = COMPAT_TEXTURE(Texture, TEX0.xy);
    _A1 = vec3(float(_TMP1.x), float(_TMP1.y), float(_TMP1.z));
    _c0069 = TEX0.xy + _g1;
    _TMP2 = COMPAT_TEXTURE(Texture, _c0069);
    _B1 = vec3(float(_TMP2.x), float(_TMP2.y), float(_TMP2.z));
    _c0071 = TEX0.xy + _g2;
    _TMP3 = COMPAT_TEXTURE(Texture, _c0071);
    _C1 = vec3(float(_TMP3.x), float(_TMP3.y), float(_TMP3.z));
    _c0073 = TEX0.xy + _g1 + _g2;
    _TMP4 = COMPAT_TEXTURE(Texture, _c0073);
    _D1 = vec3(float(_TMP4.x), float(_TMP4.y), float(_TMP4.z));
    _c0075 = (TEX0.xy - _g1) - _g2;
    _TMP5 = COMPAT_TEXTURE(Texture, _c0075);
    _C00 = vec3(float(_TMP5.x), float(_TMP5.y), float(_TMP5.z));
    _c0077 = TEX0.xy - _g2;
    _TMP6 = COMPAT_TEXTURE(Texture, _c0077);
    _C01 = vec3(float(_TMP6.x), float(_TMP6.y), float(_TMP6.z));
    _c0079 = (TEX0.xy + _g1) - _g2;
    _TMP7 = COMPAT_TEXTURE(Texture, _c0079);
    _C02 = vec3(float(_TMP7.x), float(_TMP7.y), float(_TMP7.z));
    _c0081 = (TEX0.xy + 2.00000000E+00*_g1) - _g2;
    _TMP8 = COMPAT_TEXTURE(Texture, _c0081);
    _C03 = vec3(float(_TMP8.x), float(_TMP8.y), float(_TMP8.z));
    _c0083 = TEX0.xy - _g1;
    _TMP9 = COMPAT_TEXTURE(Texture, _c0083);
    _C10 = vec3(float(_TMP9.x), float(_TMP9.y), float(_TMP9.z));
    _c0085 = (TEX0.xy - _g1) + _g2;
    _TMP10 = COMPAT_TEXTURE(Texture, _c0085);
    _C20 = vec3(float(_TMP10.x), float(_TMP10.y), float(_TMP10.z));
    _c0087 = TEX0.xy + 2.00000000E+00*_g1;
    _TMP11 = COMPAT_TEXTURE(Texture, _c0087);
    _C13 = vec3(float(_TMP11.x), float(_TMP11.y), float(_TMP11.z));
    _c0089 = TEX0.xy + 2.00000000E+00*_g1 + _g2;
    _TMP12 = COMPAT_TEXTURE(Texture, _c0089);
    _C23 = vec3(float(_TMP12.x), float(_TMP12.y), float(_TMP12.z));
    _c0091 = (TEX0.xy - _g1) + 2.00000000E+00*_g2;
    _TMP13 = COMPAT_TEXTURE(Texture, _c0091);
    _C30 = vec3(float(_TMP13.x), float(_TMP13.y), float(_TMP13.z));
    _c0093 = TEX0.xy + 2.00000000E+00*_g2;
    _TMP14 = COMPAT_TEXTURE(Texture, _c0093);
    _C31 = vec3(float(_TMP14.x), float(_TMP14.y), float(_TMP14.z));
    _c0095 = TEX0.xy + _g1 + 2.00000000E+00*_g2;
    _TMP15 = COMPAT_TEXTURE(Texture, _c0095);
    _C32 = vec3(float(_TMP15.x), float(_TMP15.y), float(_TMP15.z));
    _c0097 = TEX0.xy + 2.00000000E+00*_g1 + 2.00000000E+00*_g2;
    _TMP16 = COMPAT_TEXTURE(Texture, _c0097);
    _C33 = vec3(float(_TMP16.x), float(_TMP16.y), float(_TMP16.z));
    _TMP56 = dot(vec3(float(_A1.x), float(_A1.y), float(_A1.z)), vec3( 6.55360000E+04, 2.55000000E+02, 1.00000000E+00));
    _TMP54 = float(_TMP56);
    _a = float(_TMP54);
    _TMP56 = dot(vec3(float(_B1.x), float(_B1.y), float(_B1.z)), vec3( 6.55360000E+04, 2.55000000E+02, 1.00000000E+00));
    _TMP54 = float(_TMP56);
    _b = float(_TMP54);
    _TMP56 = dot(vec3(float(_C1.x), float(_C1.y), float(_C1.z)), vec3( 6.55360000E+04, 2.55000000E+02, 1.00000000E+00));
    _TMP54 = float(_TMP56);
    _c = float(_TMP54);
    _TMP56 = dot(vec3(float(_D1.x), float(_D1.y), float(_D1.z)), vec3( 6.55360000E+04, 2.55000000E+02, 1.00000000E+00));
    _TMP54 = float(_TMP56);
    _d = float(_TMP54);
    _TMP56 = dot(vec3(float(_C00.x), float(_C00.y), float(_C00.z)), vec3( 6.55360000E+04, 2.55000000E+02, 1.00000000E+00));
    _TMP54 = float(_TMP56);
    _c00 = float(_TMP54);
    _TMP56 = dot(vec3(float(_C01.x), float(_C01.y), float(_C01.z)), vec3( 6.55360000E+04, 2.55000000E+02, 1.00000000E+00));
    _TMP54 = float(_TMP56);
    _c01 = float(_TMP54);
    _TMP56 = dot(vec3(float(_C02.x), float(_C02.y), float(_C02.z)), vec3( 6.55360000E+04, 2.55000000E+02, 1.00000000E+00));
    _TMP54 = float(_TMP56);
    _c02 = float(_TMP54);
    _TMP56 = dot(vec3(float(_C03.x), float(_C03.y), float(_C03.z)), vec3( 6.55360000E+04, 2.55000000E+02, 1.00000000E+00));
    _TMP54 = float(_TMP56);
    _c03 = float(_TMP54);
    _TMP56 = dot(vec3(float(_C10.x), float(_C10.y), float(_C10.z)), vec3( 6.55360000E+04, 2.55000000E+02, 1.00000000E+00));
    _TMP54 = float(_TMP56);
    _c10 = float(_TMP54);
    _TMP56 = dot(vec3(float(_C20.x), float(_C20.y), float(_C20.z)), vec3( 6.55360000E+04, 2.55000000E+02, 1.00000000E+00));
    _TMP54 = float(_TMP56);
    _c20 = float(_TMP54);
    _TMP56 = dot(vec3(float(_C13.x), float(_C13.y), float(_C13.z)), vec3( 6.55360000E+04, 2.55000000E+02, 1.00000000E+00));
    _TMP54 = float(_TMP56);
    _c13 = float(_TMP54);
    _TMP56 = dot(vec3(float(_C23.x), float(_C23.y), float(_C23.z)), vec3( 6.55360000E+04, 2.55000000E+02, 1.00000000E+00));
    _TMP54 = float(_TMP56);
    _c23 = float(_TMP54);
    _TMP56 = dot(vec3(float(_C30.x), float(_C30.y), float(_C30.z)), vec3( 6.55360000E+04, 2.55000000E+02, 1.00000000E+00));
    _TMP54 = float(_TMP56);
    _c30 = float(_TMP54);
    _TMP56 = dot(vec3(float(_C31.x), float(_C31.y), float(_C31.z)), vec3( 6.55360000E+04, 2.55000000E+02, 1.00000000E+00));
    _TMP54 = float(_TMP56);
    _c31 = float(_TMP54);
    _TMP56 = dot(vec3(float(_C32.x), float(_C32.y), float(_C32.z)), vec3( 6.55360000E+04, 2.55000000E+02, 1.00000000E+00));
    _TMP54 = float(_TMP56);
    _c32 = float(_TMP54);
    _TMP56 = dot(vec3(float(_C33.x), float(_C33.y), float(_C33.z)), vec3( 6.55360000E+04, 2.55000000E+02, 1.00000000E+00));
    _TMP54 = float(_TMP56);
    _c33 = float(_TMP54);
    _p1 = abs(_pos.x);
    _q1 = abs(_pos.y);
    _v0167 = _g1 - _pos;
    _TMP55 = dot(_v0167, _v0167);
    _TMP57 = inversesqrt(_TMP55);
    _TMP166 = 1.00000000E+00/_TMP57;
    _v0175 = _g2 - _pos;
    _TMP55 = dot(_v0175, _v0175);
    _TMP57 = inversesqrt(_TMP55);
    _TMP174 = 1.00000000E+00/_TMP57;
    _a0183 = _c00 - _a;
    _TMP17 = abs(_a0183);
    _a0185 = _c01 - _c10;
    _TMP18 = abs(_a0185);
    _count1 = float((_TMP17 < _TMP18));
    _a0187 = _c00 - _a;
    _TMP19 = abs(_a0187);
    _a0189 = _c01 - _c10;
    _TMP20 = abs(_a0189);
    _count2 = float((_TMP19 > _TMP20));
    _a0191 = _c01 - _b;
    _TMP21 = abs(_a0191);
    _a0193 = _c02 - _a;
    _TMP22 = abs(_a0193);
    _count1 = _count1 + float((_TMP21 < _TMP22));
    _a0195 = _c01 - _b;
    _TMP23 = abs(_a0195);
    _a0197 = _c02 - _a;
    _TMP24 = abs(_a0197);
    _count2 = _count2 + float((_TMP23 > _TMP24));
    _a0199 = _c02 - _c13;
    _TMP25 = abs(_a0199);
    _a0201 = _c03 - _b;
    _TMP26 = abs(_a0201);
    _count1 = _count1 + float((_TMP25 < _TMP26));
    _a0203 = _c02 - _c13;
    _TMP27 = abs(_a0203);
    _a0205 = _c03 - _b;
    _TMP28 = abs(_a0205);
    _count2 = _count2 + float((_TMP27 > _TMP28));
    _a0207 = _c10 - _c;
    _TMP29 = abs(_a0207);
    _a0209 = _c20 - _a;
    _TMP30 = abs(_a0209);
    _count1 = _count1 + float((_TMP29 < _TMP30));
    _a0211 = _c10 - _c;
    _TMP31 = abs(_a0211);
    _a0213 = _c20 - _a;
    _TMP32 = abs(_a0213);
    _count2 = _count2 + float((_TMP31 > _TMP32));
    _a0215 = _b - _c23;
    _TMP33 = abs(_a0215);
    _a0217 = _c13 - _d;
    _TMP34 = abs(_a0217);
    _count1 = _count1 + float((_TMP33 < _TMP34));
    _a0219 = _b - _c23;
    _TMP35 = abs(_a0219);
    _a0221 = _c13 - _d;
    _TMP36 = abs(_a0221);
    _count2 = _count2 + float((_TMP35 > _TMP36));
    _a0223 = _c20 - _c31;
    _TMP37 = abs(_a0223);
    _a0225 = _c - _c30;
    _TMP38 = abs(_a0225);
    _count1 = _count1 + float((_TMP37 < _TMP38));
    _a0227 = _c20 - _c31;
    _TMP39 = abs(_a0227);
    _a0229 = _c - _c30;
    _TMP40 = abs(_a0229);
    _count2 = _count2 + float((_TMP39 > _TMP40));
    _a0231 = _c32 - _c;
    _TMP41 = abs(_a0231);
    _a0233 = _c31 - _d;
    _TMP42 = abs(_a0233);
    _count1 = _count1 + float((_TMP41 < _TMP42));
    _a0235 = _c32 - _c;
    _TMP43 = abs(_a0235);
    _a0237 = _c31 - _d;
    _TMP44 = abs(_a0237);
    _count2 = _count2 + float((_TMP43 > _TMP44));
    _a0239 = _c33 - _d;
    _TMP45 = abs(_a0239);
    _a0241 = _c32 - _c23;
    _TMP46 = abs(_a0241);
    _count1 = _count1 + float((_TMP45 < _TMP46));
    _a0243 = _c33 - _d;
    _TMP47 = abs(_a0243);
    _a0245 = _c32 - _c23;
    _TMP48 = abs(_a0245);
    _count2 = _count2 + float((_TMP47 > _TMP48));
    _a0247 = _a - _d;
    _TMP49 = abs(_a0247);
    _a0249 = _b - _c;
    _TMP50 = abs(_a0249);
    if (_count1 >= 5.00000000E+00 || _TMP49 < _TMP50 && _count2 <= 4.00000000E+00) { 
        if (_TMP166 < _TMP174) { 
            _C1 = (_A1 + _D1) - _B1;
        } else {
            if (_TMP166 > _TMP174) { 
                _B1 = (_A1 + _D1) - _C1;
            } 
        } 
    } else {
        _a0251 = _a - _d;
        _TMP51 = abs(_a0251);
        _a0253 = _b - _c;
        _TMP52 = abs(_a0253);
        if (_count2 >= 5.00000000E+00 || _TMP51 > _TMP52) { 
            _D1 = (_B1 + _C1) - _A1;
        } 
    } 
    _color1 = ((1.00000000E+00 - _p1)*(1.00000000E+00 - _q1))*vec3(float(_A1.x), float(_A1.y), float(_A1.z)) + (_p1*(1.00000000E+00 - _q1))*vec3(float(_B1.x), float(_B1.y), float(_B1.z)) + ((1.00000000E+00 - _p1)*_q1)*vec3(float(_C1.x), float(_C1.y), float(_C1.z)) + (_p1*_q1)*vec3(float(_D1.x), float(_D1.y), float(_D1.z));
    _ret_0 = vec4(_color1.x, _color1.y, _color1.z, 1.00000000E+00);
    FragColor = _ret_0;
    return;
} 
#endif
