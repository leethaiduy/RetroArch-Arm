// GLSL shader autogenerated by cg2glsl.py.
#if defined(VERTEX)

#if __VERSION__ >= 130
#define COMPAT_VARYING out
#define COMPAT_ATTRIBUTE in
#define COMPAT_TEXTURE texture
#else
#define COMPAT_VARYING varying 
#define COMPAT_ATTRIBUTE attribute 
#define COMPAT_TEXTURE texture2D
#endif

#ifdef GL_ES
#define COMPAT_PRECISION mediump
#else
#define COMPAT_PRECISION
#endif
COMPAT_VARYING     float _frame_rotation;
COMPAT_VARYING     vec2 _pixel_no;
COMPAT_VARYING     vec2 _c11;
struct tex_coord {
    vec2 _c11;
    vec2 _pixel_no;
};
struct input_dummy {
    vec2 _video_size;
    vec2 _texture_size;
    vec2 _output_dummy_size;
    float _frame_count;
    float _frame_direction;
    float _frame_rotation;
};
vec4 _oPosition1;
input_dummy _IN1;
vec4 _r0008;
COMPAT_ATTRIBUTE vec4 VertexCoord;
COMPAT_ATTRIBUTE vec4 COLOR;
COMPAT_VARYING vec4 COL0;
COMPAT_ATTRIBUTE vec4 TexCoord;
COMPAT_VARYING vec4 TEX1;
COMPAT_VARYING vec4 TEX2;
 
uniform mat4 MVPMatrix;
uniform int FrameDirection;
uniform int FrameCount;
uniform COMPAT_PRECISION vec2 OutputSize;
uniform COMPAT_PRECISION vec2 TextureSize;
uniform COMPAT_PRECISION vec2 InputSize;
void main()
{
    vec4 _oColor;
    tex_coord _coords;
    _r0008 = VertexCoord.x*MVPMatrix[0];
    _r0008 = _r0008 + VertexCoord.y*MVPMatrix[1];
    _r0008 = _r0008 + VertexCoord.z*MVPMatrix[2];
    _r0008 = _r0008 + VertexCoord.w*MVPMatrix[3];
    _oPosition1 = _r0008;
    _oColor = COLOR;
    _coords._c11 = TexCoord.xy;
    _coords._pixel_no = TexCoord.xy*TextureSize;
    gl_Position = _r0008;
    COL0 = COLOR;
    TEX1.xy = TexCoord.xy;
    TEX2.xy = _coords._pixel_no;
} 
#elif defined(FRAGMENT)

#if __VERSION__ >= 130
#define COMPAT_VARYING in
#define COMPAT_TEXTURE texture
out vec4 FragColor;
#else
#define COMPAT_VARYING varying
#define FragColor gl_FragColor
#define COMPAT_TEXTURE texture2D
#endif

#ifdef GL_ES
#ifdef GL_FRAGMENT_PRECISION_HIGH
precision highp float;
#else
precision mediump float;
#endif
#define COMPAT_PRECISION mediump
#else
#define COMPAT_PRECISION
#endif
COMPAT_VARYING     float _frame_rotation;
COMPAT_VARYING     vec2 _pixel_no1;
COMPAT_VARYING     vec2 _c11;
struct tex_coord {
    vec2 _c11;
    vec2 _pixel_no1;
};
struct input_dummy {
    vec2 _video_size;
    vec2 _texture_size;
    vec2 _output_dummy_size;
    float _frame_count;
    float _frame_direction;
    float _frame_rotation;
};
vec4 _ret_0;
vec4 _TMP0;
vec2 _TMP1;
float _TMP4;
float _TMP5;
uniform sampler2D Texture;
vec3 _TMP12;
float _TMP16;
vec2 _delta0017;
float _len0025;
float _TMP26;
float _x0027;
float _len0031;
float _TMP32;
float _x0033;
COMPAT_VARYING vec4 TEX1;
COMPAT_VARYING vec4 TEX2;
 
uniform int FrameDirection;
uniform int FrameCount;
uniform COMPAT_PRECISION vec2 OutputSize;
uniform COMPAT_PRECISION vec2 TextureSize;
uniform COMPAT_PRECISION vec2 InputSize;
void main()
{
    _TMP0 = COMPAT_TEXTURE(Texture, TEX1.xy);
    _TMP1 = fract(TEX2.xy);
    _delta0017 = _TMP1 - vec2( 5.00000000E-01, 5.00000000E-01);
    _TMP4 = dot(_delta0017, _delta0017);
    _TMP5 = inversesqrt(_TMP4);
    _TMP16 = 1.00000000E+00/_TMP5;
    if (_TMP16 > 2.00000003E-01 && _TMP16 < 3.49999994E-01) { 
        _TMP12 = _TMP0.xyz;
    } else {
        if (_TMP16 >= 3.49999994E-01) { 
            _len0025 = _TMP16 - 3.49999994E-01;
            _x0027 = -6.00000000E+00*_len0025;
            _TMP26 = pow(2.71828198E+00, _x0027);
            _TMP12 = _TMP0.xyz*_TMP26;
        } else {
            if (_TMP16 <= 2.00000003E-01) { 
                _len0031 = 2.00000003E-01 - _TMP16;
                _x0033 = -6.00000000E+00*_len0031;
                _TMP32 = pow(2.71828198E+00, _x0033);
                _TMP12 = _TMP0.xyz*_TMP32;
            } else {
                _TMP12 = vec3( 0.00000000E+00, 0.00000000E+00, 0.00000000E+00);
            } 
        } 
    } 
    _ret_0 = vec4(_TMP12.x, _TMP12.y, _TMP12.z, 1.00000000E+00);
    FragColor = _ret_0;
    return;
} 
#endif
