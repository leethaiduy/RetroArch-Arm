// GLSL shader autogenerated by cg2glsl.py.
#if defined(VERTEX)

#if __VERSION__ >= 130
#define COMPAT_VARYING out
#define COMPAT_ATTRIBUTE in
#define COMPAT_TEXTURE texture
#else
#define COMPAT_VARYING varying 
#define COMPAT_ATTRIBUTE attribute 
#define COMPAT_TEXTURE texture2D
#endif

#ifdef GL_ES
#define COMPAT_PRECISION mediump
#else
#define COMPAT_PRECISION
#endif
COMPAT_VARYING     float _frame_rotation;
COMPAT_VARYING     vec4 _color1;
struct output_dummy {
    vec4 _color1;
};
struct input_dummy {
    vec2 _video_size;
    vec2 _texture_size;
    vec2 _output_dummy_size;
    float _frame_count;
    float _frame_direction;
    float _frame_rotation;
};
vec4 _oPosition1;
vec4 _r0006;
COMPAT_ATTRIBUTE vec4 VertexCoord;
COMPAT_ATTRIBUTE vec4 COLOR;
COMPAT_ATTRIBUTE vec4 TexCoord;
COMPAT_VARYING vec4 COL0;
COMPAT_VARYING vec4 TEX0;
 
uniform mat4 MVPMatrix;
uniform int FrameDirection;
uniform int FrameCount;
uniform COMPAT_PRECISION vec2 OutputSize;
uniform COMPAT_PRECISION vec2 TextureSize;
uniform COMPAT_PRECISION vec2 InputSize;
void main()
{
    vec4 _oColor;
    vec2 _otexCoord;
    _r0006 = VertexCoord.x*MVPMatrix[0];
    _r0006 = _r0006 + VertexCoord.y*MVPMatrix[1];
    _r0006 = _r0006 + VertexCoord.z*MVPMatrix[2];
    _r0006 = _r0006 + VertexCoord.w*MVPMatrix[3];
    _oPosition1 = _r0006;
    _oColor = COLOR;
    _otexCoord = TexCoord.xy;
    gl_Position = _r0006;
    COL0 = COLOR;
    TEX0.xy = TexCoord.xy;
} 
#elif defined(FRAGMENT)

#if __VERSION__ >= 130
#define COMPAT_VARYING in
#define COMPAT_TEXTURE texture
out vec4 FragColor;
#else
#define COMPAT_VARYING varying
#define FragColor gl_FragColor
#define COMPAT_TEXTURE texture2D
#endif

#ifdef GL_ES
#ifdef GL_FRAGMENT_PRECISION_HIGH
precision highp float;
#else
precision mediump float;
#endif
#define COMPAT_PRECISION mediump
#else
#define COMPAT_PRECISION
#endif
COMPAT_VARYING     float _frame_rotation;
COMPAT_VARYING     vec4 _color1;
struct output_dummy {
    vec4 _color1;
};
struct input_dummy {
    vec2 _video_size;
    vec2 _texture_size;
    vec2 _output_dummy_size;
    float _frame_count;
    float _frame_direction;
    float _frame_rotation;
};
vec3 _TMP28;
vec3 _TMP30;
vec3 _TMP29;
float _TMP31;
float _TMP32;
vec4 _TMP24;
vec4 _TMP23;
vec4 _TMP22;
vec4 _TMP21;
vec4 _TMP20;
vec4 _TMP19;
vec4 _TMP18;
vec4 _TMP17;
vec4 _TMP16;
vec4 _TMP15;
vec4 _TMP14;
vec4 _TMP13;
vec4 _TMP12;
vec4 _TMP11;
vec4 _TMP10;
vec4 _TMP9;
vec4 _TMP8;
vec4 _TMP7;
vec4 _TMP6;
vec4 _TMP5;
vec4 _TMP4;
vec4 _TMP3;
vec4 _TMP2;
vec4 _TMP1;
vec4 _TMP0;
uniform sampler2D Texture;
input_dummy _IN1;
vec2 _c0040;
vec2 _c0042;
vec2 _c0044;
vec2 _c0046;
vec2 _c0050;
vec2 _c0052;
vec2 _c0054;
vec2 _c0056;
vec2 _c0058;
vec2 _c0060;
vec2 _c0062;
vec2 _c0064;
vec2 _c0066;
vec2 _c0068;
vec2 _c0070;
vec2 _c0072;
vec2 _c0074;
vec2 _c0076;
vec2 _c0078;
vec2 _c0080;
vec2 _c0082;
vec2 _c0084;
vec2 _c0086;
vec2 _c0088;
COMPAT_VARYING vec4 TEX0;
 
uniform int FrameDirection;
uniform int FrameCount;
uniform COMPAT_PRECISION vec2 OutputSize;
uniform COMPAT_PRECISION vec2 TextureSize;
uniform COMPAT_PRECISION vec2 InputSize;
void main()
{
    vec2 _ps;
    vec2 _dx;
    vec2 _dy;
    vec2 _pixcoord;
    vec2 _fp;
    vec2 _d11;
    vec3 _E[4];
    vec3 _A;
    vec3 _B;
    vec3 _C;
    vec3 _D;
    vec3 _E0;
    vec3 _F;
    vec3 _G;
    vec3 _H;
    vec3 _I;
    vec3 _P00;
    vec3 _P04;
    vec3 _P40;
    vec3 _P44;
    vec3 _A1;
    vec3 _B1;
    vec3 _C1;
    vec3 _A0;
    vec3 _D0;
    vec3 _G0;
    vec3 _C4;
    vec3 _F4;
    vec3 _I4;
    vec3 _G5;
    vec3 _H5;
    vec3 _I5;
    float _a;
    float _b;
    float _c;
    float _d;
    float _e;
    float _f;
    float _g;
    float _h;
    float _i;
    float _p00;
    float _p04;
    float _p40;
    float _p44;
    float _a1;
    float _b1;
    float _c1;
    float _a0;
    float _d0;
    float _g0;
    float _c4;
    float _f4;
    float _i4;
    float _g5;
    float _h5;
    float _i5;
    vec3 _res;
    output_dummy _OUT;
    _ps = vec2(9.99899983E-01/TextureSize.x, 9.99899983E-01/TextureSize.y);
    _dx = vec2(float(_ps.x), 0.00000000E+00);
    _dy = vec2(0.00000000E+00, float(_ps.y));
    _pixcoord = TEX0.xy/_ps;
    _fp = fract(_pixcoord);
    _d11 = TEX0.xy - _fp*_ps;
    _c0040 = (_d11 - vec2(float(_dx.x), float(_dx.y))) - vec2(float(_dy.x), float(_dy.y));
    _TMP0 = COMPAT_TEXTURE(Texture, _c0040);
    _A = vec3(float(_TMP0.x), float(_TMP0.y), float(_TMP0.z));
    _c0042 = _d11 - vec2(float(_dy.x), float(_dy.y));
    _TMP1 = COMPAT_TEXTURE(Texture, _c0042);
    _B = vec3(float(_TMP1.x), float(_TMP1.y), float(_TMP1.z));
    _c0044 = (_d11 + vec2(float(_dx.x), float(_dx.y))) - vec2(float(_dy.x), float(_dy.y));
    _TMP2 = COMPAT_TEXTURE(Texture, _c0044);
    _C = vec3(float(_TMP2.x), float(_TMP2.y), float(_TMP2.z));
    _c0046 = _d11 - vec2(float(_dx.x), float(_dx.y));
    _TMP3 = COMPAT_TEXTURE(Texture, _c0046);
    _D = vec3(float(_TMP3.x), float(_TMP3.y), float(_TMP3.z));
    _TMP4 = COMPAT_TEXTURE(Texture, _d11);
    _E0 = vec3(float(_TMP4.x), float(_TMP4.y), float(_TMP4.z));
    _c0050 = _d11 + vec2(float(_dx.x), float(_dx.y));
    _TMP5 = COMPAT_TEXTURE(Texture, _c0050);
    _F = vec3(float(_TMP5.x), float(_TMP5.y), float(_TMP5.z));
    _c0052 = (_d11 - vec2(float(_dx.x), float(_dx.y))) + vec2(float(_dy.x), float(_dy.y));
    _TMP6 = COMPAT_TEXTURE(Texture, _c0052);
    _G = vec3(float(_TMP6.x), float(_TMP6.y), float(_TMP6.z));
    _c0054 = _d11 + vec2(float(_dy.x), float(_dy.y));
    _TMP7 = COMPAT_TEXTURE(Texture, _c0054);
    _H = vec3(float(_TMP7.x), float(_TMP7.y), float(_TMP7.z));
    _c0056 = _d11 + vec2(float(_dx.x), float(_dx.y)) + vec2(float(_dy.x), float(_dy.y));
    _TMP8 = COMPAT_TEXTURE(Texture, _c0056);
    _I = vec3(float(_TMP8.x), float(_TMP8.y), float(_TMP8.z));
    _c0058 = (((_d11 - vec2(float(_dx.x), float(_dx.y))) - vec2(float(_dx.x), float(_dx.y))) - vec2(float(_dy.x), float(_dy.y))) - vec2(float(_dy.x), float(_dy.y));
    _TMP9 = COMPAT_TEXTURE(Texture, _c0058);
    _P00 = vec3(float(_TMP9.x), float(_TMP9.y), float(_TMP9.z));
    _c0060 = ((_d11 + vec2(float(_dx.x), float(_dx.y)) + vec2(float(_dx.x), float(_dx.y))) - vec2(float(_dy.x), float(_dy.y))) - vec2(float(_dy.x), float(_dy.y));
    _TMP10 = COMPAT_TEXTURE(Texture, _c0060);
    _P04 = vec3(float(_TMP10.x), float(_TMP10.y), float(_TMP10.z));
    _c0062 = ((_d11 - vec2(float(_dx.x), float(_dx.y))) - vec2(float(_dx.x), float(_dx.y))) + vec2(float(_dy.x), float(_dy.y)) + vec2(float(_dy.x), float(_dy.y));
    _TMP11 = COMPAT_TEXTURE(Texture, _c0062);
    _P40 = vec3(float(_TMP11.x), float(_TMP11.y), float(_TMP11.z));
    _c0064 = _d11 + vec2(float(_dx.x), float(_dx.y)) + vec2(float(_dx.x), float(_dx.y)) + vec2(float(_dy.x), float(_dy.y)) + vec2(float(_dy.x), float(_dy.y));
    _TMP12 = COMPAT_TEXTURE(Texture, _c0064);
    _P44 = vec3(float(_TMP12.x), float(_TMP12.y), float(_TMP12.z));
    _c0066 = ((_d11 - vec2(float(_dx.x), float(_dx.y))) - vec2(float(_dy.x), float(_dy.y))) - vec2(float(_dy.x), float(_dy.y));
    _TMP13 = COMPAT_TEXTURE(Texture, _c0066);
    _A1 = vec3(float(_TMP13.x), float(_TMP13.y), float(_TMP13.z));
    _c0068 = (_d11 - vec2(float(_dy.x), float(_dy.y))) - vec2(float(_dy.x), float(_dy.y));
    _TMP14 = COMPAT_TEXTURE(Texture, _c0068);
    _B1 = vec3(float(_TMP14.x), float(_TMP14.y), float(_TMP14.z));
    _c0070 = ((_d11 + vec2(float(_dx.x), float(_dx.y))) - vec2(float(_dy.x), float(_dy.y))) - vec2(float(_dy.x), float(_dy.y));
    _TMP15 = COMPAT_TEXTURE(Texture, _c0070);
    _C1 = vec3(float(_TMP15.x), float(_TMP15.y), float(_TMP15.z));
    _c0072 = ((_d11 - vec2(float(_dx.x), float(_dx.y))) - vec2(float(_dx.x), float(_dx.y))) - vec2(float(_dy.x), float(_dy.y));
    _TMP16 = COMPAT_TEXTURE(Texture, _c0072);
    _A0 = vec3(float(_TMP16.x), float(_TMP16.y), float(_TMP16.z));
    _c0074 = (_d11 - vec2(float(_dx.x), float(_dx.y))) - vec2(float(_dx.x), float(_dx.y));
    _TMP17 = COMPAT_TEXTURE(Texture, _c0074);
    _D0 = vec3(float(_TMP17.x), float(_TMP17.y), float(_TMP17.z));
    _c0076 = ((_d11 - vec2(float(_dx.x), float(_dx.y))) - vec2(float(_dx.x), float(_dx.y))) + vec2(float(_dy.x), float(_dy.y));
    _TMP18 = COMPAT_TEXTURE(Texture, _c0076);
    _G0 = vec3(float(_TMP18.x), float(_TMP18.y), float(_TMP18.z));
    _c0078 = (_d11 + vec2(float(_dx.x), float(_dx.y)) + vec2(float(_dx.x), float(_dx.y))) - vec2(float(_dy.x), float(_dy.y));
    _TMP19 = COMPAT_TEXTURE(Texture, _c0078);
    _C4 = vec3(float(_TMP19.x), float(_TMP19.y), float(_TMP19.z));
    _c0080 = _d11 + vec2(float(_dx.x), float(_dx.y)) + vec2(float(_dx.x), float(_dx.y));
    _TMP20 = COMPAT_TEXTURE(Texture, _c0080);
    _F4 = vec3(float(_TMP20.x), float(_TMP20.y), float(_TMP20.z));
    _c0082 = _d11 + vec2(float(_dx.x), float(_dx.y)) + vec2(float(_dx.x), float(_dx.y)) + vec2(float(_dy.x), float(_dy.y));
    _TMP21 = COMPAT_TEXTURE(Texture, _c0082);
    _I4 = vec3(float(_TMP21.x), float(_TMP21.y), float(_TMP21.z));
    _c0084 = (_d11 - vec2(float(_dx.x), float(_dx.y))) + vec2(float(_dy.x), float(_dy.y)) + vec2(float(_dy.x), float(_dy.y));
    _TMP22 = COMPAT_TEXTURE(Texture, _c0084);
    _G5 = vec3(float(_TMP22.x), float(_TMP22.y), float(_TMP22.z));
    _c0086 = _d11 + vec2(float(_dy.x), float(_dy.y)) + vec2(float(_dy.x), float(_dy.y));
    _TMP23 = COMPAT_TEXTURE(Texture, _c0086);
    _H5 = vec3(float(_TMP23.x), float(_TMP23.y), float(_TMP23.z));
    _c0088 = _d11 + vec2(float(_dx.x), float(_dx.y)) + vec2(float(_dy.x), float(_dy.y)) + vec2(float(_dy.x), float(_dy.y));
    _TMP24 = COMPAT_TEXTURE(Texture, _c0088);
    _I5 = vec3(float(_TMP24.x), float(_TMP24.y), float(_TMP24.z));
    _E[3] = _E0;
    _E[2] = _E0;
    _E[1] = _E0;
    _E[0] = _E0;
    _TMP32 = dot(vec3(float(_A.x), float(_A.y), float(_A.z)), vec3( 6.55360000E+04, 2.55000000E+02, 1.00000000E+00));
    _TMP31 = float(_TMP32);
    _a = float(_TMP31);
    _TMP32 = dot(vec3(float(_B.x), float(_B.y), float(_B.z)), vec3( 6.55360000E+04, 2.55000000E+02, 1.00000000E+00));
    _TMP31 = float(_TMP32);
    _b = float(_TMP31);
    _TMP32 = dot(vec3(float(_C.x), float(_C.y), float(_C.z)), vec3( 6.55360000E+04, 2.55000000E+02, 1.00000000E+00));
    _TMP31 = float(_TMP32);
    _c = float(_TMP31);
    _TMP32 = dot(vec3(float(_D.x), float(_D.y), float(_D.z)), vec3( 6.55360000E+04, 2.55000000E+02, 1.00000000E+00));
    _TMP31 = float(_TMP32);
    _d = float(_TMP31);
    _TMP32 = dot(vec3(float(_E0.x), float(_E0.y), float(_E0.z)), vec3( 6.55360000E+04, 2.55000000E+02, 1.00000000E+00));
    _TMP31 = float(_TMP32);
    _e = float(_TMP31);
    _TMP32 = dot(vec3(float(_F.x), float(_F.y), float(_F.z)), vec3( 6.55360000E+04, 2.55000000E+02, 1.00000000E+00));
    _TMP31 = float(_TMP32);
    _f = float(_TMP31);
    _TMP32 = dot(vec3(float(_G.x), float(_G.y), float(_G.z)), vec3( 6.55360000E+04, 2.55000000E+02, 1.00000000E+00));
    _TMP31 = float(_TMP32);
    _g = float(_TMP31);
    _TMP32 = dot(vec3(float(_H.x), float(_H.y), float(_H.z)), vec3( 6.55360000E+04, 2.55000000E+02, 1.00000000E+00));
    _TMP31 = float(_TMP32);
    _h = float(_TMP31);
    _TMP32 = dot(vec3(float(_I.x), float(_I.y), float(_I.z)), vec3( 6.55360000E+04, 2.55000000E+02, 1.00000000E+00));
    _TMP31 = float(_TMP32);
    _i = float(_TMP31);
    _TMP32 = dot(vec3(float(_P00.x), float(_P00.y), float(_P00.z)), vec3( 6.55360000E+04, 2.55000000E+02, 1.00000000E+00));
    _TMP31 = float(_TMP32);
    _p00 = float(_TMP31);
    _TMP32 = dot(vec3(float(_P04.x), float(_P04.y), float(_P04.z)), vec3( 6.55360000E+04, 2.55000000E+02, 1.00000000E+00));
    _TMP31 = float(_TMP32);
    _p04 = float(_TMP31);
    _TMP32 = dot(vec3(float(_P40.x), float(_P40.y), float(_P40.z)), vec3( 6.55360000E+04, 2.55000000E+02, 1.00000000E+00));
    _TMP31 = float(_TMP32);
    _p40 = float(_TMP31);
    _TMP32 = dot(vec3(float(_P44.x), float(_P44.y), float(_P44.z)), vec3( 6.55360000E+04, 2.55000000E+02, 1.00000000E+00));
    _TMP31 = float(_TMP32);
    _p44 = float(_TMP31);
    _TMP32 = dot(vec3(float(_A1.x), float(_A1.y), float(_A1.z)), vec3( 6.55360000E+04, 2.55000000E+02, 1.00000000E+00));
    _TMP31 = float(_TMP32);
    _a1 = float(_TMP31);
    _TMP32 = dot(vec3(float(_B1.x), float(_B1.y), float(_B1.z)), vec3( 6.55360000E+04, 2.55000000E+02, 1.00000000E+00));
    _TMP31 = float(_TMP32);
    _b1 = float(_TMP31);
    _TMP32 = dot(vec3(float(_C1.x), float(_C1.y), float(_C1.z)), vec3( 6.55360000E+04, 2.55000000E+02, 1.00000000E+00));
    _TMP31 = float(_TMP32);
    _c1 = float(_TMP31);
    _TMP32 = dot(vec3(float(_A0.x), float(_A0.y), float(_A0.z)), vec3( 6.55360000E+04, 2.55000000E+02, 1.00000000E+00));
    _TMP31 = float(_TMP32);
    _a0 = float(_TMP31);
    _TMP32 = dot(vec3(float(_D0.x), float(_D0.y), float(_D0.z)), vec3( 6.55360000E+04, 2.55000000E+02, 1.00000000E+00));
    _TMP31 = float(_TMP32);
    _d0 = float(_TMP31);
    _TMP32 = dot(vec3(float(_G0.x), float(_G0.y), float(_G0.z)), vec3( 6.55360000E+04, 2.55000000E+02, 1.00000000E+00));
    _TMP31 = float(_TMP32);
    _g0 = float(_TMP31);
    _TMP32 = dot(vec3(float(_C4.x), float(_C4.y), float(_C4.z)), vec3( 6.55360000E+04, 2.55000000E+02, 1.00000000E+00));
    _TMP31 = float(_TMP32);
    _c4 = float(_TMP31);
    _TMP32 = dot(vec3(float(_F4.x), float(_F4.y), float(_F4.z)), vec3( 6.55360000E+04, 2.55000000E+02, 1.00000000E+00));
    _TMP31 = float(_TMP32);
    _f4 = float(_TMP31);
    _TMP32 = dot(vec3(float(_I4.x), float(_I4.y), float(_I4.z)), vec3( 6.55360000E+04, 2.55000000E+02, 1.00000000E+00));
    _TMP31 = float(_TMP32);
    _i4 = float(_TMP31);
    _TMP32 = dot(vec3(float(_G5.x), float(_G5.y), float(_G5.z)), vec3( 6.55360000E+04, 2.55000000E+02, 1.00000000E+00));
    _TMP31 = float(_TMP32);
    _g5 = float(_TMP31);
    _TMP32 = dot(vec3(float(_H5.x), float(_H5.y), float(_H5.z)), vec3( 6.55360000E+04, 2.55000000E+02, 1.00000000E+00));
    _TMP31 = float(_TMP32);
    _h5 = float(_TMP31);
    _TMP32 = dot(vec3(float(_I5.x), float(_I5.y), float(_I5.z)), vec3( 6.55360000E+04, 2.55000000E+02, 1.00000000E+00));
    _TMP31 = float(_TMP32);
    _i5 = float(_TMP31);
    if (_e != _h && _h == _f && (_e != _i && (_e != _b || _e != _d || _b == _c1 && _d == _g0 || _f != _b && _f != _c || _h != _d && _h != _g) || _e == _g && (_i == _h || _e == _d || _h != _d) || _e == _c && (_i == _h || _e == _b || _f != _b))) { 
        if (_e == _c && _e == _d && _h == _g) { 
            if (_d == _d0 && _g == _g0) { 
                _E[3] = _E0 + 8.33496094E-01*(_H - _E0);
                _E[2] = _E0 + 5.00000000E-01*(_H - _E0);
            } else {
                _E[3] = _E0 + 7.50000000E-01*(_H - _E0);
                _E[2] = (_E0 + _H) - _E[3];
            } 
        } else {
            if (_e == _g && _e == _b && _f == _c) { 
                if (_b == _b1 && _c == _c1) { 
                    _E[3] = _E0 + 8.33496094E-01*(_F - _E0);
                    _E[1] = (_E0 + _F)*5.00000000E-01;
                } else {
                    _E[3] = _E0 + 7.50000000E-01*(_F - _E0);
                    _E[1] = (_E0 + _F) - _E[3];
                } 
            } else {
                _E[3] = (_E0 + _F)*5.00000000E-01;
            } 
        } 
    } else {
        if (_f != _i && _i == _f4 && (_f != _i4 || _i != _p44) && _f == _c4 && _f == _e && _i == _h && _e == _d && _h == _g) { 
            _E[3] = _E0 + 1.66748047E-01*(_H - _E0);
        } else {
            if (_h != _i && _i == _h5 && (_h != _i5 || _i != _p44) && _h == _g5 && _h == _e && _i == _f && _e == _b && _f == _c) { 
                _E[3] = _E0 + 1.66748047E-01*(_F - _E0);
            } else {
                if (_e != _h && _e != _f && _f != _i && _e == _c && (_h == _i && _f != _b || _e != _i && _f == _c4)) { 
                    _E[3] = (_E0 + _F)*5.00000000E-01;
                } else {
                    if (_e != _h && _e != _f && _h != _i && _e == _g && (_f == _i && _h != _d || _e != _i && _h == _g5)) { 
                        _E[3] = (_E0 + _H)*5.00000000E-01;
                    } else {
                        if (_e != _h && _e != _i && _e != _f && _g == _e && _e == _c) { 
                            _E[3] = (_F + _H)*5.00000000E-01;
                        } 
                    } 
                } 
            } 
        } 
    } 
    if (_e != _f && _f == _b && (_e != _c && (_e != _d || _e != _h || _d == _a0 && _h == _i5 || _b != _d && _b != _a || _f != _h && _f != _i) || _e == _i && (_c == _f || _e == _h || _f != _h) || _e == _a && (_c == _f || _e == _d || _b != _d))) { 
        if (_e == _a && _e == _h && _f == _i) { 
            if (_h == _h5 && _i == _i5) { 
                _E[1] = _E[1] + 8.33496094E-01*(_F - _E[1]);
                _E[3] = _E[3] + 5.00000000E-01*(_F - _E[3]);
            } else {
                _E[1] = _E[1] + 7.50000000E-01*(_F - _E[1]);
                _E[3] = (_E[3] + _F) - _E[1];
            } 
        } else {
            if (_e == _i && _e == _d && _b == _a) { 
                if (_d == _d0 && _a == _a0) { 
                    _E[1] = _E[1] + 8.33496094E-01*(_B - _E[1]);
                    _E[0] = (_E0 + _B)*5.00000000E-01;
                } else {
                    _E[1] = _E[1] + 7.50000000E-01*(_B - _E[1]);
                    _E[0] = (_E0 + _B) - _E[1];
                } 
            } else {
                _E[1] = (_E[1] + _B)*5.00000000E-01;
            } 
        } 
    } else {
        if (_b != _c && _c == _b1 && (_b != _c1 || _c != _p04) && _b == _a1 && _b == _e && _c == _f && _e == _h && _f == _i) { 
            _E[1] = _E[1] + 1.66748047E-01*(_F - _E[1]);
        } else {
            if (_f != _c && _c == _f4 && (_f != _c4 || _c != _p04) && _f == _i4 && _f == _e && _c == _b && _e == _d && _b == _a) { 
                _E[1] = _E[1] + 1.66748047E-01*(_B - _E[1]);
            } else {
                if (_e != _f && _e != _b && _b != _c && _e == _a && (_f == _c && _b != _d || _e != _c && _b == _a1)) { 
                    _E[1] = (_E[1] + _B)*5.00000000E-01;
                } else {
                    if (_e != _f && _e != _b && _f != _c && _e == _i && (_b == _c && _f != _h || _e != _c && _f == _i4)) { 
                        _E[1] = (_E[1] + _F)*5.00000000E-01;
                    } else {
                        if (_e != _f && _e != _c && _e != _b && _i == _e && _e == _a) { 
                            _E[1] = (_B + _F)*5.00000000E-01;
                        } 
                    } 
                } 
            } 
        } 
    } 
    if (_e != _b && _b == _d && (_e != _a && (_e != _h || _e != _f || _h == _g5 && _f == _c4 || _d != _h && _d != _g || _b != _f && _b != _c) || _e == _c && (_a == _b || _e == _f || _b != _f) || _e == _g && (_a == _b || _e == _h || _d != _h))) { 
        if (_e == _g && _e == _f && _b == _c) { 
            if (_f == _f4 && _c == _c4) { 
                _E[0] = _E[0] + 8.33496094E-01*(_B - _E[0]);
                _E[1] = _E[1] + 5.00000000E-01*(_B - _E[1]);
            } else {
                _E[0] = _E[0] + 7.50000000E-01*(_B - _E[0]);
                _E[1] = (_E[1] + _B) - _E[0];
            } 
        } else {
            if (_e == _c && _e == _h && _d == _g) { 
                if (_h == _h5 && _g == _g5) { 
                    _E[0] = _E[0] + 8.33496094E-01*(_D - _E[0]);
                    _E[2] = (_E[2] + _D)*5.00000000E-01;
                } else {
                    _E[0] = _E[0] + 7.50000000E-01*(_D - _E[0]);
                    _E[2] = (_E[2] + _D) - _E[0];
                } 
            } else {
                _E[0] = (_E[0] + _D)*5.00000000E-01;
            } 
        } 
    } else {
        if (_d != _a && _a == _d0 && (_d != _a0 || _a != _p00) && _d == _g0 && _d == _e && _a == _b && _e == _f && _b == _c) { 
            _E[0] = _E[0] + 1.66748047E-01*(_B - _E[0]);
        } else {
            if (_b != _a && _a == _b1 && (_b != _a1 || _a != _p00) && _b == _c1 && _b == _e && _a == _d && _e == _h && _d == _g) { 
                _E[0] = _E[0] + 1.66748047E-01*(_D - _E[0]);
            } else {
                if (_e != _b && _e != _d && _d != _a && _e == _g && (_b == _a && _d != _h || _e != _a && _d == _g0)) { 
                    _E[0] = (_E[0] + _D)*5.00000000E-01;
                } else {
                    if (_e != _b && _e != _d && _b != _a && _e == _c && (_d == _a && _b != _f || _e != _a && _b == _c1)) { 
                        _E[0] = (_E[0] + _B)*5.00000000E-01;
                    } else {
                        if (_e != _b && _e != _a && _e != _d && _c == _e && _e == _g) { 
                            _E[0] = (_D + _B)*5.00000000E-01;
                        } 
                    } 
                } 
            } 
        } 
    } 
    if (_e != _d && _d == _h && (_e != _g && (_e != _f || _e != _b || _f == _i4 && _b == _a1 || _h != _f && _h != _i || _d != _b && _d != _a) || _e == _a && (_g == _d || _e == _b || _d != _b) || _e == _i && (_g == _d || _e == _f || _h != _f))) { 
        if (_e == _i && _e == _b && _d == _a) { 
            if (_b == _b1 && _a == _a1) { 
                _E[2] = _E[2] + 8.33496094E-01*(_D - _E[2]);
                _E[0] = _E[0] + 5.00000000E-01*(_D - _E[0]);
            } else {
                _E[2] = _E[2] + 7.50000000E-01*(_D - _E[2]);
                _E[0] = (_E[0] + _D) - _E[2];
            } 
        } else {
            if (_e == _a && _e == _f && _h == _i) { 
                if (_f == _f4 && _i == _i4) { 
                    _E[2] = _E[2] + 8.33496094E-01*(_H - _E[2]);
                    _E[3] = (_E[3] + _H)*5.00000000E-01;
                } else {
                    _E[2] = _E[2] + 7.50000000E-01*(_H - _E[2]);
                    _E[3] = (_E[3] + _H) - _E[2];
                } 
            } else {
                _E[2] = (_E[2] + _H)*5.00000000E-01;
            } 
        } 
    } else {
        if (_h != _g && _g == _h5 && (_h != _g5 || _g != _p40) && _h == _i5 && _h == _e && _g == _d && _e == _b && _d == _a) { 
            _E[2] = _E[2] + 1.66748047E-01*(_D - _E[2]);
        } else {
            if (_d != _g && _g == _d0 && (_d != _g0 || _g != _p40) && _d == _a0 && _d == _e && _g == _h && _e == _f && _h == _i) { 
                _E[2] = _E[2] + 1.66748047E-01*(_H - _E[2]);
            } else {
                if (_e != _d && _e != _h && _h != _g && _e == _i && (_d == _g && _h != _f || _e != _g && _h == _i5)) { 
                    _E[2] = (_E[2] + _H)*5.00000000E-01;
                } else {
                    if (_e != _d && _e != _h && _d != _g && _e == _a && (_h == _g && _d != _b || _e != _g && _d == _a0)) { 
                        _E[2] = (_E[2] + _D)*5.00000000E-01;
                    } else {
                        if (_e != _d && _e != _g && _e != _h && _a == _e && _e == _i) { 
                            _E[2] = (_H + _D)*5.00000000E-01;
                        } 
                    } 
                } 
            } 
        } 
    } 
    if (_fp.x < 5.00000000E-01) { 
        if (_fp.y < 5.00000000E-01) { 
            _TMP29 = _E[0];
        } else {
            _TMP29 = _E[2];
        } 
        _TMP28 = _TMP29;
    } else {
        if (_fp.y < 5.00000000E-01) { 
            _TMP30 = _E[1];
        } else {
            _TMP30 = _E[3];
        } 
        _TMP28 = _TMP30;
    } 
    _res = vec3(float(_TMP28.x), float(_TMP28.y), float(_TMP28.z));
    _OUT._color1 = vec4(_res.x, _res.y, _res.z, 1.00000000E+00);
    FragColor = _OUT._color1;
    return;
} 
#endif
