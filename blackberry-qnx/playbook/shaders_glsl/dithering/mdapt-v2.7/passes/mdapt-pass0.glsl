// GLSL shader autogenerated by cg2glsl.py.
#if defined(VERTEX)

#if __VERSION__ >= 130
#define COMPAT_VARYING out
#define COMPAT_ATTRIBUTE in
#define COMPAT_TEXTURE texture
#else
#define COMPAT_VARYING varying 
#define COMPAT_ATTRIBUTE attribute 
#define COMPAT_TEXTURE texture2D
#endif

#ifdef GL_ES
#define COMPAT_PRECISION mediump
#else
#define COMPAT_PRECISION
#endif
COMPAT_VARYING     vec2 VARt1;
COMPAT_VARYING     vec2 _texCoord1;
COMPAT_VARYING     vec4 _position1;
struct input_dummy {
    vec2 _video_size;
    vec2 _texture_size;
    vec2 _output_dummy_size;
};
struct out_vertex {
    vec4 _position1;
    vec2 _texCoord1;
    vec2 VARt1;
};
out_vertex _ret_0;
input_dummy _IN1;
vec4 _r0006;
COMPAT_ATTRIBUTE vec4 VertexCoord;
COMPAT_ATTRIBUTE vec4 TexCoord;
COMPAT_VARYING vec4 TEX0;
 
uniform mat4 MVPMatrix;
uniform int FrameDirection;
uniform int FrameCount;
uniform COMPAT_PRECISION vec2 OutputSize;
uniform COMPAT_PRECISION vec2 TextureSize;
uniform COMPAT_PRECISION vec2 InputSize;
void main()
{
    out_vertex _OUT;
    vec2 _ps;
    _r0006 = VertexCoord.x*MVPMatrix[0];
    _r0006 = _r0006 + VertexCoord.y*MVPMatrix[1];
    _r0006 = _r0006 + VertexCoord.z*MVPMatrix[2];
    _r0006 = _r0006 + VertexCoord.w*MVPMatrix[3];
    _ps = vec2(1.00000000E+00/TextureSize.x, 1.00000000E+00/TextureSize.y);
    _OUT.VARt1 = vec2(_ps.x, _ps.y);
    _ret_0._position1 = _r0006;
    _ret_0._texCoord1 = TexCoord.xy;
    VARt1 = _OUT.VARt1;
    gl_Position = _r0006;
    TEX0.xy = TexCoord.xy;
    return;
    TEX0.xy = _ret_0._texCoord1;
} 
#elif defined(FRAGMENT)

#if __VERSION__ >= 130
#define COMPAT_VARYING in
#define COMPAT_TEXTURE texture
out vec4 FragColor;
#else
#define COMPAT_VARYING varying
#define FragColor gl_FragColor
#define COMPAT_TEXTURE texture2D
#endif

#ifdef GL_ES
#ifdef GL_FRAGMENT_PRECISION_HIGH
precision highp float;
#else
precision mediump float;
#endif
#define COMPAT_PRECISION mediump
#else
#define COMPAT_PRECISION
#endif
COMPAT_VARYING     vec2 VARt1;
COMPAT_VARYING     vec2 _texCoord;
struct input_dummy {
    vec2 _video_size;
    vec2 _texture_size;
    vec2 _output_dummy_size;
};
struct out_vertex {
    vec2 _texCoord;
    vec2 VARt1;
};
vec3 _ret_0;
float _TMP16;
float _TMP15;
float _TMP14;
float _TMP13;
float _TMP12;
float _TMP11;
float _TMP10;
float _TMP9;
float _TMP23;
float _TMP22;
float _TMP21;
float _TMP20;
float _TMP19;
float _TMP25;
float _TMP24;
float _TMP8;
float _TMP7;
float _TMP6;
float _TMP5;
float _TMP18;
float _TMP17;
vec4 _TMP4;
vec4 _TMP3;
vec4 _TMP2;
vec4 _TMP1;
vec4 _TMP0;
out_vertex _VAR1;
uniform sampler2D Texture;
vec2 _c0032;
vec2 _c0034;
vec2 _c0036;
vec2 _c0038;
vec3 _v0040;
vec3 _v0046;
vec3 _v0052;
vec3 _v0058;
vec3 _diff0066;
float _ravg0066;
float _x0066;
float _a0068;
float _x0074;
float _TMP75;
vec3 _diff0084;
float _ravg0084;
float _x0084;
float _a0086;
float _x0092;
float _TMP93;
vec3 _diff0102;
float _ravg0102;
float _x0102;
float _a0104;
float _x0110;
float _TMP111;
vec3 _diff0120;
float _ravg0120;
float _x0120;
float _a0122;
float _x0128;
float _TMP129;
vec3 _diff0138;
float _ravg0138;
float _x0138;
float _a0140;
float _x0146;
float _TMP147;
vec3 _diff0156;
float _ravg0156;
float _x0156;
float _a0158;
float _x0164;
float _TMP165;
float _TMP171;
float _e0172;
float _f0172;
float _d0172;
float _c0172;
COMPAT_VARYING vec4 TEX0;
 
uniform int FrameDirection;
uniform int FrameCount;
uniform COMPAT_PRECISION vec2 OutputSize;
uniform COMPAT_PRECISION vec2 TextureSize;
uniform COMPAT_PRECISION vec2 InputSize;
void main()
{
    vec3 _dCL;
    vec3 _dCR;
    vec3 _dCD;
    vec3 _dCU;
    float _r;
    float _g;
    _TMP0 = COMPAT_TEXTURE(Texture, TEX0.xy);
    _c0032 = TEX0.xy + vec2( -1.00000000E+00, 0.00000000E+00)*VARt1;
    _TMP1 = COMPAT_TEXTURE(Texture, _c0032);
    _c0034 = TEX0.xy + vec2( 1.00000000E+00, 0.00000000E+00)*VARt1;
    _TMP2 = COMPAT_TEXTURE(Texture, _c0034);
    _c0036 = TEX0.xy + vec2( 0.00000000E+00, -1.00000000E+00)*VARt1;
    _TMP3 = COMPAT_TEXTURE(Texture, _c0036);
    _c0038 = TEX0.xy + vec2( 0.00000000E+00, 1.00000000E+00)*VARt1;
    _TMP4 = COMPAT_TEXTURE(Texture, _c0038);
    _v0040 = _TMP0.xyz - _TMP1.xyz;
    _TMP17 = dot(_v0040, _v0040);
    _TMP18 = inversesqrt(_TMP17);
    _dCL = _TMP18*_v0040;
    _v0046 = _TMP0.xyz - _TMP2.xyz;
    _TMP17 = dot(_v0046, _v0046);
    _TMP18 = inversesqrt(_TMP17);
    _dCR = _TMP18*_v0046;
    _v0052 = _TMP0.xyz - _TMP4.xyz;
    _TMP17 = dot(_v0052, _v0052);
    _TMP18 = inversesqrt(_TMP17);
    _dCD = _TMP18*_v0052;
    _v0058 = _TMP0.xyz - _TMP3.xyz;
    _TMP17 = dot(_v0058, _v0058);
    _TMP18 = inversesqrt(_TMP17);
    _dCU = _TMP18*_v0058;
    _TMP5 = dot(_dCL, _dCR);
    _diff0066 = _TMP1.xyz - _TMP2.xyz;
    _ravg0066 = (_TMP1.x + _TMP2.x)*5.00000000E-01;
    _diff0066 = _diff0066*_diff0066*vec3(2.00000000E+00 + _ravg0066, 4.00000000E+00, 3.00000000E+00 - _ravg0066);
    _a0068 = _diff0066.x + _diff0066.y + _diff0066.z;
    _TMP24 = inversesqrt(_a0068);
    _TMP19 = 1.00000000E+00/_TMP24;
    _x0074 = (_TMP19 - 3.00000000E+00)/-3.00000000E+00;
    _TMP25 = min(1.00000000E+00, _x0074);
    _TMP75 = max(0.00000000E+00, _TMP25);
    _x0066 = _TMP75*_TMP75*(3.00000000E+00 - 2.00000000E+00*_TMP75);
    _TMP6 = _x0066*_x0066;
    _r = _TMP5*_TMP6;
    _TMP7 = dot(_dCU, _dCD);
    _diff0084 = _TMP3.xyz - _TMP4.xyz;
    _ravg0084 = (_TMP3.x + _TMP4.x)*5.00000000E-01;
    _diff0084 = _diff0084*_diff0084*vec3(2.00000000E+00 + _ravg0084, 4.00000000E+00, 3.00000000E+00 - _ravg0084);
    _a0086 = _diff0084.x + _diff0084.y + _diff0084.z;
    _TMP24 = inversesqrt(_a0086);
    _TMP19 = 1.00000000E+00/_TMP24;
    _x0092 = (_TMP19 - 3.00000000E+00)/-3.00000000E+00;
    _TMP25 = min(1.00000000E+00, _x0092);
    _TMP93 = max(0.00000000E+00, _TMP25);
    _x0084 = _TMP93*_TMP93*(3.00000000E+00 - 2.00000000E+00*_TMP93);
    _TMP8 = _x0084*_x0084;
    _g = _TMP7*_TMP8;
    _TMP9 = dot(_dCL, _dCU);
    _diff0102 = _TMP1.xyz - _TMP3.xyz;
    _ravg0102 = (_TMP1.x + _TMP3.x)*5.00000000E-01;
    _diff0102 = _diff0102*_diff0102*vec3(2.00000000E+00 + _ravg0102, 4.00000000E+00, 3.00000000E+00 - _ravg0102);
    _a0104 = _diff0102.x + _diff0102.y + _diff0102.z;
    _TMP24 = inversesqrt(_a0104);
    _TMP19 = 1.00000000E+00/_TMP24;
    _x0110 = (_TMP19 - 3.00000000E+00)/-3.00000000E+00;
    _TMP25 = min(1.00000000E+00, _x0110);
    _TMP111 = max(0.00000000E+00, _TMP25);
    _x0102 = _TMP111*_TMP111*(3.00000000E+00 - 2.00000000E+00*_TMP111);
    _TMP10 = _x0102*_x0102;
    _TMP11 = dot(_dCL, _dCD);
    _diff0120 = _TMP1.xyz - _TMP4.xyz;
    _ravg0120 = (_TMP1.x + _TMP4.x)*5.00000000E-01;
    _diff0120 = _diff0120*_diff0120*vec3(2.00000000E+00 + _ravg0120, 4.00000000E+00, 3.00000000E+00 - _ravg0120);
    _a0122 = _diff0120.x + _diff0120.y + _diff0120.z;
    _TMP24 = inversesqrt(_a0122);
    _TMP19 = 1.00000000E+00/_TMP24;
    _x0128 = (_TMP19 - 3.00000000E+00)/-3.00000000E+00;
    _TMP25 = min(1.00000000E+00, _x0128);
    _TMP129 = max(0.00000000E+00, _TMP25);
    _x0120 = _TMP129*_TMP129*(3.00000000E+00 - 2.00000000E+00*_TMP129);
    _TMP12 = _x0120*_x0120;
    _TMP13 = dot(_dCR, _dCU);
    _diff0138 = _TMP2.xyz - _TMP3.xyz;
    _ravg0138 = (_TMP2.x + _TMP3.x)*5.00000000E-01;
    _diff0138 = _diff0138*_diff0138*vec3(2.00000000E+00 + _ravg0138, 4.00000000E+00, 3.00000000E+00 - _ravg0138);
    _a0140 = _diff0138.x + _diff0138.y + _diff0138.z;
    _TMP24 = inversesqrt(_a0140);
    _TMP19 = 1.00000000E+00/_TMP24;
    _x0146 = (_TMP19 - 3.00000000E+00)/-3.00000000E+00;
    _TMP25 = min(1.00000000E+00, _x0146);
    _TMP147 = max(0.00000000E+00, _TMP25);
    _x0138 = _TMP147*_TMP147*(3.00000000E+00 - 2.00000000E+00*_TMP147);
    _TMP14 = _x0138*_x0138;
    _TMP15 = dot(_dCR, _dCD);
    _diff0156 = _TMP2.xyz - _TMP4.xyz;
    _ravg0156 = (_TMP2.x + _TMP4.x)*5.00000000E-01;
    _diff0156 = _diff0156*_diff0156*vec3(2.00000000E+00 + _ravg0156, 4.00000000E+00, 3.00000000E+00 - _ravg0156);
    _a0158 = _diff0156.x + _diff0156.y + _diff0156.z;
    _TMP24 = inversesqrt(_a0158);
    _TMP19 = 1.00000000E+00/_TMP24;
    _x0164 = (_TMP19 - 3.00000000E+00)/-3.00000000E+00;
    _TMP25 = min(1.00000000E+00, _x0164);
    _TMP165 = max(0.00000000E+00, _TMP25);
    _x0156 = _TMP165*_TMP165*(3.00000000E+00 - 2.00000000E+00*_TMP165);
    _TMP16 = _x0156*_x0156;
    _c0172 = _TMP9*_TMP10;
    _d0172 = _TMP11*_TMP12;
    _e0172 = _TMP13*_TMP14;
    _f0172 = _TMP15*_TMP16;
    _TMP20 = min(_e0172, _f0172);
    _TMP21 = min(_d0172, _TMP20);
    _TMP22 = min(_c0172, _TMP21);
    _TMP23 = min(_g, _TMP22);
    _TMP171 = min(_r, _TMP23);
    _ret_0 = vec3(_r, _g, _TMP171);
    FragColor.xyz = _ret_0;
    return;
} 
#endif
