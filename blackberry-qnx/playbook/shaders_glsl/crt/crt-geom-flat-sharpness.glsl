// GLSL shader autogenerated by cg2glsl.py.
#if defined(VERTEX)

#if __VERSION__ >= 130
#define COMPAT_VARYING out
#define COMPAT_ATTRIBUTE in
#define COMPAT_TEXTURE texture
#else
#define COMPAT_VARYING varying 
#define COMPAT_ATTRIBUTE attribute 
#define COMPAT_TEXTURE texture2D
#endif

#ifdef GL_ES
#define COMPAT_PRECISION mediump
#else
#define COMPAT_PRECISION
#endif
COMPAT_VARYING     vec2 _one;
COMPAT_VARYING     vec2 _texCoord;
COMPAT_VARYING     float _frame_rotation;
COMPAT_VARYING     vec2 _texCoord_size;
struct input_dummy {
    vec2 _video_size;
    vec2 _texCoord_size;
    vec2 _output_dummy_size;
    float _frame_count;
    float _frame_direction;
    float _frame_rotation;
    vec2 _texture_size;
float _placeholder36;
};
struct tex_coords {
    vec2 _texCoord;
    vec2 _one;
};
vec4 _oPosition1;
tex_coords _coords1;
input_dummy _IN1;
vec4 _r0006;
COMPAT_ATTRIBUTE vec4 VertexCoord;
COMPAT_ATTRIBUTE vec4 COLOR;
COMPAT_VARYING vec4 COL0;
COMPAT_ATTRIBUTE vec4 TexCoord;
COMPAT_VARYING vec4 TEX0;
COMPAT_VARYING vec4 TEX2;
 
uniform mat4 MVPMatrix;
uniform int FrameDirection;
uniform int FrameCount;
uniform COMPAT_PRECISION vec2 OutputSize;
uniform COMPAT_PRECISION vec2 TextureSize;
uniform COMPAT_PRECISION vec2 InputSize;
void main()
{
    vec4 _oColor;
    vec2 _TextureSize;
    _r0006 = VertexCoord.x*MVPMatrix[0];
    _r0006 = _r0006 + VertexCoord.y*MVPMatrix[1];
    _r0006 = _r0006 + VertexCoord.z*MVPMatrix[2];
    _r0006 = _r0006 + VertexCoord.w*MVPMatrix[3];
    _oPosition1 = _r0006;
    _oColor = COLOR;
    _TextureSize = vec2(2.00000000E+00*TextureSize.x, TextureSize.y);
    _coords1._texCoord = TexCoord.xy;
    _coords1._one = 1.00000000E+00/_TextureSize;
    gl_Position = _r0006;
    COL0 = COLOR;
    TEX0.xy = TexCoord.xy;
    TEX2.xy = _coords1._one;
} 
#elif defined(FRAGMENT)

#if __VERSION__ >= 130
#define COMPAT_VARYING in
#define COMPAT_TEXTURE texture
out vec4 FragColor;
#else
#define COMPAT_VARYING varying
#define FragColor gl_FragColor
#define COMPAT_TEXTURE texture2D
#endif

#ifdef GL_ES
#ifdef GL_FRAGMENT_PRECISION_HIGH
precision highp float;
#else
precision mediump float;
#endif
#define COMPAT_PRECISION mediump
#else
#define COMPAT_PRECISION
#endif
COMPAT_VARYING     vec2 _one1;
COMPAT_VARYING     vec2 _texCoord;
COMPAT_VARYING     float _frame_rotation;
COMPAT_VARYING     vec2 _texCoord_size;
struct input_dummy {
    vec2 _video_size;
    vec2 _texCoord_size;
    vec2 _output_dummy_size;
    float _frame_count;
    float _frame_direction;
    float _frame_rotation;
    vec2 _texture_size;
float _placeholder31;
};
struct tex_coords {
    vec2 _texCoord;
    vec2 _one1;
};
vec4 _ret_0;
float _TMP48;
float _TMP47;
float _TMP46;
vec4 _TMP31;
float _TMP30;
vec4 _TMP44;
float _TMP40;
float _TMP39;
float _TMP38;
float _TMP37;
float _TMP52;
float _TMP51;
float _TMP50;
float _TMP49;
vec4 _TMP42;
vec4 _TMP29;
float _TMP28;
vec4 _TMP27;
float _TMP26;
vec4 _TMP25;
vec4 _TMP41;
vec4 _TMP23;
vec4 _TMP21;
vec4 _TMP19;
vec4 _TMP17;
vec4 _TMP22;
vec4 _TMP20;
vec4 _TMP18;
vec4 _TMP16;
vec4 _TMP14;
vec4 _TMP12;
vec4 _TMP10;
vec4 _TMP8;
vec4 _TMP13;
vec4 _TMP11;
vec4 _TMP9;
vec4 _TMP7;
float _TMP6;
vec4 _TMP5;
vec4 _TMP4;
float _TMP36;
float _TMP35;
float _TMP34;
float _TMP33;
vec4 _TMP3;
vec2 _TMP2;
float _TMP1;
float _TMP32;
float _TMP0;
input_dummy _IN1;
float _x0060;
float _x0064;
vec2 _TMP65;
vec4 _TMP73;
vec4 _x0088;
vec2 _c0100;
vec2 _c0124;
vec2 _c0136;
vec4 _r0148;
vec4 _TMP149;
vec2 _c0156;
vec2 _c0168;
vec2 _c0180;
vec2 _c0192;
vec4 _r0204;
vec4 _TMP205;
vec4 _wid0212;
vec4 _weights0212;
vec4 _TMP223;
vec4 _x0224;
vec4 _a0236;
vec4 _TMP245;
vec4 _x0246;
vec4 _wid0258;
vec4 _weights0258;
float _distance0258;
vec4 _TMP269;
vec4 _x0270;
vec4 _a0282;
vec4 _TMP291;
vec4 _x0292;
vec4 _wid0304;
vec4 _weights0304;
vec4 _TMP315;
vec4 _x0316;
vec4 _a0328;
vec4 _TMP337;
vec4 _x0338;
float _a0350;
vec4 _wid0352;
vec4 _weights0352;
vec4 _TMP363;
vec4 _x0364;
vec4 _a0376;
vec4 _TMP385;
vec4 _x0386;
vec4 _wid0400;
vec4 _weights0400;
vec4 _TMP411;
vec4 _x0412;
vec4 _a0424;
vec4 _TMP433;
vec4 _x0434;
float _a0446;
vec4 _wid0448;
vec4 _weights0448;
vec4 _TMP459;
vec4 _x0460;
vec4 _a0472;
vec4 _TMP481;
vec4 _x0482;
COMPAT_VARYING vec4 TEX0;
COMPAT_VARYING vec4 TEX2;
 
uniform sampler2D Texture;
uniform int FrameDirection;
uniform int FrameCount;
uniform COMPAT_PRECISION vec2 OutputSize;
uniform COMPAT_PRECISION vec2 TextureSize;
uniform COMPAT_PRECISION vec2 InputSize;
void main()
{
    vec2 _xy;
    vec2 _ilfac;
    vec2 _TextureSize;
    vec2 _ilvec;
    vec2 _ratio_scale;
    float _filter;
    vec2 _uv_ratio;
    vec4 _coeffs;
    vec4 _weights1;
    vec4 _weights2;
    vec3 _mul_res;
    _x0060 = InputSize.y/2.00000000E+02;
    _TMP0 = floor(_x0060);
    _ilfac = vec2(1.00000000E+00, _TMP0);
    _TextureSize = vec2(2.00000000E+00*TextureSize.x, TextureSize.y);
    if (_ilfac.y > 1.50000000E+00) { 
        _x0064 = float(FrameCount)/2.00000000E+00;
        _TMP32 = floor(_x0064);
        _TMP1 = float(FrameCount) - 2.00000000E+00*_TMP32;
    } else {
        _TMP1 = 0.00000000E+00;
    } 
    _ilvec = vec2(0.00000000E+00, _TMP1);
    _ratio_scale = ((TEX0.xy*_TextureSize - vec2( 5.00000000E-01, 5.00000000E-01)) + _ilvec)/_ilfac;
    _filter = ((InputSize/(OutputSize*_TextureSize))*_ratio_scale.y).x;
    _TMP65 = fract(_ratio_scale);
    _TMP2 = floor(_ratio_scale);
    _xy = ((_TMP2*_ilfac + vec2( 5.00000000E-01, 5.00000000E-01)) - _ilvec)/_TextureSize;
    _coeffs = 3.14159274E+00*vec4(1.00000000E+00 + _TMP65.x, _TMP65.x, 1.00000000E+00 - _TMP65.x, 2.00000000E+00 - _TMP65.x);
    _TMP3 = abs(_coeffs);
    _TMP73 = max(_TMP3, vec4( 9.99999975E-06, 9.99999975E-06, 9.99999975E-06, 9.99999975E-06));
    _TMP33 = sin(_TMP73.x);
    _TMP34 = sin(_TMP73.y);
    _TMP35 = sin(_TMP73.z);
    _TMP36 = sin(_TMP73.w);
    _TMP4 = vec4(_TMP33, _TMP34, _TMP35, _TMP36);
    _x0088 = _TMP73/2.00000000E+00;
    _TMP33 = sin(_x0088.x);
    _TMP34 = sin(_x0088.y);
    _TMP35 = sin(_x0088.z);
    _TMP36 = sin(_x0088.w);
    _TMP5 = vec4(_TMP33, _TMP34, _TMP35, _TMP36);
    _coeffs = ((2.00000000E+00*_TMP4)*_TMP5)/(_TMP73*_TMP73);
    _TMP6 = dot(_coeffs, vec4( 1.00000000E+00, 1.00000000E+00, 1.00000000E+00, 1.00000000E+00));
    _coeffs = _coeffs/_TMP6;
    _c0100 = _xy + vec2(-TEX2.x, 0.00000000E+00);
    _TMP7 = COMPAT_TEXTURE(Texture, _c0100);
    _TMP37 = pow(_TMP7.x, 2.40000010E+00);
    _TMP38 = pow(_TMP7.y, 2.40000010E+00);
    _TMP39 = pow(_TMP7.z, 2.40000010E+00);
    _TMP40 = pow(_TMP7.w, 2.40000010E+00);
    _TMP8 = vec4(_TMP37, _TMP38, _TMP39, _TMP40);
    _TMP9 = COMPAT_TEXTURE(Texture, _xy);
    _TMP37 = pow(_TMP9.x, 2.40000010E+00);
    _TMP38 = pow(_TMP9.y, 2.40000010E+00);
    _TMP39 = pow(_TMP9.z, 2.40000010E+00);
    _TMP40 = pow(_TMP9.w, 2.40000010E+00);
    _TMP10 = vec4(_TMP37, _TMP38, _TMP39, _TMP40);
    _c0124 = _xy + vec2(TEX2.x, 0.00000000E+00);
    _TMP11 = COMPAT_TEXTURE(Texture, _c0124);
    _TMP37 = pow(_TMP11.x, 2.40000010E+00);
    _TMP38 = pow(_TMP11.y, 2.40000010E+00);
    _TMP39 = pow(_TMP11.z, 2.40000010E+00);
    _TMP40 = pow(_TMP11.w, 2.40000010E+00);
    _TMP12 = vec4(_TMP37, _TMP38, _TMP39, _TMP40);
    _c0136 = _xy + vec2(2.00000000E+00*TEX2.x, 0.00000000E+00);
    _TMP13 = COMPAT_TEXTURE(Texture, _c0136);
    _TMP37 = pow(_TMP13.x, 2.40000010E+00);
    _TMP38 = pow(_TMP13.y, 2.40000010E+00);
    _TMP39 = pow(_TMP13.z, 2.40000010E+00);
    _TMP40 = pow(_TMP13.w, 2.40000010E+00);
    _TMP14 = vec4(_TMP37, _TMP38, _TMP39, _TMP40);
    _r0148 = _coeffs.x*_TMP8;
    _r0148 = _r0148 + _coeffs.y*_TMP10;
    _r0148 = _r0148 + _coeffs.z*_TMP12;
    _r0148 = _r0148 + _coeffs.w*_TMP14;
    _TMP41 = min(vec4( 1.00000000E+00, 1.00000000E+00, 1.00000000E+00, 1.00000000E+00), _r0148);
    _TMP149 = max(vec4( 0.00000000E+00, 0.00000000E+00, 0.00000000E+00, 0.00000000E+00), _TMP41);
    _c0156 = _xy + vec2(-TEX2.x, TEX2.y);
    _TMP16 = COMPAT_TEXTURE(Texture, _c0156);
    _TMP37 = pow(_TMP16.x, 2.40000010E+00);
    _TMP38 = pow(_TMP16.y, 2.40000010E+00);
    _TMP39 = pow(_TMP16.z, 2.40000010E+00);
    _TMP40 = pow(_TMP16.w, 2.40000010E+00);
    _TMP17 = vec4(_TMP37, _TMP38, _TMP39, _TMP40);
    _c0168 = _xy + vec2(0.00000000E+00, TEX2.y);
    _TMP18 = COMPAT_TEXTURE(Texture, _c0168);
    _TMP37 = pow(_TMP18.x, 2.40000010E+00);
    _TMP38 = pow(_TMP18.y, 2.40000010E+00);
    _TMP39 = pow(_TMP18.z, 2.40000010E+00);
    _TMP40 = pow(_TMP18.w, 2.40000010E+00);
    _TMP19 = vec4(_TMP37, _TMP38, _TMP39, _TMP40);
    _c0180 = _xy + TEX2.xy;
    _TMP20 = COMPAT_TEXTURE(Texture, _c0180);
    _TMP37 = pow(_TMP20.x, 2.40000010E+00);
    _TMP38 = pow(_TMP20.y, 2.40000010E+00);
    _TMP39 = pow(_TMP20.z, 2.40000010E+00);
    _TMP40 = pow(_TMP20.w, 2.40000010E+00);
    _TMP21 = vec4(_TMP37, _TMP38, _TMP39, _TMP40);
    _c0192 = _xy + vec2(2.00000000E+00*TEX2.x, TEX2.y);
    _TMP22 = COMPAT_TEXTURE(Texture, _c0192);
    _TMP37 = pow(_TMP22.x, 2.40000010E+00);
    _TMP38 = pow(_TMP22.y, 2.40000010E+00);
    _TMP39 = pow(_TMP22.z, 2.40000010E+00);
    _TMP40 = pow(_TMP22.w, 2.40000010E+00);
    _TMP23 = vec4(_TMP37, _TMP38, _TMP39, _TMP40);
    _r0204 = _coeffs.x*_TMP17;
    _r0204 = _r0204 + _coeffs.y*_TMP19;
    _r0204 = _r0204 + _coeffs.z*_TMP21;
    _r0204 = _r0204 + _coeffs.w*_TMP23;
    _TMP41 = min(vec4( 1.00000000E+00, 1.00000000E+00, 1.00000000E+00, 1.00000000E+00), _r0204);
    _TMP205 = max(vec4( 0.00000000E+00, 0.00000000E+00, 0.00000000E+00, 0.00000000E+00), _TMP41);
    _TMP37 = pow(_TMP149.x, 4.00000000E+00);
    _TMP38 = pow(_TMP149.y, 4.00000000E+00);
    _TMP39 = pow(_TMP149.z, 4.00000000E+00);
    _TMP40 = pow(_TMP149.w, 4.00000000E+00);
    _TMP42 = vec4(_TMP37, _TMP38, _TMP39, _TMP40);
    _wid0212 = 2.00000000E+00 + 2.00000000E+00*_TMP42;
    _weights0212 = vec4(_TMP65.y/4.00000006E-01, _TMP65.y/4.00000006E-01, _TMP65.y/4.00000006E-01, _TMP65.y/4.00000006E-01);
    _x0224 = 5.00000000E-01*_wid0212;
    _TMP49 = inversesqrt(_x0224.x);
    _TMP50 = inversesqrt(_x0224.y);
    _TMP51 = inversesqrt(_x0224.z);
    _TMP52 = inversesqrt(_x0224.w);
    _TMP223 = vec4(_TMP49, _TMP50, _TMP51, _TMP52);
    _a0236 = _weights0212*_TMP223;
    _TMP37 = pow(_a0236.x, _wid0212.x);
    _TMP38 = pow(_a0236.y, _wid0212.y);
    _TMP39 = pow(_a0236.z, _wid0212.z);
    _TMP40 = pow(_a0236.w, _wid0212.w);
    _TMP44 = vec4(_TMP37, _TMP38, _TMP39, _TMP40);
    _x0246 = -_TMP44;
    _TMP37 = pow(2.71828198E+00, _x0246.x);
    _TMP38 = pow(2.71828198E+00, _x0246.y);
    _TMP39 = pow(2.71828198E+00, _x0246.z);
    _TMP40 = pow(2.71828198E+00, _x0246.w);
    _TMP245 = vec4(_TMP37, _TMP38, _TMP39, _TMP40);
    _weights1 = (1.39999998E+00*_TMP245)/(6.00000024E-01 + 2.00000003E-01*_wid0212);
    _distance0258 = 1.00000000E+00 - _TMP65.y;
    _TMP37 = pow(_TMP205.x, 4.00000000E+00);
    _TMP38 = pow(_TMP205.y, 4.00000000E+00);
    _TMP39 = pow(_TMP205.z, 4.00000000E+00);
    _TMP40 = pow(_TMP205.w, 4.00000000E+00);
    _TMP42 = vec4(_TMP37, _TMP38, _TMP39, _TMP40);
    _wid0258 = 2.00000000E+00 + 2.00000000E+00*_TMP42;
    _weights0258 = vec4(_distance0258/4.00000006E-01, _distance0258/4.00000006E-01, _distance0258/4.00000006E-01, _distance0258/4.00000006E-01);
    _x0270 = 5.00000000E-01*_wid0258;
    _TMP49 = inversesqrt(_x0270.x);
    _TMP50 = inversesqrt(_x0270.y);
    _TMP51 = inversesqrt(_x0270.z);
    _TMP52 = inversesqrt(_x0270.w);
    _TMP269 = vec4(_TMP49, _TMP50, _TMP51, _TMP52);
    _a0282 = _weights0258*_TMP269;
    _TMP37 = pow(_a0282.x, _wid0258.x);
    _TMP38 = pow(_a0282.y, _wid0258.y);
    _TMP39 = pow(_a0282.z, _wid0258.z);
    _TMP40 = pow(_a0282.w, _wid0258.w);
    _TMP44 = vec4(_TMP37, _TMP38, _TMP39, _TMP40);
    _x0292 = -_TMP44;
    _TMP37 = pow(2.71828198E+00, _x0292.x);
    _TMP38 = pow(2.71828198E+00, _x0292.y);
    _TMP39 = pow(2.71828198E+00, _x0292.z);
    _TMP40 = pow(2.71828198E+00, _x0292.w);
    _TMP291 = vec4(_TMP37, _TMP38, _TMP39, _TMP40);
    _weights2 = (1.39999998E+00*_TMP291)/(6.00000024E-01 + 2.00000003E-01*_wid0258);
    _uv_ratio.y = _TMP65.y + 3.33333343E-01*_filter;
    _TMP37 = pow(_TMP149.x, 4.00000000E+00);
    _TMP38 = pow(_TMP149.y, 4.00000000E+00);
    _TMP39 = pow(_TMP149.z, 4.00000000E+00);
    _TMP40 = pow(_TMP149.w, 4.00000000E+00);
    _TMP42 = vec4(_TMP37, _TMP38, _TMP39, _TMP40);
    _wid0304 = 2.00000000E+00 + 2.00000000E+00*_TMP42;
    _weights0304 = vec4(_uv_ratio.y/4.00000006E-01, _uv_ratio.y/4.00000006E-01, _uv_ratio.y/4.00000006E-01, _uv_ratio.y/4.00000006E-01);
    _x0316 = 5.00000000E-01*_wid0304;
    _TMP49 = inversesqrt(_x0316.x);
    _TMP50 = inversesqrt(_x0316.y);
    _TMP51 = inversesqrt(_x0316.z);
    _TMP52 = inversesqrt(_x0316.w);
    _TMP315 = vec4(_TMP49, _TMP50, _TMP51, _TMP52);
    _a0328 = _weights0304*_TMP315;
    _TMP37 = pow(_a0328.x, _wid0304.x);
    _TMP38 = pow(_a0328.y, _wid0304.y);
    _TMP39 = pow(_a0328.z, _wid0304.z);
    _TMP40 = pow(_a0328.w, _wid0304.w);
    _TMP44 = vec4(_TMP37, _TMP38, _TMP39, _TMP40);
    _x0338 = -_TMP44;
    _TMP37 = pow(2.71828198E+00, _x0338.x);
    _TMP38 = pow(2.71828198E+00, _x0338.y);
    _TMP39 = pow(2.71828198E+00, _x0338.z);
    _TMP40 = pow(2.71828198E+00, _x0338.w);
    _TMP337 = vec4(_TMP37, _TMP38, _TMP39, _TMP40);
    _TMP25 = (1.39999998E+00*_TMP337)/(6.00000024E-01 + 2.00000003E-01*_wid0304);
    _weights1 = (_weights1 + _TMP25)/3.00000000E+00;
    _a0350 = 1.00000000E+00 - _uv_ratio.y;
    _TMP26 = abs(_a0350);
    _TMP37 = pow(_TMP205.x, 4.00000000E+00);
    _TMP38 = pow(_TMP205.y, 4.00000000E+00);
    _TMP39 = pow(_TMP205.z, 4.00000000E+00);
    _TMP40 = pow(_TMP205.w, 4.00000000E+00);
    _TMP42 = vec4(_TMP37, _TMP38, _TMP39, _TMP40);
    _wid0352 = 2.00000000E+00 + 2.00000000E+00*_TMP42;
    _weights0352 = vec4(_TMP26/4.00000006E-01, _TMP26/4.00000006E-01, _TMP26/4.00000006E-01, _TMP26/4.00000006E-01);
    _x0364 = 5.00000000E-01*_wid0352;
    _TMP49 = inversesqrt(_x0364.x);
    _TMP50 = inversesqrt(_x0364.y);
    _TMP51 = inversesqrt(_x0364.z);
    _TMP52 = inversesqrt(_x0364.w);
    _TMP363 = vec4(_TMP49, _TMP50, _TMP51, _TMP52);
    _a0376 = _weights0352*_TMP363;
    _TMP37 = pow(_a0376.x, _wid0352.x);
    _TMP38 = pow(_a0376.y, _wid0352.y);
    _TMP39 = pow(_a0376.z, _wid0352.z);
    _TMP40 = pow(_a0376.w, _wid0352.w);
    _TMP44 = vec4(_TMP37, _TMP38, _TMP39, _TMP40);
    _x0386 = -_TMP44;
    _TMP37 = pow(2.71828198E+00, _x0386.x);
    _TMP38 = pow(2.71828198E+00, _x0386.y);
    _TMP39 = pow(2.71828198E+00, _x0386.z);
    _TMP40 = pow(2.71828198E+00, _x0386.w);
    _TMP385 = vec4(_TMP37, _TMP38, _TMP39, _TMP40);
    _TMP27 = (1.39999998E+00*_TMP385)/(6.00000024E-01 + 2.00000003E-01*_wid0352);
    _weights2 = (_weights2 + _TMP27)/3.00000000E+00;
    _uv_ratio.y = _uv_ratio.y - 6.66666687E-01*_filter;
    _TMP28 = abs(_uv_ratio.y);
    _TMP37 = pow(_TMP149.x, 4.00000000E+00);
    _TMP38 = pow(_TMP149.y, 4.00000000E+00);
    _TMP39 = pow(_TMP149.z, 4.00000000E+00);
    _TMP40 = pow(_TMP149.w, 4.00000000E+00);
    _TMP42 = vec4(_TMP37, _TMP38, _TMP39, _TMP40);
    _wid0400 = 2.00000000E+00 + 2.00000000E+00*_TMP42;
    _weights0400 = vec4(_TMP28/4.00000006E-01, _TMP28/4.00000006E-01, _TMP28/4.00000006E-01, _TMP28/4.00000006E-01);
    _x0412 = 5.00000000E-01*_wid0400;
    _TMP49 = inversesqrt(_x0412.x);
    _TMP50 = inversesqrt(_x0412.y);
    _TMP51 = inversesqrt(_x0412.z);
    _TMP52 = inversesqrt(_x0412.w);
    _TMP411 = vec4(_TMP49, _TMP50, _TMP51, _TMP52);
    _a0424 = _weights0400*_TMP411;
    _TMP37 = pow(_a0424.x, _wid0400.x);
    _TMP38 = pow(_a0424.y, _wid0400.y);
    _TMP39 = pow(_a0424.z, _wid0400.z);
    _TMP40 = pow(_a0424.w, _wid0400.w);
    _TMP44 = vec4(_TMP37, _TMP38, _TMP39, _TMP40);
    _x0434 = -_TMP44;
    _TMP37 = pow(2.71828198E+00, _x0434.x);
    _TMP38 = pow(2.71828198E+00, _x0434.y);
    _TMP39 = pow(2.71828198E+00, _x0434.z);
    _TMP40 = pow(2.71828198E+00, _x0434.w);
    _TMP433 = vec4(_TMP37, _TMP38, _TMP39, _TMP40);
    _TMP29 = (1.39999998E+00*_TMP433)/(6.00000024E-01 + 2.00000003E-01*_wid0400);
    _weights1 = _weights1 + _TMP29/3.00000000E+00;
    _a0446 = 1.00000000E+00 - _uv_ratio.y;
    _TMP30 = abs(_a0446);
    _TMP37 = pow(_TMP205.x, 4.00000000E+00);
    _TMP38 = pow(_TMP205.y, 4.00000000E+00);
    _TMP39 = pow(_TMP205.z, 4.00000000E+00);
    _TMP40 = pow(_TMP205.w, 4.00000000E+00);
    _TMP42 = vec4(_TMP37, _TMP38, _TMP39, _TMP40);
    _wid0448 = 2.00000000E+00 + 2.00000000E+00*_TMP42;
    _weights0448 = vec4(_TMP30/4.00000006E-01, _TMP30/4.00000006E-01, _TMP30/4.00000006E-01, _TMP30/4.00000006E-01);
    _x0460 = 5.00000000E-01*_wid0448;
    _TMP49 = inversesqrt(_x0460.x);
    _TMP50 = inversesqrt(_x0460.y);
    _TMP51 = inversesqrt(_x0460.z);
    _TMP52 = inversesqrt(_x0460.w);
    _TMP459 = vec4(_TMP49, _TMP50, _TMP51, _TMP52);
    _a0472 = _weights0448*_TMP459;
    _TMP37 = pow(_a0472.x, _wid0448.x);
    _TMP38 = pow(_a0472.y, _wid0448.y);
    _TMP39 = pow(_a0472.z, _wid0448.z);
    _TMP40 = pow(_a0472.w, _wid0448.w);
    _TMP44 = vec4(_TMP37, _TMP38, _TMP39, _TMP40);
    _x0482 = -_TMP44;
    _TMP37 = pow(2.71828198E+00, _x0482.x);
    _TMP38 = pow(2.71828198E+00, _x0482.y);
    _TMP39 = pow(2.71828198E+00, _x0482.z);
    _TMP40 = pow(2.71828198E+00, _x0482.w);
    _TMP481 = vec4(_TMP37, _TMP38, _TMP39, _TMP40);
    _TMP31 = (1.39999998E+00*_TMP481)/(6.00000024E-01 + 2.00000003E-01*_wid0448);
    _weights2 = _weights2 + _TMP31/3.00000000E+00;
    _mul_res = (_TMP149*_weights1 + _TMP205*_weights2).xyz;
    _TMP46 = pow(_mul_res.x, 4.54545438E-01);
    _TMP47 = pow(_mul_res.y, 4.54545438E-01);
    _TMP48 = pow(_mul_res.z, 4.54545438E-01);
    _mul_res = vec3(_TMP46, _TMP47, _TMP48);
    _ret_0 = vec4(_mul_res.x, _mul_res.y, _mul_res.z, 1.00000000E+00);
    FragColor = _ret_0;
    return;
} 
#endif
