// GLSL shader autogenerated by cg2glsl.py.
#if defined(VERTEX)

#if __VERSION__ >= 130
#define COMPAT_VARYING out
#define COMPAT_ATTRIBUTE in
#define COMPAT_TEXTURE texture
#else
#define COMPAT_VARYING varying 
#define COMPAT_ATTRIBUTE attribute 
#define COMPAT_TEXTURE texture2D
#endif

#ifdef GL_ES
#define COMPAT_PRECISION mediump
#else
#define COMPAT_PRECISION
#endif
COMPAT_VARYING     vec2 VARorg;
COMPAT_VARYING     vec2 VARtex;
COMPAT_VARYING     vec2 _tex_coord;
struct previous {
float _placeholder23;
    vec2 _tex_coord;
};
struct input_dummy {
    vec2 _video_size;
    vec2 _texture_size;
    vec2 _output_dummy_size;
float _placeholder31;
};
struct tex_coords {
    vec2 VARtex;
    vec2 VARorg;
};
vec4 _oPosition1;
tex_coords _coords1;
previous _ORIG1;
vec4 _r0007;
COMPAT_ATTRIBUTE vec4 TexCoord;
COMPAT_ATTRIBUTE vec4 VertexCoord;
 
uniform mat4 MVPMatrix;
uniform int FrameDirection;
uniform int FrameCount;
uniform COMPAT_PRECISION vec2 OutputSize;
uniform COMPAT_PRECISION vec2 TextureSize;
uniform COMPAT_PRECISION vec2 InputSize;
COMPAT_ATTRIBUTE vec2 OrigTexCoord;
void main()
{
    _r0007 = VertexCoord.x*MVPMatrix[0];
    _r0007 = _r0007 + VertexCoord.y*MVPMatrix[1];
    _r0007 = _r0007 + VertexCoord.z*MVPMatrix[2];
    _r0007 = _r0007 + VertexCoord.w*MVPMatrix[3];
    _oPosition1 = _r0007;
    VARtex = TexCoord.xy;
    VARorg = OrigTexCoord;
    gl_Position = _r0007;
} 
#elif defined(FRAGMENT)

#if __VERSION__ >= 130
#define COMPAT_VARYING in
#define COMPAT_TEXTURE texture
out vec4 FragColor;
#else
#define COMPAT_VARYING varying
#define FragColor gl_FragColor
#define COMPAT_TEXTURE texture2D
#endif

#ifdef GL_ES
#ifdef GL_FRAGMENT_PRECISION_HIGH
precision highp float;
#else
precision mediump float;
#endif
#define COMPAT_PRECISION mediump
#else
#define COMPAT_PRECISION
#endif
COMPAT_VARYING     vec2 _org;
COMPAT_VARYING     vec2 _tex;
COMPAT_VARYING     vec2 _tex_coord;
struct previous {
float _placeholder23;
    vec2 _tex_coord;
};
struct input_dummy {
    vec2 _video_size;
    vec2 _texture_size;
    vec2 _output_dummy_size;
float _placeholder31;
};
struct tex_coords {
    vec2 _tex;
    vec2 _org;
};
vec3 _TMP35;
float _TMP44;
float _TMP43;
float _TMP42;
float _TMP41;
float _TMP40;
float _TMP39;
float _TMP38;
vec4 _TMP18;
vec4 _TMP17;
vec4 _TMP16;
vec4 _TMP15;
vec4 _TMP14;
vec4 _TMP13;
vec4 _TMP12;
vec4 _TMP11;
vec4 _TMP10;
vec4 _TMP9;
vec2 _TMP37;
vec2 _TMP36;
vec4 _TMP6;
vec4 _TMP5;
vec4 _TMP4;
vec4 _TMP3;
vec4 _TMP2;
vec4 _TMP1;
vec4 _TMP0;
input_dummy _IN1;
previous _ORIG1;
vec2 _c0052;
vec2 _c0054;
vec2 _c0056;
vec2 _c0058;
vec2 _c0060;
vec2 _c0062;
vec2 _TMP63;
vec2 _TMP71;
vec2 _TMP75;
vec2 _c0080;
vec2 _c0082;
vec2 _c0084;
vec2 _c0086;
vec2 _c0088;
vec2 _c0090;
vec2 _c0092;
vec2 _c0094;
vec2 _c0096;
vec2 _c0098;
bool _TMP99;
bvec3 _a0102;
bool _TMP103;
bvec3 _a0106;
bool _TMP107;
bvec3 _a0110;
bool _TMP111;
bvec3 _a0114;
bool _TMP115;
bvec3 _a0118;
bool _TMP119;
bvec3 _a0122;
bool _TMP123;
bvec3 _a0126;
bool _TMP127;
bvec3 _a0130;
float _TMP131;
float _TMP135;
float _TMP139;
float _TMP143;
float _TMP147;
float _TMP151;
float _TMP155;
float _TMP159;
float _TMP163;
float _TMP167;
float _TMP171;
float _TMP175;
float _TMP179;
float _TMP183;
float _TMP187;
float _TMP191;
float _TMP195;
COMPAT_VARYING vec4 TEX0;
 
uniform sampler2D Texture;
uniform sampler2D OrigTexture;
uniform int FrameDirection;
uniform int FrameCount;
uniform COMPAT_PRECISION vec2 OutputSize;
uniform COMPAT_PRECISION vec2 TextureSize;
uniform COMPAT_PRECISION vec2 InputSize;
void main()
{
    vec2 _t1;
    vec4 _C;
    vec3 _fCB;
    float _eqCL;
    float _eqCR;
    float _eqCU;
    float _eqCD;
    float _eqCUL;
    float _eqCUR;
    float _eqCDL;
    float _eqCDR;
    vec3 _B1;
    vec3 _W;
    float _cntB;
    float _cntW;
    _t1 = vec2(1.00000000E+00/TextureSize.x, 1.00000000E+00/TextureSize.y);
    _C = COMPAT_TEXTURE(Texture, TEX0.xy);
    _TMP0 = COMPAT_TEXTURE(OrigTexture, TEX0.xy);
    _c0052 = TEX0.xy + vec2( -1.00000000E+00, 0.00000000E+00)*_t1;
    _TMP1 = COMPAT_TEXTURE(Texture, _c0052);
    _c0054 = TEX0.xy + vec2( -1.00000000E+00, 0.00000000E+00)*_t1;
    _TMP2 = COMPAT_TEXTURE(OrigTexture, _c0054);
    _c0056 = TEX0.xy + vec2( 1.00000000E+00, 0.00000000E+00)*_t1;
    _TMP3 = COMPAT_TEXTURE(Texture, _c0056);
    _c0058 = TEX0.xy + vec2( 1.00000000E+00, 0.00000000E+00)*_t1;
    _TMP4 = COMPAT_TEXTURE(OrigTexture, _c0058);
    _c0060 = TEX0.xy + vec2( 0.00000000E+00, -1.00000000E+00)*_t1;
    _TMP5 = COMPAT_TEXTURE(Texture, _c0060);
    _c0062 = TEX0.xy + vec2( 0.00000000E+00, 1.00000000E+00)*_t1;
    _TMP6 = COMPAT_TEXTURE(Texture, _c0062);
    _TMP36 = max(_TMP5.xy, _TMP6.xy);
    _TMP37 = max(_TMP3.xy, _TMP36);
    _TMP63 = max(_TMP1.xy, _TMP37);
    _TMP71 = min(_C.zw, _TMP63);
    _TMP75 = max(_C.xy, _TMP71);
    _c0080 = TEX0.xy + vec2( 0.00000000E+00, -1.00000000E+00)*_t1;
    _TMP9 = COMPAT_TEXTURE(OrigTexture, _c0080);
    _c0082 = TEX0.xy + vec2( 0.00000000E+00, 1.00000000E+00)*_t1;
    _TMP10 = COMPAT_TEXTURE(OrigTexture, _c0082);
    _c0084 = TEX0.xy + -_t1;
    _TMP11 = COMPAT_TEXTURE(Texture, _c0084);
    _c0086 = TEX0.xy + -_t1;
    _TMP12 = COMPAT_TEXTURE(OrigTexture, _c0086);
    _c0088 = TEX0.xy + vec2( 1.00000000E+00, -1.00000000E+00)*_t1;
    _TMP13 = COMPAT_TEXTURE(Texture, _c0088);
    _c0090 = TEX0.xy + vec2( 1.00000000E+00, -1.00000000E+00)*_t1;
    _TMP14 = COMPAT_TEXTURE(OrigTexture, _c0090);
    _c0092 = TEX0.xy + vec2( -1.00000000E+00, 1.00000000E+00)*_t1;
    _TMP15 = COMPAT_TEXTURE(Texture, _c0092);
    _c0094 = TEX0.xy + vec2( -1.00000000E+00, 1.00000000E+00)*_t1;
    _TMP16 = COMPAT_TEXTURE(OrigTexture, _c0094);
    _c0096 = TEX0.xy + _t1;
    _TMP17 = COMPAT_TEXTURE(Texture, _c0096);
    _c0098 = TEX0.xy + _t1;
    _TMP18 = COMPAT_TEXTURE(OrigTexture, _c0098);
    _a0102 = bvec3(_TMP0.x == _TMP2.x, _TMP0.y == _TMP2.y, _TMP0.z == _TMP2.z);
    _TMP99 = _a0102.x && _a0102.y && _a0102.z;
    _eqCL = float(_TMP99);
    _a0106 = bvec3(_TMP0.x == _TMP4.x, _TMP0.y == _TMP4.y, _TMP0.z == _TMP4.z);
    _TMP103 = _a0106.x && _a0106.y && _a0106.z;
    _eqCR = float(_TMP103);
    _a0110 = bvec3(_TMP0.x == _TMP9.x, _TMP0.y == _TMP9.y, _TMP0.z == _TMP9.z);
    _TMP107 = _a0110.x && _a0110.y && _a0110.z;
    _eqCU = float(_TMP107);
    _a0114 = bvec3(_TMP0.x == _TMP10.x, _TMP0.y == _TMP10.y, _TMP0.z == _TMP10.z);
    _TMP111 = _a0114.x && _a0114.y && _a0114.z;
    _eqCD = float(_TMP111);
    _a0118 = bvec3(_TMP0.x == _TMP12.x, _TMP0.y == _TMP12.y, _TMP0.z == _TMP12.z);
    _TMP115 = _a0118.x && _a0118.y && _a0118.z;
    _eqCUL = float(_TMP115);
    _a0122 = bvec3(_TMP0.x == _TMP14.x, _TMP0.y == _TMP14.y, _TMP0.z == _TMP14.z);
    _TMP119 = _a0122.x && _a0122.y && _a0122.z;
    _eqCUR = float(_TMP119);
    _a0126 = bvec3(_TMP0.x == _TMP16.x, _TMP0.y == _TMP16.y, _TMP0.z == _TMP16.z);
    _TMP123 = _a0126.x && _a0126.y && _a0126.z;
    _eqCDL = float(_TMP123);
    _a0130 = bvec3(_TMP0.x == _TMP18.x, _TMP0.y == _TMP18.y, _TMP0.z == _TMP18.z);
    _TMP127 = _a0130.x && _a0130.y && _a0130.z;
    _eqCDR = float(_TMP127);
    _TMP131 = max(_TMP11.y, _eqCUL);
    _TMP135 = max(_TMP13.y, _eqCUR);
    _TMP139 = max(_TMP15.y, _eqCDL);
    _TMP143 = max(_TMP17.y, _eqCDR);
    _TMP147 = max(_TMP5.y, _eqCU);
    _TMP151 = max(_TMP6.y, _eqCD);
    _TMP155 = max(_TMP1.y, _eqCL);
    _TMP159 = max(_TMP3.y, _eqCR);
    _B1 = _TMP131*_TMP12.xyz + _TMP135*_TMP14.xyz + _TMP139*_TMP16.xyz + _TMP143*_TMP18.xyz;
    _W = _TMP147*_TMP9.xyz + _TMP151*_TMP10.xyz + _TMP155*_TMP2.xyz + _TMP159*_TMP4.xyz;
    _cntB = _TMP131 + _TMP135 + _TMP139 + _TMP143;
    _cntW = _TMP147 + _TMP151 + _TMP155 + _TMP159;
    _fCB = (4.00000000E+00*_TMP0.xyz + _B1 + 2.00000000E+00*_W)/(4.00000000E+00 + _cntB + 2.00000000E+00*_cntW);
    _TMP163 = min(_TMP1.y, _eqCL);
    _TMP167 = min(_TMP3.y, _eqCR);
    _TMP171 = min(_TMP5.y, _eqCU);
    _TMP175 = min(_TMP6.y, _eqCD);
    _TMP179 = min(_TMP11.y, _eqCUL);
    _TMP183 = min(_TMP13.y, _eqCUR);
    _TMP187 = min(_TMP15.y, _eqCDL);
    _TMP191 = min(_TMP17.y, _eqCDR);
    _TMP38 = max(_TMP187, _TMP191);
    _TMP39 = max(_TMP183, _TMP38);
    _TMP40 = max(_TMP179, _TMP39);
    _TMP41 = max(_TMP175, _TMP40);
    _TMP42 = max(_TMP171, _TMP41);
    _TMP43 = max(_TMP167, _TMP42);
    _TMP44 = max(_TMP163, _TMP43);
    _TMP195 = max(_TMP75.y, _TMP44);
    if (_TMP195 >= 0.00000000E+00) { 
        _TMP35 = _TMP0.xyz + _TMP195*(_fCB - _TMP0.xyz);
    } else {
        _TMP35 = _TMP0.xyz;
    } 
    FragColor.xyz = _TMP35;
    return;
} 
#endif
