// GLSL shader autogenerated by cg2glsl.py.
#if defined(VERTEX)

#if __VERSION__ >= 130
#define COMPAT_VARYING out
#define COMPAT_ATTRIBUTE in
#define COMPAT_TEXTURE texture
#else
#define COMPAT_VARYING varying 
#define COMPAT_ATTRIBUTE attribute 
#define COMPAT_TEXTURE texture2D
#endif

#ifdef GL_ES
#define COMPAT_PRECISION mediump
#else
#define COMPAT_PRECISION
#endif
COMPAT_VARYING     vec2 VARorg;
COMPAT_VARYING     vec2 VARtex;
COMPAT_VARYING     vec2 _tex_coord;
struct previous {
float _placeholder23;
    vec2 _tex_coord;
};
struct input_dummy {
    vec2 _video_size;
    vec2 _texture_size;
    vec2 _output_dummy_size;
float _placeholder31;
};
struct tex_coords {
    vec2 VARtex;
    vec2 VARorg;
};
vec4 _oPosition1;
tex_coords _coords1;
previous _ORIG1;
vec4 _r0007;
COMPAT_ATTRIBUTE vec4 TexCoord;
COMPAT_ATTRIBUTE vec4 VertexCoord;
 
uniform mat4 MVPMatrix;
uniform int FrameDirection;
uniform int FrameCount;
uniform COMPAT_PRECISION vec2 OutputSize;
uniform COMPAT_PRECISION vec2 TextureSize;
uniform COMPAT_PRECISION vec2 InputSize;
COMPAT_ATTRIBUTE vec2 OrigTexCoord;
void main()
{
    _r0007 = VertexCoord.x*MVPMatrix[0];
    _r0007 = _r0007 + VertexCoord.y*MVPMatrix[1];
    _r0007 = _r0007 + VertexCoord.z*MVPMatrix[2];
    _r0007 = _r0007 + VertexCoord.w*MVPMatrix[3];
    _oPosition1 = _r0007;
    VARtex = TexCoord.xy;
    VARorg = OrigTexCoord;
    gl_Position = _r0007;
} 
#elif defined(FRAGMENT)

#if __VERSION__ >= 130
#define COMPAT_VARYING in
#define COMPAT_TEXTURE texture
out vec4 FragColor;
#else
#define COMPAT_VARYING varying
#define FragColor gl_FragColor
#define COMPAT_TEXTURE texture2D
#endif

#ifdef GL_ES
#ifdef GL_FRAGMENT_PRECISION_HIGH
precision highp float;
#else
precision mediump float;
#endif
#define COMPAT_PRECISION mediump
#else
#define COMPAT_PRECISION
#endif
COMPAT_VARYING     vec2 _org;
COMPAT_VARYING     vec2 _tex;
COMPAT_VARYING     vec2 _tex_coord;
struct previous {
float _placeholder23;
    vec2 _tex_coord;
};
struct input_dummy {
    vec2 _video_size;
    vec2 _texture_size;
    vec2 _output_dummy_size;
float _placeholder31;
};
struct tex_coords {
    vec2 _tex;
    vec2 _org;
};
float _TMP43;
float _TMP42;
float _TMP41;
float _TMP40;
float _TMP39;
float _TMP38;
float _TMP37;
vec2 _TMP36;
vec2 _TMP35;
vec4 _TMP16;
vec4 _TMP15;
vec4 _TMP14;
vec4 _TMP13;
vec4 _TMP12;
vec4 _TMP11;
vec4 _TMP10;
vec4 _TMP9;
vec4 _TMP8;
vec4 _TMP7;
vec4 _TMP6;
vec4 _TMP5;
vec4 _TMP4;
vec4 _TMP3;
vec4 _TMP2;
vec4 _TMP1;
vec4 _TMP0;
input_dummy _IN1;
previous _ORIG1;
vec2 _c0051;
vec2 _c0053;
vec2 _c0055;
vec2 _c0057;
vec2 _c0059;
vec2 _c0061;
vec2 _c0063;
vec2 _c0065;
vec2 _c0067;
vec2 _c0069;
vec2 _c0071;
vec2 _c0073;
vec2 _c0075;
vec2 _c0077;
vec2 _c0079;
vec2 _c0081;
vec2 _TMP82;
vec2 _TMP90;
vec2 _TMP94;
bool _TMP98;
bvec3 _a0101;
float _TMP102;
float _b0103;
bool _TMP106;
bvec3 _a0109;
float _TMP110;
float _b0111;
bool _TMP114;
bvec3 _a0117;
float _TMP118;
float _b0119;
bool _TMP122;
bvec3 _a0125;
float _TMP126;
float _b0127;
bool _TMP130;
bvec3 _a0133;
float _TMP134;
float _b0135;
bool _TMP138;
bvec3 _a0141;
float _TMP142;
float _b0143;
bool _TMP146;
bvec3 _a0149;
float _TMP150;
float _b0151;
bool _TMP154;
bvec3 _a0157;
float _TMP158;
float _b0159;
float _TMP162;
COMPAT_VARYING vec4 TEX0;
 
uniform sampler2D Texture;
uniform sampler2D OrigTexture;
uniform int FrameDirection;
uniform int FrameCount;
uniform COMPAT_PRECISION vec2 OutputSize;
uniform COMPAT_PRECISION vec2 TextureSize;
uniform COMPAT_PRECISION vec2 InputSize;
void main()
{
    vec2 _t1;
    vec4 _C;
    _t1 = vec2(1.00000000E+00/TextureSize.x, 1.00000000E+00/TextureSize.y);
    _C = COMPAT_TEXTURE(Texture, TEX0.xy);
    _TMP0 = COMPAT_TEXTURE(OrigTexture, TEX0.xy);
    _c0051 = TEX0.xy + vec2( -1.00000000E+00, 0.00000000E+00)*_t1;
    _TMP1 = COMPAT_TEXTURE(Texture, _c0051);
    _c0053 = TEX0.xy + vec2( -1.00000000E+00, 0.00000000E+00)*_t1;
    _TMP2 = COMPAT_TEXTURE(OrigTexture, _c0053);
    _c0055 = TEX0.xy + vec2( 1.00000000E+00, 0.00000000E+00)*_t1;
    _TMP3 = COMPAT_TEXTURE(Texture, _c0055);
    _c0057 = TEX0.xy + vec2( 1.00000000E+00, 0.00000000E+00)*_t1;
    _TMP4 = COMPAT_TEXTURE(OrigTexture, _c0057);
    _c0059 = TEX0.xy + vec2( 0.00000000E+00, -1.00000000E+00)*_t1;
    _TMP5 = COMPAT_TEXTURE(Texture, _c0059);
    _c0061 = TEX0.xy + vec2( 0.00000000E+00, -1.00000000E+00)*_t1;
    _TMP6 = COMPAT_TEXTURE(OrigTexture, _c0061);
    _c0063 = TEX0.xy + vec2( 0.00000000E+00, 1.00000000E+00)*_t1;
    _TMP7 = COMPAT_TEXTURE(Texture, _c0063);
    _c0065 = TEX0.xy + vec2( 0.00000000E+00, 1.00000000E+00)*_t1;
    _TMP8 = COMPAT_TEXTURE(OrigTexture, _c0065);
    _c0067 = TEX0.xy + -_t1;
    _TMP9 = COMPAT_TEXTURE(Texture, _c0067);
    _c0069 = TEX0.xy + -_t1;
    _TMP10 = COMPAT_TEXTURE(OrigTexture, _c0069);
    _c0071 = TEX0.xy + vec2( 1.00000000E+00, -1.00000000E+00)*_t1;
    _TMP11 = COMPAT_TEXTURE(Texture, _c0071);
    _c0073 = TEX0.xy + vec2( 1.00000000E+00, -1.00000000E+00)*_t1;
    _TMP12 = COMPAT_TEXTURE(OrigTexture, _c0073);
    _c0075 = TEX0.xy + vec2( -1.00000000E+00, 1.00000000E+00)*_t1;
    _TMP13 = COMPAT_TEXTURE(Texture, _c0075);
    _c0077 = TEX0.xy + vec2( -1.00000000E+00, 1.00000000E+00)*_t1;
    _TMP14 = COMPAT_TEXTURE(OrigTexture, _c0077);
    _c0079 = TEX0.xy + _t1;
    _TMP15 = COMPAT_TEXTURE(Texture, _c0079);
    _c0081 = TEX0.xy + _t1;
    _TMP16 = COMPAT_TEXTURE(OrigTexture, _c0081);
    _TMP35 = max(_TMP5.xy, _TMP7.xy);
    _TMP36 = max(_TMP3.xy, _TMP35);
    _TMP82 = max(_TMP1.xy, _TMP36);
    _TMP90 = min(_C.zw, _TMP82);
    _TMP94 = max(_C.xy, _TMP90);
    _C.xy = _TMP94;
    _a0101 = bvec3(_TMP0.x == _TMP6.x, _TMP0.y == _TMP6.y, _TMP0.z == _TMP6.z);
    _TMP98 = _a0101.x && _a0101.y && _a0101.z;
    _b0103 = float(_TMP98);
    _TMP102 = min(_TMP5.y, _b0103);
    _a0109 = bvec3(_TMP0.x == _TMP8.x, _TMP0.y == _TMP8.y, _TMP0.z == _TMP8.z);
    _TMP106 = _a0109.x && _a0109.y && _a0109.z;
    _b0111 = float(_TMP106);
    _TMP110 = min(_TMP7.y, _b0111);
    _a0117 = bvec3(_TMP0.x == _TMP2.x, _TMP0.y == _TMP2.y, _TMP0.z == _TMP2.z);
    _TMP114 = _a0117.x && _a0117.y && _a0117.z;
    _b0119 = float(_TMP114);
    _TMP118 = min(_TMP1.y, _b0119);
    _a0125 = bvec3(_TMP0.x == _TMP4.x, _TMP0.y == _TMP4.y, _TMP0.z == _TMP4.z);
    _TMP122 = _a0125.x && _a0125.y && _a0125.z;
    _b0127 = float(_TMP122);
    _TMP126 = min(_TMP3.y, _b0127);
    _a0133 = bvec3(_TMP0.x == _TMP10.x, _TMP0.y == _TMP10.y, _TMP0.z == _TMP10.z);
    _TMP130 = _a0133.x && _a0133.y && _a0133.z;
    _b0135 = float(_TMP130);
    _TMP134 = min(_TMP9.y, _b0135);
    _a0141 = bvec3(_TMP0.x == _TMP12.x, _TMP0.y == _TMP12.y, _TMP0.z == _TMP12.z);
    _TMP138 = _a0141.x && _a0141.y && _a0141.z;
    _b0143 = float(_TMP138);
    _TMP142 = min(_TMP11.y, _b0143);
    _a0149 = bvec3(_TMP0.x == _TMP14.x, _TMP0.y == _TMP14.y, _TMP0.z == _TMP14.z);
    _TMP146 = _a0149.x && _a0149.y && _a0149.z;
    _b0151 = float(_TMP146);
    _TMP150 = min(_TMP13.y, _b0151);
    _a0157 = bvec3(_TMP0.x == _TMP16.x, _TMP0.y == _TMP16.y, _TMP0.z == _TMP16.z);
    _TMP154 = _a0157.x && _a0157.y && _a0157.z;
    _b0159 = float(_TMP154);
    _TMP158 = min(_TMP15.y, _b0159);
    _TMP37 = max(_TMP150, _TMP158);
    _TMP38 = max(_TMP142, _TMP37);
    _TMP39 = max(_TMP134, _TMP38);
    _TMP40 = max(_TMP126, _TMP39);
    _TMP41 = max(_TMP118, _TMP40);
    _TMP42 = max(_TMP110, _TMP41);
    _TMP43 = max(_TMP102, _TMP42);
    _TMP162 = max(_TMP94.y, _TMP43);
    _C.y = _TMP162;
    FragColor = _C;
    return;
} 
#endif
