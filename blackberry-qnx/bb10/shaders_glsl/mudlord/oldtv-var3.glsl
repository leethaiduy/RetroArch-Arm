// GLSL shader autogenerated by cg2glsl.py.
#if defined(VERTEX)

#if __VERSION__ >= 130
#define COMPAT_VARYING out
#define COMPAT_ATTRIBUTE in
#define COMPAT_TEXTURE texture
#else
#define COMPAT_VARYING varying 
#define COMPAT_ATTRIBUTE attribute 
#define COMPAT_TEXTURE texture2D
#endif

#ifdef GL_ES
#define COMPAT_PRECISION mediump
#else
#define COMPAT_PRECISION
#endif
COMPAT_VARYING     vec4 _color;
COMPAT_VARYING     vec2 _texCoord1;
COMPAT_VARYING     vec4 VARvpos;
COMPAT_VARYING     vec4 _position1;
COMPAT_VARYING     float _frame_rotation;
struct input_dummy {
    vec2 _video_size;
    vec2 _texture_size;
    vec2 _output_dummy_size;
    float _frame_count;
    float _frame_direction;
    float _frame_rotation;
};
struct VERTEX_OUTPUT {
    vec4 _position1;
    vec4 VARvpos;
    vec2 _texCoord1;
};
struct output_dummy {
    vec4 _color;
};
VERTEX_OUTPUT _ret_0;
vec4 _r0007;
COMPAT_ATTRIBUTE vec4 VertexCoord;
COMPAT_ATTRIBUTE vec4 TexCoord;
COMPAT_VARYING vec4 TEX0;
 
uniform mat4 MVPMatrix;
uniform int FrameDirection;
uniform int FrameCount;
uniform COMPAT_PRECISION vec2 OutputSize;
uniform COMPAT_PRECISION vec2 TextureSize;
uniform COMPAT_PRECISION vec2 InputSize;
void main()
{
    _r0007 = VertexCoord.x*MVPMatrix[0];
    _r0007 = _r0007 + VertexCoord.y*MVPMatrix[1];
    _r0007 = _r0007 + VertexCoord.z*MVPMatrix[2];
    _r0007 = _r0007 + VertexCoord.w*MVPMatrix[3];
    _ret_0._position1 = _r0007;
    VARvpos = _r0007;
    _ret_0._texCoord1 = TexCoord.xy;
    gl_Position = _r0007;
    TEX0.xy = TexCoord.xy;
    return;
    TEX0.xy = _ret_0._texCoord1;
} 
#elif defined(FRAGMENT)

#if __VERSION__ >= 130
#define COMPAT_VARYING in
#define COMPAT_TEXTURE texture
out vec4 FragColor;
#else
#define COMPAT_VARYING varying
#define FragColor gl_FragColor
#define COMPAT_TEXTURE texture2D
#endif

#ifdef GL_ES
#ifdef GL_FRAGMENT_PRECISION_HIGH
precision highp float;
#else
precision mediump float;
#endif
#define COMPAT_PRECISION mediump
#else
#define COMPAT_PRECISION
#endif
COMPAT_VARYING     vec4 _color;
COMPAT_VARYING     vec2 _texCoord;
COMPAT_VARYING     vec4 VARvpos;
COMPAT_VARYING     float _frame_rotation;
struct input_dummy {
    vec2 _video_size;
    vec2 _texture_size;
    vec2 _output_dummy_size;
    float _frame_count;
    float _frame_direction;
    float _frame_rotation;
};
struct VERTEX_OUTPUT {
    vec4 VARvpos;
    vec2 _texCoord;
};
struct output_dummy {
    vec4 _color;
};
vec4 _TMP4;
vec4 _TMP3;
vec4 _TMP2;
float _TMP0;
float _TMP1;
VERTEX_OUTPUT _TMP5;
VERTEX_OUTPUT _VAR1;
uniform sampler2D Texture;
float _TMP12;
float _x0013;
vec2 _c0025;
vec2 _c0029;
COMPAT_VARYING vec4 TEX0;
 
uniform int FrameDirection;
uniform int FrameCount;
uniform COMPAT_PRECISION vec2 OutputSize;
uniform COMPAT_PRECISION vec2 TextureSize;
uniform COMPAT_PRECISION vec2 InputSize;
void main()
{
    output_dummy _OUT;
    float _f;
    vec4 _distortion1;
    _TMP5.VARvpos = VARvpos/VARvpos.w;
    _f = (1.00000000E+00 - _TMP5.VARvpos.x*_TMP5.VARvpos.x)*(1.00000000E+00 - _TMP5.VARvpos.y*_TMP5.VARvpos.y);
    _TMP0 = pow(_f, 4.39999998E-01);
    _x0013 = 8.80000019E+00*(_TMP0 - 1.00000001E-01);
    _TMP1 = min(1.00000000E+00, _x0013);
    _TMP12 = max(0.00000000E+00, _TMP1);
    _c0025 = TEX0.xy + 1.95312500E-03;
    _TMP2 = COMPAT_TEXTURE(Texture, _c0025);
    _TMP3 = COMPAT_TEXTURE(Texture, TEX0.xy);
    _c0029 = TEX0.xy - 1.95312500E-03;
    _TMP4 = COMPAT_TEXTURE(Texture, _c0029);
    _distortion1 = vec4(_TMP2.x, _TMP3.y, _TMP4.z, 1.00000000E+00);
    _OUT._color = _TMP12*_distortion1;
    FragColor = _OUT._color;
    return;
} 
#endif
