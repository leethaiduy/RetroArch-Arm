// GLSL shader autogenerated by cg2glsl.py.
#if defined(VERTEX)

#if __VERSION__ >= 130
#define COMPAT_VARYING out
#define COMPAT_ATTRIBUTE in
#define COMPAT_TEXTURE texture
#else
#define COMPAT_VARYING varying 
#define COMPAT_ATTRIBUTE attribute 
#define COMPAT_TEXTURE texture2D
#endif

#ifdef GL_ES
#define COMPAT_PRECISION mediump
#else
#define COMPAT_PRECISION
#endif
COMPAT_VARYING     vec4 _col;
COMPAT_VARYING     float _frame_rotation;
struct input_dummy {
    vec2 _video_size;
    vec2 _texture_size;
    vec2 _output_dummy_size;
    float _frame_count;
    float _frame_direction;
    float _frame_rotation;
};
struct output_dummy {
    vec4 _col;
};
vec4 _oPosition1;
vec4 _r0006;
COMPAT_ATTRIBUTE vec4 VertexCoord;
COMPAT_ATTRIBUTE vec4 TexCoord;
COMPAT_VARYING vec4 TEX0;
 
uniform mat4 MVPMatrix;
uniform int FrameDirection;
uniform int FrameCount;
uniform COMPAT_PRECISION vec2 OutputSize;
uniform COMPAT_PRECISION vec2 TextureSize;
uniform COMPAT_PRECISION vec2 InputSize;
void main()
{
    vec2 _otexCoord;
    _r0006 = VertexCoord.x*MVPMatrix[0];
    _r0006 = _r0006 + VertexCoord.y*MVPMatrix[1];
    _r0006 = _r0006 + VertexCoord.z*MVPMatrix[2];
    _r0006 = _r0006 + VertexCoord.w*MVPMatrix[3];
    _oPosition1 = _r0006;
    _otexCoord = TexCoord.xy;
    gl_Position = _r0006;
    TEX0.xy = TexCoord.xy;
} 
#elif defined(FRAGMENT)

#if __VERSION__ >= 130
#define COMPAT_VARYING in
#define COMPAT_TEXTURE texture
out vec4 FragColor;
#else
#define COMPAT_VARYING varying
#define FragColor gl_FragColor
#define COMPAT_TEXTURE texture2D
#endif

#ifdef GL_ES
#ifdef GL_FRAGMENT_PRECISION_HIGH
precision highp float;
#else
precision mediump float;
#endif
#define COMPAT_PRECISION mediump
#else
#define COMPAT_PRECISION
#endif
COMPAT_VARYING     vec4 _col;
COMPAT_VARYING     float _frame_rotation;
struct input_dummy {
    vec2 _video_size;
    vec2 _texture_size;
    vec2 _output_dummy_size;
    float _frame_count;
    float _frame_direction;
    float _frame_rotation;
};
struct output_dummy {
    vec4 _col;
};
vec4 _TMP1;
uniform sampler2D Texture;
vec2 _c0008;
COMPAT_VARYING vec4 TEX0;
 
uniform int FrameDirection;
uniform int FrameCount;
uniform COMPAT_PRECISION vec2 OutputSize;
uniform COMPAT_PRECISION vec2 TextureSize;
uniform COMPAT_PRECISION vec2 InputSize;
void main()
{
    vec4 _color;
    output_dummy _OUT;
    _color = COMPAT_TEXTURE(Texture, TEX0.xy);
    _c0008 = TEX0.xy + vec2( -4.89317987E-04, -6.08707487E-04);
    _TMP1 = COMPAT_TEXTURE(Texture, _c0008);
    _color = _color + _TMP1;
    _c0008 = TEX0.xy + vec2( -1.26021600E-03, -1.10369998E-04);
    _TMP1 = COMPAT_TEXTURE(Texture, _c0008);
    _color = _color + _TMP1;
    _c0008 = TEX0.xy + vec2( -1.04387093E-03, 6.85705512E-04);
    _TMP1 = COMPAT_TEXTURE(Texture, _c0008);
    _color = _color + _TMP1;
    _c0008 = TEX0.xy + vec2( -3.05017515E-04, 9.31073970E-04);
    _TMP1 = COMPAT_TEXTURE(Texture, _c0008);
    _color = _color + _TMP1;
    _c0008 = TEX0.xy + vec2( 1.44351006E-03, -2.92474520E-04);
    _TMP1 = COMPAT_TEXTURE(Texture, _c0008);
    _color = _color + _TMP1;
    _c0008 = TEX0.xy + vec2( 7.10150984E-04, -7.20039010E-04);
    _TMP1 = COMPAT_TEXTURE(Texture, _c0008);
    _color = _color + _TMP1;
    _c0008 = TEX0.xy + vec2( 7.79184047E-04, 1.15053297E-03);
    _TMP1 = COMPAT_TEXTURE(Texture, _c0008);
    _color = _color + _TMP1;
    _c0008 = TEX0.xy + vec2( 2.78191495E-04, -1.33968599E-03);
    _TMP1 = COMPAT_TEXTURE(Texture, _c0008);
    _color = _color + _TMP1;
    _c0008 = TEX0.xy + vec2( 7.61146483E-04, 9.66375010E-05);
    _TMP1 = COMPAT_TEXTURE(Texture, _c0008);
    _color = _color + _TMP1;
    _c0008 = TEX0.xy + vec2( 1.34463003E-03, 6.18687016E-04);
    _TMP1 = COMPAT_TEXTURE(Texture, _c0008);
    _color = _color + _TMP1;
    _c0008 = TEX0.xy + vec2( -4.82910022E-04, -1.39892253E-03);
    _TMP1 = COMPAT_TEXTURE(Texture, _c0008);
    _color = _color + _TMP1;
    _c0008 = TEX0.xy + vec2( -1.18733849E-03, -8.96557525E-04);
    _TMP1 = COMPAT_TEXTURE(Texture, _c0008);
    _color = _color + _TMP1;
    _OUT._col = _color/1.30000000E+01;
    FragColor = _OUT._col;
    return;
} 
#endif
