// GLSL shader autogenerated by cg2glsl.py.
#if defined(VERTEX)

#if __VERSION__ >= 130
#define COMPAT_VARYING out
#define COMPAT_ATTRIBUTE in
#define COMPAT_TEXTURE texture
#else
#define COMPAT_VARYING varying 
#define COMPAT_ATTRIBUTE attribute 
#define COMPAT_TEXTURE texture2D
#endif

#ifdef GL_ES
#define COMPAT_PRECISION mediump
#else
#define COMPAT_PRECISION
#endif
COMPAT_VARYING     vec4 _col;
COMPAT_VARYING     float _frame_rotation;
struct input_dummy {
    vec2 _video_size;
    vec2 _texture_size;
    vec2 _output_dummy_size;
    float _frame_count;
    float _frame_direction;
    float _frame_rotation;
};
struct output_dummy {
    vec4 _col;
};
vec4 _oPosition1;
vec4 _r0006;
COMPAT_ATTRIBUTE vec4 VertexCoord;
COMPAT_ATTRIBUTE vec4 TexCoord;
COMPAT_VARYING vec4 TEX0;
 
uniform mat4 MVPMatrix;
uniform int FrameDirection;
uniform int FrameCount;
uniform COMPAT_PRECISION vec2 OutputSize;
uniform COMPAT_PRECISION vec2 TextureSize;
uniform COMPAT_PRECISION vec2 InputSize;
void main()
{
    vec2 _otexCoord;
    _r0006 = VertexCoord.x*MVPMatrix[0];
    _r0006 = _r0006 + VertexCoord.y*MVPMatrix[1];
    _r0006 = _r0006 + VertexCoord.z*MVPMatrix[2];
    _r0006 = _r0006 + VertexCoord.w*MVPMatrix[3];
    _oPosition1 = _r0006;
    _otexCoord = TexCoord.xy;
    gl_Position = _r0006;
    TEX0.xy = TexCoord.xy;
} 
#elif defined(FRAGMENT)

#if __VERSION__ >= 130
#define COMPAT_VARYING in
#define COMPAT_TEXTURE texture
out vec4 FragColor;
#else
#define COMPAT_VARYING varying
#define FragColor gl_FragColor
#define COMPAT_TEXTURE texture2D
#endif

#ifdef GL_ES
#ifdef GL_FRAGMENT_PRECISION_HIGH
precision highp float;
#else
precision mediump float;
#endif
#define COMPAT_PRECISION mediump
#else
#define COMPAT_PRECISION
#endif
COMPAT_VARYING     vec4 _col;
COMPAT_VARYING     float _frame_rotation;
struct input_dummy {
    vec2 _video_size;
    vec2 _texture_size;
    vec2 _output_dummy_size;
    float _frame_count;
    float _frame_direction;
    float _frame_rotation;
};
struct output_dummy {
    vec4 _col;
};
vec4 _TMP1;
uniform sampler2D Texture;
vec2 _c0008;
COMPAT_VARYING vec4 TEX0;
 
uniform int FrameDirection;
uniform int FrameCount;
uniform COMPAT_PRECISION vec2 OutputSize;
uniform COMPAT_PRECISION vec2 TextureSize;
uniform COMPAT_PRECISION vec2 InputSize;
void main()
{
    vec4 _color;
    output_dummy _OUT;
    _color = COMPAT_TEXTURE(Texture, TEX0.xy);
    _c0008 = TEX0.xy + vec2( -3.26212001E-04, -4.05805011E-04);
    _TMP1 = COMPAT_TEXTURE(Texture, _c0008);
    _color = _color + _TMP1;
    _c0008 = TEX0.xy + vec2( -8.40143999E-04, -7.35799986E-05);
    _TMP1 = COMPAT_TEXTURE(Texture, _c0008);
    _color = _color + _TMP1;
    _c0008 = TEX0.xy + vec2( -6.95914030E-04, 4.57137008E-04);
    _TMP1 = COMPAT_TEXTURE(Texture, _c0008);
    _color = _color + _TMP1;
    _c0008 = TEX0.xy + vec2( -2.03345015E-04, 6.20716019E-04);
    _TMP1 = COMPAT_TEXTURE(Texture, _c0008);
    _color = _color + _TMP1;
    _c0008 = TEX0.xy + vec2( 9.62340040E-04, -1.94983018E-04);
    _TMP1 = COMPAT_TEXTURE(Texture, _c0008);
    _color = _color + _TMP1;
    _c0008 = TEX0.xy + vec2( 4.73434018E-04, -4.80026036E-04);
    _TMP1 = COMPAT_TEXTURE(Texture, _c0008);
    _color = _color + _TMP1;
    _c0008 = TEX0.xy + vec2( 5.19456051E-04, 7.67022022E-04);
    _TMP1 = COMPAT_TEXTURE(Texture, _c0008);
    _color = _color + _TMP1;
    _c0008 = TEX0.xy + vec2( 1.85461002E-04, -8.93124030E-04);
    _TMP1 = COMPAT_TEXTURE(Texture, _c0008);
    _color = _color + _TMP1;
    _c0008 = TEX0.xy + vec2( 5.07430988E-04, 6.44250031E-05);
    _TMP1 = COMPAT_TEXTURE(Texture, _c0008);
    _color = _color + _TMP1;
    _c0008 = TEX0.xy + vec2( 8.96420039E-04, 4.12458030E-04);
    _TMP1 = COMPAT_TEXTURE(Texture, _c0008);
    _color = _color + _TMP1;
    _c0008 = TEX0.xy + vec2( -3.21940024E-04, -9.32615018E-04);
    _TMP1 = COMPAT_TEXTURE(Texture, _c0008);
    _color = _color + _TMP1;
    _c0008 = TEX0.xy + vec2( -7.91558996E-04, -5.97705017E-04);
    _TMP1 = COMPAT_TEXTURE(Texture, _c0008);
    _color = _color + _TMP1;
    _OUT._col = _color/1.30000000E+01;
    FragColor = _OUT._col;
    return;
} 
#endif
