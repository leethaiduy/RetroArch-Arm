// GLSL shader autogenerated by cg2glsl.py.
#if defined(VERTEX)

#if __VERSION__ >= 130
#define COMPAT_VARYING out
#define COMPAT_ATTRIBUTE in
#define COMPAT_TEXTURE texture
#else
#define COMPAT_VARYING varying 
#define COMPAT_ATTRIBUTE attribute 
#define COMPAT_TEXTURE texture2D
#endif

#ifdef GL_ES
#define COMPAT_PRECISION mediump
#else
#define COMPAT_PRECISION
#endif
COMPAT_VARYING     vec4 VARt7;
COMPAT_VARYING     vec4 VARt6;
COMPAT_VARYING     vec4 VARt5;
COMPAT_VARYING     vec4 VARt4;
COMPAT_VARYING     vec4 VARt3;
COMPAT_VARYING     vec4 VARt2;
COMPAT_VARYING     vec4 VARt1;
COMPAT_VARYING     vec2 _texCoord2;
COMPAT_VARYING     vec4 _color1;
COMPAT_VARYING     vec4 _position1;
struct input_dummy {
    vec2 _video_size;
    vec2 _texture_size;
    vec2 _output_dummy_size;
};
struct out_vertex {
    vec4 _position1;
    vec4 _color1;
    vec2 _texCoord2;
    vec4 VARt1;
    vec4 VARt2;
    vec4 VARt3;
    vec4 VARt4;
    vec4 VARt5;
    vec4 VARt6;
    vec4 VARt7;
};
out_vertex _ret_0;
input_dummy _IN1;
vec4 _r0010;
COMPAT_ATTRIBUTE vec4 VertexCoord;
COMPAT_ATTRIBUTE vec4 COLOR;
COMPAT_ATTRIBUTE vec4 TexCoord;
COMPAT_VARYING vec4 COL0;
COMPAT_VARYING vec4 TEX0;
 
uniform mat4 MVPMatrix;
uniform int FrameDirection;
uniform int FrameCount;
uniform COMPAT_PRECISION vec2 OutputSize;
uniform COMPAT_PRECISION vec2 TextureSize;
uniform COMPAT_PRECISION vec2 InputSize;
void main()
{
    out_vertex _OUT;
    vec2 _ps;
    vec2 _texCoord;
    _r0010 = VertexCoord.x*MVPMatrix[0];
    _r0010 = _r0010 + VertexCoord.y*MVPMatrix[1];
    _r0010 = _r0010 + VertexCoord.z*MVPMatrix[2];
    _r0010 = _r0010 + VertexCoord.w*MVPMatrix[3];
    _ps = vec2(1.00000000E+00/TextureSize.x, 1.00000000E+00/TextureSize.y);
    _texCoord = TexCoord.xy + vec2( 1.00000001E-07, 1.00000001E-07);
    _OUT.VARt1 = _texCoord.xxxy + vec4(float(float(-_ps.x)), 0.00000000E+00, float(float(_ps.x)), float(float((-2.00000000E+00*_ps.y))));
    _OUT.VARt2 = _texCoord.xxxy + vec4(float(float(-_ps.x)), 0.00000000E+00, float(float(_ps.x)), float(float(-_ps.y)));
    _OUT.VARt3 = _texCoord.xxxy + vec4(float(float(-_ps.x)), 0.00000000E+00, float(float(_ps.x)), 0.00000000E+00);
    _OUT.VARt4 = _texCoord.xxxy + vec4(float(float(-_ps.x)), 0.00000000E+00, float(float(_ps.x)), float(float(_ps.y)));
    _OUT.VARt5 = _texCoord.xxxy + vec4(float(float(-_ps.x)), 0.00000000E+00, float(float(_ps.x)), float(float((2.00000000E+00*_ps.y))));
    _OUT.VARt6 = _texCoord.xyyy + vec4(float(float((-2.00000000E+00*_ps.x))), float(float(-_ps.y)), 0.00000000E+00, float(float(_ps.y)));
    _OUT.VARt7 = _texCoord.xyyy + vec4(float(float((2.00000000E+00*_ps.x))), float(float(-_ps.y)), 0.00000000E+00, float(float(_ps.y)));
    _ret_0._position1 = _r0010;
    _ret_0._color1 = COLOR;
    _ret_0._texCoord2 = _texCoord;
    VARt1 = _OUT.VARt1;
    VARt2 = _OUT.VARt2;
    VARt3 = _OUT.VARt3;
    VARt4 = _OUT.VARt4;
    VARt5 = _OUT.VARt5;
    VARt6 = _OUT.VARt6;
    VARt7 = _OUT.VARt7;
    gl_Position = vec4(float(_r0010.x), float(_r0010.y), float(_r0010.z), float(_r0010.w));
    COL0 = COLOR;
    TEX0.xy = _texCoord;
    return;
    COL0 = _ret_0._color1;
    TEX0.xy = _ret_0._texCoord2;
} 
#elif defined(FRAGMENT)

#if __VERSION__ >= 130
#define COMPAT_VARYING in
#define COMPAT_TEXTURE texture
out vec4 FragColor;
#else
#define COMPAT_VARYING varying
#define FragColor gl_FragColor
#define COMPAT_TEXTURE texture2D
#endif

#ifdef GL_ES
#ifdef GL_FRAGMENT_PRECISION_HIGH
precision highp float;
#else
precision mediump float;
#endif
#define COMPAT_PRECISION mediump
#else
#define COMPAT_PRECISION
#endif
COMPAT_VARYING     vec4 VARt7;
COMPAT_VARYING     vec4 VARt6;
COMPAT_VARYING     vec4 VARt5;
COMPAT_VARYING     vec4 VARt4;
COMPAT_VARYING     vec4 VARt3;
COMPAT_VARYING     vec4 VARt2;
COMPAT_VARYING     vec4 VARt1;
COMPAT_VARYING     vec2 _texCoord;
COMPAT_VARYING     vec4 _color;
struct input_dummy {
    vec2 _video_size;
    vec2 _texture_size;
    vec2 _output_dummy_size;
};
struct out_vertex {
    vec4 _color;
    vec2 _texCoord;
    vec4 VARt1;
    vec4 VARt2;
    vec4 VARt3;
    vec4 VARt4;
    vec4 VARt5;
    vec4 VARt6;
    vec4 VARt7;
};
vec4 _ret_0;
bool _TMP63;
bool _TMP62;
vec3 _TMP70;
vec3 _TMP61;
vec3 _TMP60;
vec3 _TMP59;
vec3 _TMP58;
vec3 _TMP57;
vec3 _TMP56;
vec3 _TMP55;
vec3 _TMP54;
vec3 _TMP53;
vec3 _TMP52;
vec3 _TMP51;
vec3 _TMP50;
vec3 _TMP49;
vec3 _TMP48;
vec3 _TMP47;
vec3 _TMP46;
vec4 _TMP39;
vec4 _TMP38;
bvec4 _TMP37;
bvec4 _TMP36;
bvec4 _TMP35;
bvec4 _TMP34;
bvec4 _TMP33;
bvec4 _TMP32;
bvec4 _TMP31;
bvec4 _TMP30;
bvec4 _TMP29;
bvec4 _TMP28;
bvec4 _TMP27;
float _TMP71;
vec4 _TMP20;
vec4 _TMP19;
vec4 _TMP18;
vec4 _TMP17;
vec4 _TMP16;
vec4 _TMP15;
vec4 _TMP14;
vec4 _TMP13;
vec4 _TMP12;
vec4 _TMP11;
vec4 _TMP10;
vec4 _TMP9;
vec4 _TMP8;
vec4 _TMP7;
vec4 _TMP6;
vec4 _TMP5;
vec4 _TMP4;
vec4 _TMP3;
vec4 _TMP2;
vec4 _TMP1;
vec4 _TMP0;
out_vertex _VAR1;
uniform sampler2D Texture;
input_dummy _IN1;
vec2 _x0085;
vec4 _r0129;
vec4 _r0139;
vec4 _r0149;
vec4 _r0159;
vec4 _r0169;
vec4 _r0179;
vec4 _TMP190;
vec4 _a0193;
vec4 _TMP196;
vec4 _a0199;
vec4 _TMP202;
vec4 _a0205;
vec4 _TMP208;
vec4 _a0211;
vec4 _TMP214;
vec4 _a0217;
vec4 _TMP220;
vec4 _a0223;
vec4 _TMP226;
vec4 _a0229;
vec4 _TMP232;
vec4 _a0235;
vec4 _TMP238;
vec4 _a0241;
vec4 _TMP244;
vec4 _a0247;
vec4 _TMP250;
vec4 _a0253;
vec4 _TMP256;
vec4 _a0259;
vec4 _TMP260;
vec4 _a0263;
vec4 _TMP264;
vec4 _a0267;
vec4 _TMP268;
vec4 _a0271;
vec4 _TMP272;
vec4 _a0275;
vec4 _TMP278;
vec4 _a0281;
vec4 _TMP282;
vec4 _a0285;
vec4 _TMP286;
vec4 _a0289;
vec4 _TMP290;
vec4 _a0293;
vec4 _TMP294;
vec4 _a0297;
vec4 _TMP298;
vec4 _a0301;
vec4 _TMP302;
vec4 _a0305;
vec4 _TMP306;
vec4 _a0309;
vec4 _TMP310;
vec4 _a0313;
vec4 _TMP314;
vec4 _a0317;
vec4 _TMP318;
vec4 _a0321;
vec3 _b0325;
vec3 _b0329;
vec3 _TMP338;
vec3 _a0339;
vec3 _b0347;
vec3 _b0351;
vec3 _TMP360;
vec3 _a0361;
COMPAT_VARYING vec4 TEX0;
 
uniform int FrameDirection;
uniform int FrameCount;
uniform COMPAT_PRECISION vec2 OutputSize;
uniform COMPAT_PRECISION vec2 TextureSize;
uniform COMPAT_PRECISION vec2 InputSize;
void main()
{
    bvec4 _edr;
    bvec4 _edr_left;
    bvec4 _edr_up;
    bvec4 _px;
    bvec4 _interp_restriction_lv1;
    bvec4 _interp_restriction_lv2_left;
    bvec4 _interp_restriction_lv2_up;
    vec2 _fp;
    vec3 _A11;
    vec3 _B11;
    vec3 _C1;
    vec3 _A2;
    vec3 _B2;
    vec3 _C;
    vec3 _D;
    vec3 _E;
    vec3 _F;
    vec3 _G;
    vec3 _H;
    vec3 _I;
    vec3 _G5;
    vec3 _H5;
    vec3 _I5;
    vec3 _A0;
    vec3 _D0;
    vec3 _G0;
    vec3 _C4;
    vec3 _F4;
    vec3 _I4;
    vec4 _b1;
    vec4 _c1;
    vec4 _e1;
    vec4 _i4;
    vec4 _i5;
    vec4 _h5;
    vec3 _res;
    vec3 _n1;
    vec3 _n2;
    vec3 _n3;
    vec3 _n4;
    vec3 _s;
    vec3 _aa;
    vec3 _bb;
    vec3 _cc;
    vec3 _dd;
    bvec3 _sim1;
    bvec3 _sim2;
    vec3 _t;
    vec3 _m;
    vec3 _s1;
    vec3 _s0;
    _x0085 = TEX0.xy*TextureSize;
    _fp = fract(_x0085);
    _TMP0 = COMPAT_TEXTURE(Texture, VARt1.xw);
    _A11 = vec3(float(_TMP0.x), float(_TMP0.y), float(_TMP0.z));
    _TMP1 = COMPAT_TEXTURE(Texture, VARt1.yw);
    _B11 = vec3(float(_TMP1.x), float(_TMP1.y), float(_TMP1.z));
    _TMP2 = COMPAT_TEXTURE(Texture, VARt1.zw);
    _C1 = vec3(float(_TMP2.x), float(_TMP2.y), float(_TMP2.z));
    _TMP3 = COMPAT_TEXTURE(Texture, VARt2.xw);
    _A2 = vec3(float(_TMP3.x), float(_TMP3.y), float(_TMP3.z));
    _TMP4 = COMPAT_TEXTURE(Texture, VARt2.yw);
    _B2 = vec3(float(_TMP4.x), float(_TMP4.y), float(_TMP4.z));
    _TMP5 = COMPAT_TEXTURE(Texture, VARt2.zw);
    _C = vec3(float(_TMP5.x), float(_TMP5.y), float(_TMP5.z));
    _TMP6 = COMPAT_TEXTURE(Texture, VARt3.xw);
    _D = vec3(float(_TMP6.x), float(_TMP6.y), float(_TMP6.z));
    _TMP7 = COMPAT_TEXTURE(Texture, VARt3.yw);
    _E = vec3(float(_TMP7.x), float(_TMP7.y), float(_TMP7.z));
    _TMP8 = COMPAT_TEXTURE(Texture, VARt3.zw);
    _F = vec3(float(_TMP8.x), float(_TMP8.y), float(_TMP8.z));
    _TMP9 = COMPAT_TEXTURE(Texture, VARt4.xw);
    _G = vec3(float(_TMP9.x), float(_TMP9.y), float(_TMP9.z));
    _TMP10 = COMPAT_TEXTURE(Texture, VARt4.yw);
    _H = vec3(float(_TMP10.x), float(_TMP10.y), float(_TMP10.z));
    _TMP11 = COMPAT_TEXTURE(Texture, VARt4.zw);
    _I = vec3(float(_TMP11.x), float(_TMP11.y), float(_TMP11.z));
    _TMP12 = COMPAT_TEXTURE(Texture, VARt5.xw);
    _G5 = vec3(float(_TMP12.x), float(_TMP12.y), float(_TMP12.z));
    _TMP13 = COMPAT_TEXTURE(Texture, VARt5.yw);
    _H5 = vec3(float(_TMP13.x), float(_TMP13.y), float(_TMP13.z));
    _TMP14 = COMPAT_TEXTURE(Texture, VARt5.zw);
    _I5 = vec3(float(_TMP14.x), float(_TMP14.y), float(_TMP14.z));
    _TMP15 = COMPAT_TEXTURE(Texture, VARt6.xy);
    _A0 = vec3(float(_TMP15.x), float(_TMP15.y), float(_TMP15.z));
    _TMP16 = COMPAT_TEXTURE(Texture, VARt6.xz);
    _D0 = vec3(float(_TMP16.x), float(_TMP16.y), float(_TMP16.z));
    _TMP17 = COMPAT_TEXTURE(Texture, VARt6.xw);
    _G0 = vec3(float(_TMP17.x), float(_TMP17.y), float(_TMP17.z));
    _TMP18 = COMPAT_TEXTURE(Texture, VARt7.xy);
    _C4 = vec3(float(_TMP18.x), float(_TMP18.y), float(_TMP18.z));
    _TMP19 = COMPAT_TEXTURE(Texture, VARt7.xz);
    _F4 = vec3(float(_TMP19.x), float(_TMP19.y), float(_TMP19.z));
    _TMP20 = COMPAT_TEXTURE(Texture, VARt7.xw);
    _I4 = vec3(float(_TMP20.x), float(_TMP20.y), float(_TMP20.z));
    _TMP71 = dot(vec3(float(_B2.x), float(_B2.y), float(_B2.z)), vec3( 1.43593750E+01, 2.81718750E+01, 5.47265625E+00));
    _r0129.x = float(_TMP71);
    _TMP71 = dot(vec3(float(_D.x), float(_D.y), float(_D.z)), vec3( 1.43593750E+01, 2.81718750E+01, 5.47265625E+00));
    _r0129.y = float(_TMP71);
    _TMP71 = dot(vec3(float(_H.x), float(_H.y), float(_H.z)), vec3( 1.43593750E+01, 2.81718750E+01, 5.47265625E+00));
    _r0129.z = float(_TMP71);
    _TMP71 = dot(vec3(float(_F.x), float(_F.y), float(_F.z)), vec3( 1.43593750E+01, 2.81718750E+01, 5.47265625E+00));
    _r0129.w = float(_TMP71);
    _b1 = vec4(float(_r0129.x), float(_r0129.y), float(_r0129.z), float(_r0129.w));
    _TMP71 = dot(vec3(float(_C.x), float(_C.y), float(_C.z)), vec3( 1.43593750E+01, 2.81718750E+01, 5.47265625E+00));
    _r0139.x = float(_TMP71);
    _TMP71 = dot(vec3(float(_A2.x), float(_A2.y), float(_A2.z)), vec3( 1.43593750E+01, 2.81718750E+01, 5.47265625E+00));
    _r0139.y = float(_TMP71);
    _TMP71 = dot(vec3(float(_G.x), float(_G.y), float(_G.z)), vec3( 1.43593750E+01, 2.81718750E+01, 5.47265625E+00));
    _r0139.z = float(_TMP71);
    _TMP71 = dot(vec3(float(_I.x), float(_I.y), float(_I.z)), vec3( 1.43593750E+01, 2.81718750E+01, 5.47265625E+00));
    _r0139.w = float(_TMP71);
    _c1 = vec4(float(_r0139.x), float(_r0139.y), float(_r0139.z), float(_r0139.w));
    _TMP71 = dot(vec3(float(_E.x), float(_E.y), float(_E.z)), vec3( 1.43593750E+01, 2.81718750E+01, 5.47265625E+00));
    _r0149.x = float(_TMP71);
    _TMP71 = dot(vec3(float(_E.x), float(_E.y), float(_E.z)), vec3( 1.43593750E+01, 2.81718750E+01, 5.47265625E+00));
    _r0149.y = float(_TMP71);
    _TMP71 = dot(vec3(float(_E.x), float(_E.y), float(_E.z)), vec3( 1.43593750E+01, 2.81718750E+01, 5.47265625E+00));
    _r0149.z = float(_TMP71);
    _TMP71 = dot(vec3(float(_E.x), float(_E.y), float(_E.z)), vec3( 1.43593750E+01, 2.81718750E+01, 5.47265625E+00));
    _r0149.w = float(_TMP71);
    _e1 = vec4(float(_r0149.x), float(_r0149.y), float(_r0149.z), float(_r0149.w));
    _TMP71 = dot(vec3(float(_I4.x), float(_I4.y), float(_I4.z)), vec3( 1.43593750E+01, 2.81718750E+01, 5.47265625E+00));
    _r0159.x = float(_TMP71);
    _TMP71 = dot(vec3(float(_C1.x), float(_C1.y), float(_C1.z)), vec3( 1.43593750E+01, 2.81718750E+01, 5.47265625E+00));
    _r0159.y = float(_TMP71);
    _TMP71 = dot(vec3(float(_A0.x), float(_A0.y), float(_A0.z)), vec3( 1.43593750E+01, 2.81718750E+01, 5.47265625E+00));
    _r0159.z = float(_TMP71);
    _TMP71 = dot(vec3(float(_G5.x), float(_G5.y), float(_G5.z)), vec3( 1.43593750E+01, 2.81718750E+01, 5.47265625E+00));
    _r0159.w = float(_TMP71);
    _i4 = vec4(float(_r0159.x), float(_r0159.y), float(_r0159.z), float(_r0159.w));
    _TMP71 = dot(vec3(float(_I5.x), float(_I5.y), float(_I5.z)), vec3( 1.43593750E+01, 2.81718750E+01, 5.47265625E+00));
    _r0169.x = float(_TMP71);
    _TMP71 = dot(vec3(float(_C4.x), float(_C4.y), float(_C4.z)), vec3( 1.43593750E+01, 2.81718750E+01, 5.47265625E+00));
    _r0169.y = float(_TMP71);
    _TMP71 = dot(vec3(float(_A11.x), float(_A11.y), float(_A11.z)), vec3( 1.43593750E+01, 2.81718750E+01, 5.47265625E+00));
    _r0169.z = float(_TMP71);
    _TMP71 = dot(vec3(float(_G0.x), float(_G0.y), float(_G0.z)), vec3( 1.43593750E+01, 2.81718750E+01, 5.47265625E+00));
    _r0169.w = float(_TMP71);
    _i5 = vec4(float(_r0169.x), float(_r0169.y), float(_r0169.z), float(_r0169.w));
    _TMP71 = dot(vec3(float(_H5.x), float(_H5.y), float(_H5.z)), vec3( 1.43593750E+01, 2.81718750E+01, 5.47265625E+00));
    _r0179.x = float(_TMP71);
    _TMP71 = dot(vec3(float(_F4.x), float(_F4.y), float(_F4.z)), vec3( 1.43593750E+01, 2.81718750E+01, 5.47265625E+00));
    _r0179.y = float(_TMP71);
    _TMP71 = dot(vec3(float(_B11.x), float(_B11.y), float(_B11.z)), vec3( 1.43593750E+01, 2.81718750E+01, 5.47265625E+00));
    _r0179.z = float(_TMP71);
    _TMP71 = dot(vec3(float(_D0.x), float(_D0.y), float(_D0.z)), vec3( 1.43593750E+01, 2.81718750E+01, 5.47265625E+00));
    _r0179.w = float(_TMP71);
    _h5 = vec4(float(_r0179.x), float(_r0179.y), float(_r0179.z), float(_r0179.w));
    _a0193 = _b1.wxyz - _b1;
    _TMP190 = abs(_a0193);
    _TMP27 = bvec4(_TMP190.x < 1.50000000E+01, _TMP190.y < 1.50000000E+01, _TMP190.z < 1.50000000E+01, _TMP190.w < 1.50000000E+01);
    _a0199 = _b1.wxyz - _c1;
    _TMP196 = abs(_a0199);
    _TMP28 = bvec4(_TMP196.x < 1.50000000E+01, _TMP196.y < 1.50000000E+01, _TMP196.z < 1.50000000E+01, _TMP196.w < 1.50000000E+01);
    _a0205 = _b1.zwxy - _b1.yzwx;
    _TMP202 = abs(_a0205);
    _TMP29 = bvec4(_TMP202.x < 1.50000000E+01, _TMP202.y < 1.50000000E+01, _TMP202.z < 1.50000000E+01, _TMP202.w < 1.50000000E+01);
    _a0211 = _b1.zwxy - _c1.zwxy;
    _TMP208 = abs(_a0211);
    _TMP30 = bvec4(_TMP208.x < 1.50000000E+01, _TMP208.y < 1.50000000E+01, _TMP208.z < 1.50000000E+01, _TMP208.w < 1.50000000E+01);
    _a0217 = _e1 - _c1.wxyz;
    _TMP214 = abs(_a0217);
    _TMP31 = bvec4(_TMP214.x < 1.50000000E+01, _TMP214.y < 1.50000000E+01, _TMP214.z < 1.50000000E+01, _TMP214.w < 1.50000000E+01);
    _a0223 = _b1.wxyz - _h5.yzwx;
    _TMP220 = abs(_a0223);
    _TMP32 = bvec4(_TMP220.x < 1.50000000E+01, _TMP220.y < 1.50000000E+01, _TMP220.z < 1.50000000E+01, _TMP220.w < 1.50000000E+01);
    _a0229 = _b1.wxyz - _i4;
    _TMP226 = abs(_a0229);
    _TMP33 = bvec4(_TMP226.x < 1.50000000E+01, _TMP226.y < 1.50000000E+01, _TMP226.z < 1.50000000E+01, _TMP226.w < 1.50000000E+01);
    _a0235 = _b1.zwxy - _h5;
    _TMP232 = abs(_a0235);
    _TMP34 = bvec4(_TMP232.x < 1.50000000E+01, _TMP232.y < 1.50000000E+01, _TMP232.z < 1.50000000E+01, _TMP232.w < 1.50000000E+01);
    _a0241 = _b1.zwxy - _i5;
    _TMP238 = abs(_a0241);
    _TMP35 = bvec4(_TMP238.x < 1.50000000E+01, _TMP238.y < 1.50000000E+01, _TMP238.z < 1.50000000E+01, _TMP238.w < 1.50000000E+01);
    _a0247 = _e1 - _c1.zwxy;
    _TMP244 = abs(_a0247);
    _TMP36 = bvec4(_TMP244.x < 1.50000000E+01, _TMP244.y < 1.50000000E+01, _TMP244.z < 1.50000000E+01, _TMP244.w < 1.50000000E+01);
    _a0253 = _e1 - _c1;
    _TMP250 = abs(_a0253);
    _TMP37 = bvec4(_TMP250.x < 1.50000000E+01, _TMP250.y < 1.50000000E+01, _TMP250.z < 1.50000000E+01, _TMP250.w < 1.50000000E+01);
    _interp_restriction_lv1 = bvec4(_e1.x != _b1.w && _e1.x != _b1.z && (!_TMP27.x && !_TMP28.x || !_TMP29.x && !_TMP30.x || _TMP31.x && (!_TMP32.x && !_TMP33.x || !_TMP34.x && !_TMP35.x) || _TMP36.x || _TMP37.x), _e1.y != _b1.x && _e1.y != _b1.w && (!_TMP27.y && !_TMP28.y || !_TMP29.y && !_TMP30.y || _TMP31.y && (!_TMP32.y && !_TMP33.y || !_TMP34.y && !_TMP35.y) || _TMP36.y || _TMP37.y), _e1.z != _b1.y && _e1.z != _b1.x && (!_TMP27.z && !_TMP28.z || !_TMP29.z && !_TMP30.z || _TMP31.z && (!_TMP32.z && !_TMP33.z || !_TMP34.z && !_TMP35.z) || _TMP36.z || _TMP37.z), _e1.w != _b1.z && _e1.w != _b1.y && (!_TMP27.w && !_TMP28.w || !_TMP29.w && !_TMP30.w || _TMP31.w && (!_TMP32.w && !_TMP33.w || !_TMP34.w && !_TMP35.w) || _TMP36.w || _TMP37.w));
    _interp_restriction_lv2_left = bvec4(_e1.x != _c1.z && _b1.y != _c1.z, _e1.y != _c1.w && _b1.z != _c1.w, _e1.z != _c1.x && _b1.w != _c1.x, _e1.w != _c1.y && _b1.x != _c1.y);
    _interp_restriction_lv2_up = bvec4(_e1.x != _c1.x && _b1.x != _c1.x, _e1.y != _c1.y && _b1.y != _c1.y, _e1.z != _c1.z && _b1.z != _c1.z, _e1.w != _c1.w && _b1.w != _c1.w);
    _a0259 = _e1 - _c1;
    _TMP256 = abs(_a0259);
    _a0263 = _e1 - _c1.zwxy;
    _TMP260 = abs(_a0263);
    _a0267 = _c1.wxyz - _h5;
    _TMP264 = abs(_a0267);
    _a0271 = _c1.wxyz - _h5.yzwx;
    _TMP268 = abs(_a0271);
    _a0275 = _b1.zwxy - _b1.wxyz;
    _TMP272 = abs(_a0275);
    _TMP38 = _TMP256 + _TMP260 + _TMP264 + _TMP268 + 4.00000000E+00*_TMP272;
    _a0281 = _b1.zwxy - _b1.yzwx;
    _TMP278 = abs(_a0281);
    _a0285 = _b1.zwxy - _i5;
    _TMP282 = abs(_a0285);
    _a0289 = _b1.wxyz - _i4;
    _TMP286 = abs(_a0289);
    _a0293 = _b1.wxyz - _b1;
    _TMP290 = abs(_a0293);
    _a0297 = _e1 - _c1.wxyz;
    _TMP294 = abs(_a0297);
    _TMP39 = _TMP278 + _TMP282 + _TMP286 + _TMP290 + 4.00000000E+00*_TMP294;
    _edr = bvec4(_TMP38.x < _TMP39.x && _interp_restriction_lv1.x, _TMP38.y < _TMP39.y && _interp_restriction_lv1.y, _TMP38.z < _TMP39.z && _interp_restriction_lv1.z, _TMP38.w < _TMP39.w && _interp_restriction_lv1.w);
    _a0301 = _b1.wxyz - _c1.zwxy;
    _TMP298 = abs(_a0301);
    _a0305 = _b1.zwxy - _c1;
    _TMP302 = abs(_a0305);
    _edr_left = bvec4((2.00000000E+00*_TMP298).x <= _TMP302.x && _interp_restriction_lv2_left.x, (2.00000000E+00*_TMP298).y <= _TMP302.y && _interp_restriction_lv2_left.y, (2.00000000E+00*_TMP298).z <= _TMP302.z && _interp_restriction_lv2_left.z, (2.00000000E+00*_TMP298).w <= _TMP302.w && _interp_restriction_lv2_left.w);
    _a0309 = _b1.wxyz - _c1.zwxy;
    _TMP306 = abs(_a0309);
    _a0313 = _b1.zwxy - _c1;
    _TMP310 = abs(_a0313);
    _edr_up = bvec4(_TMP306.x >= (2.00000000E+00*_TMP310).x && _interp_restriction_lv2_up.x, _TMP306.y >= (2.00000000E+00*_TMP310).y && _interp_restriction_lv2_up.y, _TMP306.z >= (2.00000000E+00*_TMP310).z && _interp_restriction_lv2_up.z, _TMP306.w >= (2.00000000E+00*_TMP310).w && _interp_restriction_lv2_up.w);
    _a0317 = _e1 - _b1.wxyz;
    _TMP314 = abs(_a0317);
    _a0321 = _e1 - _b1.zwxy;
    _TMP318 = abs(_a0321);
    _px = bvec4(_TMP314.x <= _TMP318.x, _TMP314.y <= _TMP318.y, _TMP314.z <= _TMP318.z, _TMP314.w <= _TMP318.w);
    if (_px.x) { 
        _TMP46 = _F;
    } else {
        _TMP46 = _H;
    } 
    if (_px.y) { 
        _TMP47 = _B2;
    } else {
        _TMP47 = _F;
    } 
    if (_px.z) { 
        _TMP48 = _D;
    } else {
        _TMP48 = _B2;
    } 
    if (_px.w) { 
        _TMP49 = _H;
    } else {
        _TMP49 = _D;
    } 
    _n1 = vec3(float(_B11.x), float(_B11.y), float(_B11.z));
    _n2 = vec3(float(_B2.x), float(_B2.y), float(_B2.z));
    _s = vec3(float(_E.x), float(_E.y), float(_E.z));
    _n3 = vec3(float(_H.x), float(_H.y), float(_H.z));
    _n4 = vec3(float(_H5.x), float(_H5.y), float(_H5.z));
    _aa = _n2 - _n1;
    _bb = _s - _n2;
    _cc = _n3 - _s;
    _dd = _n4 - _n3;
    _t = (7.00000000E+00*(_bb + _cc) - 3.00000000E+00*(_aa + _dd))/1.60000000E+01;
    _m = vec3(_s.x < 5.00000000E-01 ? (2.00000000E+00*_s).x : (2.00000000E+00*(1.00000000E+00 - _s)).x, _s.y < 5.00000000E-01 ? (2.00000000E+00*_s).y : (2.00000000E+00*(1.00000000E+00 - _s)).y, _s.z < 5.00000000E-01 ? (2.00000000E+00*_s).z : (2.00000000E+00*(1.00000000E+00 - _s)).z);
    _TMP50 = abs(_bb);
    _b0325 = 2.00000000E+00*_TMP50;
    _m = min(_m, _b0325);
    _TMP51 = abs(_cc);
    _b0329 = 2.00000000E+00*_TMP51;
    _m = min(_m, _b0329);
    _TMP52 = abs(_bb);
    _TMP53 = abs(_cc);
    _TMP54 = abs(_bb);
    _TMP55 = abs(_cc);
    _sim1 = bvec3((_TMP52*2.00000000E+00).x > 4.00000006E-01 || (_TMP53*2.00000000E+00).x > 4.00000006E-01 || (_TMP54*2.00000000E+00).x <= 0.00000000E+00 || (_TMP55*2.00000000E+00).x <= 0.00000000E+00, (_TMP52*2.00000000E+00).y > 4.00000006E-01 || (_TMP53*2.00000000E+00).y > 4.00000006E-01 || (_TMP54*2.00000000E+00).y <= 0.00000000E+00 || (_TMP55*2.00000000E+00).y <= 0.00000000E+00, (_TMP52*2.00000000E+00).z > 4.00000006E-01 || (_TMP53*2.00000000E+00).z > 4.00000006E-01 || (_TMP54*2.00000000E+00).z <= 0.00000000E+00 || (_TMP55*2.00000000E+00).z <= 0.00000000E+00);
    _a0339 = -_m;
    _TMP70 = min(_m, _t);
    _TMP338 = max(_a0339, _TMP70);
    _s1 = (2.00000000E+00*_fp.y - 1.00000000E+00)*_TMP338 + _s;
    _n1 = vec3(float(_D0.x), float(_D0.y), float(_D0.z));
    _n2 = vec3(float(_D.x), float(_D.y), float(_D.z));
    _n3 = vec3(float(_F.x), float(_F.y), float(_F.z));
    _n4 = vec3(float(_F4.x), float(_F4.y), float(_F4.z));
    _aa = _n2 - _n1;
    _bb = _s1 - _n2;
    _cc = _n3 - _s1;
    _dd = _n4 - _n3;
    _t = (7.00000000E+00*(_bb + _cc) - 3.00000000E+00*(_aa + _dd))/1.60000000E+01;
    _m = vec3(_s1.x < 5.00000000E-01 ? (2.00000000E+00*_s1).x : (2.00000000E+00*(1.00000000E+00 - _s1)).x, _s1.y < 5.00000000E-01 ? (2.00000000E+00*_s1).y : (2.00000000E+00*(1.00000000E+00 - _s1)).y, _s1.z < 5.00000000E-01 ? (2.00000000E+00*_s1).z : (2.00000000E+00*(1.00000000E+00 - _s1)).z);
    _TMP56 = abs(_bb);
    _b0347 = 2.00000000E+00*_TMP56;
    _m = min(_m, _b0347);
    _TMP57 = abs(_cc);
    _b0351 = 2.00000000E+00*_TMP57;
    _m = min(_m, _b0351);
    _TMP58 = abs(_bb);
    _TMP59 = abs(_cc);
    _TMP60 = abs(_bb);
    _TMP61 = abs(_cc);
    _sim2 = bvec3((_TMP58*2.00000000E+00).x > 4.00000006E-01 || (_TMP59*2.00000000E+00).x > 4.00000006E-01 || (_TMP60*2.00000000E+00).x <= 0.00000000E+00 || (_TMP61*2.00000000E+00).x <= 0.00000000E+00, (_TMP58*2.00000000E+00).y > 4.00000006E-01 || (_TMP59*2.00000000E+00).y > 4.00000006E-01 || (_TMP60*2.00000000E+00).y <= 0.00000000E+00 || (_TMP61*2.00000000E+00).y <= 0.00000000E+00, (_TMP58*2.00000000E+00).z > 4.00000006E-01 || (_TMP59*2.00000000E+00).z > 4.00000006E-01 || (_TMP60*2.00000000E+00).z <= 0.00000000E+00 || (_TMP61*2.00000000E+00).z <= 0.00000000E+00);
    _a0361 = -_m;
    _TMP70 = min(_m, _t);
    _TMP360 = max(_a0361, _TMP70);
    _s0 = (2.00000000E+00*_fp.x - 1.00000000E+00)*_TMP360 + _s1;
    _res = vec3(float(_s0.x), float(_s0.y), float(_s0.z));
    _TMP62 = _sim1.x || _sim1.y || _sim1.z;
    _TMP63 = _sim2.x || _sim2.y || _sim2.z;
    if (_TMP62 && _TMP63) { 
        if (_fp.x >= 5.00000000E-01) { 
            if (_fp.y >= 5.00000000E-01) { 
                if (_edr.x && _edr_left.x && _edr_up.x) { 
                    _res = _E + 8.33496094E-01*(_TMP46 - _E);
                } else {
                    if (_edr.x && (_edr_left.x || _edr_up.x)) { 
                        _res = _E + 7.50000000E-01*(_TMP46 - _E);
                    } else {
                        if (_edr.y && _edr_left.y && _edr.w && _edr_up.w) { 
                            _res = _E + 2.50000000E-01*(_TMP49 - _E);
                        } else {
                            if (_edr.y && _edr_left.y) { 
                                _res = _E + 2.50000000E-01*(_TMP47 - _E);
                            } else {
                                if (_edr.w && _edr_up.w) { 
                                    _res = _E + 2.50000000E-01*(_TMP49 - _E);
                                } else {
                                    if (_edr.x) { 
                                        _res = _E + 5.00000000E-01*(_TMP46 - _E);
                                    } 
                                } 
                            } 
                        } 
                    } 
                } 
            } else {
                if (_edr.y && _edr_left.y && _edr_up.y) { 
                    _res = _E + 8.33496094E-01*(_TMP47 - _E);
                } else {
                    if (_edr.y && (_edr_left.y || _edr_up.y)) { 
                        _res = _E + 7.50000000E-01*(_TMP47 - _E);
                    } else {
                        if (_edr.z && _edr_left.z && _edr.x && _edr_up.x) { 
                            _res = _E + 2.50000000E-01*(_TMP46 - _E);
                        } else {
                            if (_edr.z && _edr_left.z) { 
                                _res = _E + 2.50000000E-01*(_TMP48 - _E);
                            } else {
                                if (_edr.x && _edr_up.x) { 
                                    _res = _E + 2.50000000E-01*(_TMP46 - _E);
                                } else {
                                    if (_edr.y) { 
                                        _res = _E + 5.00000000E-01*(_TMP47 - _E);
                                    } 
                                } 
                            } 
                        } 
                    } 
                } 
            } 
        } else {
            if (_fp.y >= 5.00000000E-01) { 
                if (_edr.w && _edr_left.w && _edr_up.w) { 
                    _res = _E + 8.33496094E-01*(_TMP49 - _E);
                } else {
                    if (_edr.w && (_edr_left.w || _edr_up.w)) { 
                        _res = _E + 7.50000000E-01*(_TMP49 - _E);
                    } else {
                        if (_edr.x && _edr_left.x && _edr.z && _edr_up.z) { 
                            _res = _E + 2.50000000E-01*(_TMP48 - _E);
                        } else {
                            if (_edr.x && _edr_left.x) { 
                                _res = _E + 2.50000000E-01*(_TMP46 - _E);
                            } else {
                                if (_edr.z && _edr_up.z) { 
                                    _res = _E + 2.50000000E-01*(_TMP48 - _E);
                                } else {
                                    if (_edr.w) { 
                                        _res = _E + 5.00000000E-01*(_TMP49 - _E);
                                    } 
                                } 
                            } 
                        } 
                    } 
                } 
            } else {
                if (_edr.z && _edr_left.z && _edr_up.z) { 
                    _res = _E + 8.33496094E-01*(_TMP48 - _E);
                } else {
                    if (_edr.z && (_edr_left.z || _edr_up.z)) { 
                        _res = _E + 7.50000000E-01*(_TMP48 - _E);
                    } else {
                        if (_edr.w && _edr_left.w && _edr.y && _edr_up.y) { 
                            _res = _E + 2.50000000E-01*(_TMP47 - _E);
                        } else {
                            if (_edr.w && _edr_left.w) { 
                                _res = _E + 2.50000000E-01*(_TMP49 - _E);
                            } else {
                                if (_edr.y && _edr_up.y) { 
                                    _res = _E + 2.50000000E-01*(_TMP47 - _E);
                                } else {
                                    if (_edr.z) { 
                                        _res = _E + 5.00000000E-01*(_TMP48 - _E);
                                    } 
                                } 
                            } 
                        } 
                    } 
                } 
            } 
        } 
    } 
    _ret_0 = vec4(_res.x, _res.y, _res.z, 1.00000000E+00);
    FragColor = vec4(float(_ret_0.x), float(_ret_0.y), float(_ret_0.z), float(_ret_0.w));
    return;
} 
#endif
