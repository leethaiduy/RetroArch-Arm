// GLSL shader autogenerated by cg2glsl.py.
#if defined(VERTEX)

#if __VERSION__ >= 130
#define COMPAT_VARYING out
#define COMPAT_ATTRIBUTE in
#define COMPAT_TEXTURE texture
#else
#define COMPAT_VARYING varying 
#define COMPAT_ATTRIBUTE attribute 
#define COMPAT_TEXTURE texture2D
#endif

#ifdef GL_ES
#define COMPAT_PRECISION mediump
#else
#define COMPAT_PRECISION
#endif
COMPAT_VARYING     vec4 VARt7;
COMPAT_VARYING     vec4 VARt6;
COMPAT_VARYING     vec4 VARt5;
COMPAT_VARYING     vec4 VARt4;
COMPAT_VARYING     vec4 VARt3;
COMPAT_VARYING     vec4 VARt2;
COMPAT_VARYING     vec4 VARt1;
COMPAT_VARYING     vec2 _texCoord2;
COMPAT_VARYING     vec4 _color1;
COMPAT_VARYING     vec4 _position1;
struct input_dummy {
    vec2 _video_size;
    vec2 _texture_size;
    vec2 _output_dummy_size;
};
struct out_vertex {
    vec4 _position1;
    vec4 _color1;
    vec2 _texCoord2;
    vec4 VARt1;
    vec4 VARt2;
    vec4 VARt3;
    vec4 VARt4;
    vec4 VARt5;
    vec4 VARt6;
    vec4 VARt7;
};
out_vertex _ret_0;
input_dummy _IN1;
vec4 _r0011;
vec4 _v0011;
COMPAT_ATTRIBUTE vec4 VertexCoord;
COMPAT_ATTRIBUTE vec4 COLOR;
COMPAT_ATTRIBUTE vec4 TexCoord;
COMPAT_VARYING vec4 COL0;
COMPAT_VARYING vec4 TEX0;
 
uniform mat4 MVPMatrix;
uniform int FrameDirection;
uniform int FrameCount;
uniform COMPAT_PRECISION vec2 OutputSize;
uniform COMPAT_PRECISION vec2 TextureSize;
uniform COMPAT_PRECISION vec2 InputSize;
void main()
{
    out_vertex _OUT;
    vec2 _ps;
    vec2 _texCoord;
    _v0011 = vec4(float(VertexCoord.x), float(VertexCoord.y), float(VertexCoord.z), float(VertexCoord.w));
    _r0011 = _v0011.x*MVPMatrix[0];
    _r0011 = _r0011 + _v0011.y*MVPMatrix[1];
    _r0011 = _r0011 + _v0011.z*MVPMatrix[2];
    _r0011 = _r0011 + _v0011.w*MVPMatrix[3];
    _OUT._position1 = vec4(float(_r0011.x), float(_r0011.y), float(_r0011.z), float(_r0011.w));
    _ps = vec2(1.00000000E+00/TextureSize.x, 1.00000000E+00/TextureSize.y);
    _texCoord = TexCoord.xy + vec2( 1.00000001E-07, 1.00000001E-07);
    _OUT.VARt1 = _texCoord.xxxy + vec4(float(float(-_ps.x)), 0.00000000E+00, float(float(_ps.x)), float(float((-2.00000000E+00*_ps.y))));
    _OUT.VARt2 = _texCoord.xxxy + vec4(float(float(-_ps.x)), 0.00000000E+00, float(float(_ps.x)), float(float(-_ps.y)));
    _OUT.VARt3 = _texCoord.xxxy + vec4(float(float(-_ps.x)), 0.00000000E+00, float(float(_ps.x)), 0.00000000E+00);
    _OUT.VARt4 = _texCoord.xxxy + vec4(float(float(-_ps.x)), 0.00000000E+00, float(float(_ps.x)), float(float(_ps.y)));
    _OUT.VARt5 = _texCoord.xxxy + vec4(float(float(-_ps.x)), 0.00000000E+00, float(float(_ps.x)), float(float((2.00000000E+00*_ps.y))));
    _OUT.VARt6 = _texCoord.xyyy + vec4(float(float((-2.00000000E+00*_ps.x))), float(float(-_ps.y)), 0.00000000E+00, float(float(_ps.y)));
    _OUT.VARt7 = _texCoord.xyyy + vec4(float(float((2.00000000E+00*_ps.x))), float(float(-_ps.y)), 0.00000000E+00, float(float(_ps.y)));
    _ret_0._position1 = _OUT._position1;
    _ret_0._color1 = COLOR;
    _ret_0._texCoord2 = _texCoord;
    VARt1 = _OUT.VARt1;
    VARt2 = _OUT.VARt2;
    VARt3 = _OUT.VARt3;
    VARt4 = _OUT.VARt4;
    VARt5 = _OUT.VARt5;
    VARt6 = _OUT.VARt6;
    VARt7 = _OUT.VARt7;
    gl_Position = _OUT._position1;
    COL0 = COLOR;
    TEX0.xy = _texCoord;
    return;
    COL0 = _ret_0._color1;
    TEX0.xy = _ret_0._texCoord2;
} 
#elif defined(FRAGMENT)

#if __VERSION__ >= 130
#define COMPAT_VARYING in
#define COMPAT_TEXTURE texture
out vec4 FragColor;
#else
#define COMPAT_VARYING varying
#define FragColor gl_FragColor
#define COMPAT_TEXTURE texture2D
#endif

#ifdef GL_ES
#ifdef GL_FRAGMENT_PRECISION_HIGH
precision highp float;
#else
precision mediump float;
#endif
#define COMPAT_PRECISION mediump
#else
#define COMPAT_PRECISION
#endif
COMPAT_VARYING     vec4 VARt7;
COMPAT_VARYING     vec4 VARt6;
COMPAT_VARYING     vec4 VARt5;
COMPAT_VARYING     vec4 VARt4;
COMPAT_VARYING     vec4 VARt3;
COMPAT_VARYING     vec4 VARt2;
COMPAT_VARYING     vec4 VARt1;
COMPAT_VARYING     vec2 _texCoord;
COMPAT_VARYING     vec4 _color;
struct input_dummy {
    vec2 _video_size;
    vec2 _texture_size;
    vec2 _output_dummy_size;
};
struct out_vertex {
    vec4 _color;
    vec2 _texCoord;
    vec4 VARt1;
    vec4 VARt2;
    vec4 VARt3;
    vec4 VARt4;
    vec4 VARt5;
    vec4 VARt6;
    vec4 VARt7;
};
vec4 _ret_0;
float _TMP66;
float _TMP65;
float _TMP64;
vec3 _TMP75;
vec3 _TMP56;
vec3 _TMP58;
vec3 _TMP60;
vec3 _TMP62;
vec3 _TMP63;
vec3 _TMP61;
vec3 _TMP59;
vec3 _TMP57;
vec3 _TMP48;
vec3 _TMP50;
vec3 _TMP52;
vec3 _TMP54;
vec3 _TMP55;
vec3 _TMP53;
vec3 _TMP51;
vec3 _TMP49;
vec4 _TMP41;
vec4 _TMP40;
bvec4 _TMP39;
bvec4 _TMP38;
bvec4 _TMP37;
bvec4 _TMP36;
bvec4 _TMP35;
bvec4 _TMP34;
bvec4 _TMP33;
bvec4 _TMP32;
bvec4 _TMP31;
bvec4 _TMP30;
bvec4 _TMP29;
bvec4 _TMP28;
bvec4 _TMP27;
float _TMP74;
vec4 _TMP20;
vec4 _TMP19;
vec4 _TMP18;
vec4 _TMP17;
vec4 _TMP16;
vec4 _TMP15;
vec4 _TMP14;
vec4 _TMP13;
vec4 _TMP12;
vec4 _TMP11;
vec4 _TMP10;
vec4 _TMP9;
vec4 _TMP8;
vec4 _TMP7;
vec4 _TMP6;
vec4 _TMP5;
vec4 _TMP4;
vec4 _TMP3;
vec4 _TMP2;
vec4 _TMP1;
vec4 _TMP0;
out_vertex _VAR1;
uniform sampler2D Texture;
input_dummy _IN1;
vec2 _x0089;
vec4 _r0133;
vec4 _r0143;
vec4 _r0153;
vec4 _r0163;
vec4 _r0173;
vec4 _r0183;
vec4 _TMP194;
vec4 _a0197;
vec4 _TMP200;
vec4 _a0203;
vec4 _TMP206;
vec4 _a0209;
vec4 _TMP212;
vec4 _a0215;
vec4 _TMP218;
vec4 _a0221;
vec4 _TMP224;
vec4 _a0227;
vec4 _TMP230;
vec4 _a0233;
vec4 _TMP236;
vec4 _a0239;
vec4 _TMP242;
vec4 _a0245;
vec4 _TMP248;
vec4 _a0251;
vec4 _TMP254;
vec4 _a0257;
vec4 _TMP260;
vec4 _a0263;
vec4 _TMP266;
vec4 _a0269;
vec4 _TMP272;
vec4 _a0275;
vec4 _TMP276;
vec4 _a0279;
vec4 _TMP280;
vec4 _a0283;
vec4 _TMP284;
vec4 _a0287;
vec4 _TMP288;
vec4 _a0291;
vec4 _TMP294;
vec4 _a0297;
vec4 _TMP298;
vec4 _a0301;
vec4 _TMP302;
vec4 _a0305;
vec4 _TMP306;
vec4 _a0309;
vec4 _TMP310;
vec4 _a0313;
vec4 _TMP314;
vec4 _a0317;
vec4 _TMP318;
vec4 _a0321;
vec4 _TMP322;
vec4 _a0325;
vec4 _TMP326;
vec4 _a0329;
vec4 _TMP330;
vec4 _a0333;
vec4 _TMP334;
vec4 _a0337;
vec3 _df0339;
vec3 _a0341;
vec3 _df0343;
vec3 _a0345;
COMPAT_VARYING vec4 TEX0;
 
uniform int FrameDirection;
uniform int FrameCount;
uniform COMPAT_PRECISION vec2 OutputSize;
uniform COMPAT_PRECISION vec2 TextureSize;
uniform COMPAT_PRECISION vec2 InputSize;
void main()
{
    bvec4 _edr;
    bvec4 _edr_left;
    bvec4 _edr_up;
    bvec4 _px;
    bvec4 _interp_restriction_lv1;
    bvec4 _interp_restriction_lv2_left;
    bvec4 _interp_restriction_lv2_up;
    bvec4 _interp_restriction_lv3_left;
    bvec4 _interp_restriction_lv3_up;
    bvec4 _nc;
    bvec4 _fx;
    bvec4 _fx_left;
    bvec4 _fx_up;
    bvec4 _fx3_left;
    bvec4 _fx3_up;
    vec2 _fp;
    vec3 _A11;
    vec3 _B11;
    vec3 _C1;
    vec3 _A3;
    vec3 _B3;
    vec3 _C;
    vec3 _D;
    vec3 _E;
    vec3 _F;
    vec3 _G;
    vec3 _H;
    vec3 _I;
    vec3 _G5;
    vec3 _H5;
    vec3 _I5;
    vec3 _A0;
    vec3 _D0;
    vec3 _G0;
    vec3 _C4;
    vec3 _F4;
    vec3 _I4;
    vec4 _b1;
    vec4 _c3;
    vec4 _e1;
    vec4 _i4;
    vec4 _i5;
    vec4 _h5;
    vec3 _res;
    _x0089 = TEX0.xy*TextureSize;
    _fp = fract(_x0089);
    _TMP0 = COMPAT_TEXTURE(Texture, VARt1.xw);
    _A11 = vec3(float(_TMP0.x), float(_TMP0.y), float(_TMP0.z));
    _TMP1 = COMPAT_TEXTURE(Texture, VARt1.yw);
    _B11 = vec3(float(_TMP1.x), float(_TMP1.y), float(_TMP1.z));
    _TMP2 = COMPAT_TEXTURE(Texture, VARt1.zw);
    _C1 = vec3(float(_TMP2.x), float(_TMP2.y), float(_TMP2.z));
    _TMP3 = COMPAT_TEXTURE(Texture, VARt2.xw);
    _A3 = vec3(float(_TMP3.x), float(_TMP3.y), float(_TMP3.z));
    _TMP4 = COMPAT_TEXTURE(Texture, VARt2.yw);
    _B3 = vec3(float(_TMP4.x), float(_TMP4.y), float(_TMP4.z));
    _TMP5 = COMPAT_TEXTURE(Texture, VARt2.zw);
    _C = vec3(float(_TMP5.x), float(_TMP5.y), float(_TMP5.z));
    _TMP6 = COMPAT_TEXTURE(Texture, VARt3.xw);
    _D = vec3(float(_TMP6.x), float(_TMP6.y), float(_TMP6.z));
    _TMP7 = COMPAT_TEXTURE(Texture, VARt3.yw);
    _E = vec3(float(_TMP7.x), float(_TMP7.y), float(_TMP7.z));
    _TMP8 = COMPAT_TEXTURE(Texture, VARt3.zw);
    _F = vec3(float(_TMP8.x), float(_TMP8.y), float(_TMP8.z));
    _TMP9 = COMPAT_TEXTURE(Texture, VARt4.xw);
    _G = vec3(float(_TMP9.x), float(_TMP9.y), float(_TMP9.z));
    _TMP10 = COMPAT_TEXTURE(Texture, VARt4.yw);
    _H = vec3(float(_TMP10.x), float(_TMP10.y), float(_TMP10.z));
    _TMP11 = COMPAT_TEXTURE(Texture, VARt4.zw);
    _I = vec3(float(_TMP11.x), float(_TMP11.y), float(_TMP11.z));
    _TMP12 = COMPAT_TEXTURE(Texture, VARt5.xw);
    _G5 = vec3(float(_TMP12.x), float(_TMP12.y), float(_TMP12.z));
    _TMP13 = COMPAT_TEXTURE(Texture, VARt5.yw);
    _H5 = vec3(float(_TMP13.x), float(_TMP13.y), float(_TMP13.z));
    _TMP14 = COMPAT_TEXTURE(Texture, VARt5.zw);
    _I5 = vec3(float(_TMP14.x), float(_TMP14.y), float(_TMP14.z));
    _TMP15 = COMPAT_TEXTURE(Texture, VARt6.xy);
    _A0 = vec3(float(_TMP15.x), float(_TMP15.y), float(_TMP15.z));
    _TMP16 = COMPAT_TEXTURE(Texture, VARt6.xz);
    _D0 = vec3(float(_TMP16.x), float(_TMP16.y), float(_TMP16.z));
    _TMP17 = COMPAT_TEXTURE(Texture, VARt6.xw);
    _G0 = vec3(float(_TMP17.x), float(_TMP17.y), float(_TMP17.z));
    _TMP18 = COMPAT_TEXTURE(Texture, VARt7.xy);
    _C4 = vec3(float(_TMP18.x), float(_TMP18.y), float(_TMP18.z));
    _TMP19 = COMPAT_TEXTURE(Texture, VARt7.xz);
    _F4 = vec3(float(_TMP19.x), float(_TMP19.y), float(_TMP19.z));
    _TMP20 = COMPAT_TEXTURE(Texture, VARt7.xw);
    _I4 = vec3(float(_TMP20.x), float(_TMP20.y), float(_TMP20.z));
    _TMP74 = dot(vec3(float(_B3.x), float(_B3.y), float(_B3.z)), vec3( 1.43593750E+01, 2.81718750E+01, 5.47265625E+00));
    _r0133.x = float(_TMP74);
    _TMP74 = dot(vec3(float(_D.x), float(_D.y), float(_D.z)), vec3( 1.43593750E+01, 2.81718750E+01, 5.47265625E+00));
    _r0133.y = float(_TMP74);
    _TMP74 = dot(vec3(float(_H.x), float(_H.y), float(_H.z)), vec3( 1.43593750E+01, 2.81718750E+01, 5.47265625E+00));
    _r0133.z = float(_TMP74);
    _TMP74 = dot(vec3(float(_F.x), float(_F.y), float(_F.z)), vec3( 1.43593750E+01, 2.81718750E+01, 5.47265625E+00));
    _r0133.w = float(_TMP74);
    _b1 = vec4(float(_r0133.x), float(_r0133.y), float(_r0133.z), float(_r0133.w));
    _TMP74 = dot(vec3(float(_C.x), float(_C.y), float(_C.z)), vec3( 1.43593750E+01, 2.81718750E+01, 5.47265625E+00));
    _r0143.x = float(_TMP74);
    _TMP74 = dot(vec3(float(_A3.x), float(_A3.y), float(_A3.z)), vec3( 1.43593750E+01, 2.81718750E+01, 5.47265625E+00));
    _r0143.y = float(_TMP74);
    _TMP74 = dot(vec3(float(_G.x), float(_G.y), float(_G.z)), vec3( 1.43593750E+01, 2.81718750E+01, 5.47265625E+00));
    _r0143.z = float(_TMP74);
    _TMP74 = dot(vec3(float(_I.x), float(_I.y), float(_I.z)), vec3( 1.43593750E+01, 2.81718750E+01, 5.47265625E+00));
    _r0143.w = float(_TMP74);
    _c3 = vec4(float(_r0143.x), float(_r0143.y), float(_r0143.z), float(_r0143.w));
    _TMP74 = dot(vec3(float(_E.x), float(_E.y), float(_E.z)), vec3( 1.43593750E+01, 2.81718750E+01, 5.47265625E+00));
    _r0153.x = float(_TMP74);
    _TMP74 = dot(vec3(float(_E.x), float(_E.y), float(_E.z)), vec3( 1.43593750E+01, 2.81718750E+01, 5.47265625E+00));
    _r0153.y = float(_TMP74);
    _TMP74 = dot(vec3(float(_E.x), float(_E.y), float(_E.z)), vec3( 1.43593750E+01, 2.81718750E+01, 5.47265625E+00));
    _r0153.z = float(_TMP74);
    _TMP74 = dot(vec3(float(_E.x), float(_E.y), float(_E.z)), vec3( 1.43593750E+01, 2.81718750E+01, 5.47265625E+00));
    _r0153.w = float(_TMP74);
    _e1 = vec4(float(_r0153.x), float(_r0153.y), float(_r0153.z), float(_r0153.w));
    _TMP74 = dot(vec3(float(_I4.x), float(_I4.y), float(_I4.z)), vec3( 1.43593750E+01, 2.81718750E+01, 5.47265625E+00));
    _r0163.x = float(_TMP74);
    _TMP74 = dot(vec3(float(_C1.x), float(_C1.y), float(_C1.z)), vec3( 1.43593750E+01, 2.81718750E+01, 5.47265625E+00));
    _r0163.y = float(_TMP74);
    _TMP74 = dot(vec3(float(_A0.x), float(_A0.y), float(_A0.z)), vec3( 1.43593750E+01, 2.81718750E+01, 5.47265625E+00));
    _r0163.z = float(_TMP74);
    _TMP74 = dot(vec3(float(_G5.x), float(_G5.y), float(_G5.z)), vec3( 1.43593750E+01, 2.81718750E+01, 5.47265625E+00));
    _r0163.w = float(_TMP74);
    _i4 = vec4(float(_r0163.x), float(_r0163.y), float(_r0163.z), float(_r0163.w));
    _TMP74 = dot(vec3(float(_I5.x), float(_I5.y), float(_I5.z)), vec3( 1.43593750E+01, 2.81718750E+01, 5.47265625E+00));
    _r0173.x = float(_TMP74);
    _TMP74 = dot(vec3(float(_C4.x), float(_C4.y), float(_C4.z)), vec3( 1.43593750E+01, 2.81718750E+01, 5.47265625E+00));
    _r0173.y = float(_TMP74);
    _TMP74 = dot(vec3(float(_A11.x), float(_A11.y), float(_A11.z)), vec3( 1.43593750E+01, 2.81718750E+01, 5.47265625E+00));
    _r0173.z = float(_TMP74);
    _TMP74 = dot(vec3(float(_G0.x), float(_G0.y), float(_G0.z)), vec3( 1.43593750E+01, 2.81718750E+01, 5.47265625E+00));
    _r0173.w = float(_TMP74);
    _i5 = vec4(float(_r0173.x), float(_r0173.y), float(_r0173.z), float(_r0173.w));
    _TMP74 = dot(vec3(float(_H5.x), float(_H5.y), float(_H5.z)), vec3( 1.43593750E+01, 2.81718750E+01, 5.47265625E+00));
    _r0183.x = float(_TMP74);
    _TMP74 = dot(vec3(float(_F4.x), float(_F4.y), float(_F4.z)), vec3( 1.43593750E+01, 2.81718750E+01, 5.47265625E+00));
    _r0183.y = float(_TMP74);
    _TMP74 = dot(vec3(float(_B11.x), float(_B11.y), float(_B11.z)), vec3( 1.43593750E+01, 2.81718750E+01, 5.47265625E+00));
    _r0183.z = float(_TMP74);
    _TMP74 = dot(vec3(float(_D0.x), float(_D0.y), float(_D0.z)), vec3( 1.43593750E+01, 2.81718750E+01, 5.47265625E+00));
    _r0183.w = float(_TMP74);
    _h5 = vec4(float(_r0183.x), float(_r0183.y), float(_r0183.z), float(_r0183.w));
    _fx = bvec4((vec4( 1.00000000E+00, -1.00000000E+00, -1.00000000E+00, 1.00000000E+00)*_fp.y + vec4( 1.00000000E+00, 1.00000000E+00, -1.00000000E+00, -1.00000000E+00)*_fp.x).x > 1.50000000E+00, (vec4( 1.00000000E+00, -1.00000000E+00, -1.00000000E+00, 1.00000000E+00)*_fp.y + vec4( 1.00000000E+00, 1.00000000E+00, -1.00000000E+00, -1.00000000E+00)*_fp.x).y > 5.00000000E-01, (vec4( 1.00000000E+00, -1.00000000E+00, -1.00000000E+00, 1.00000000E+00)*_fp.y + vec4( 1.00000000E+00, 1.00000000E+00, -1.00000000E+00, -1.00000000E+00)*_fp.x).z > -5.00000000E-01, (vec4( 1.00000000E+00, -1.00000000E+00, -1.00000000E+00, 1.00000000E+00)*_fp.y + vec4( 1.00000000E+00, 1.00000000E+00, -1.00000000E+00, -1.00000000E+00)*_fp.x).w > 5.00000000E-01);
    _fx_left = bvec4((vec4( 1.00000000E+00, -1.00000000E+00, -1.00000000E+00, 1.00000000E+00)*_fp.y + vec4( 5.00000000E-01, 2.00000000E+00, -5.00000000E-01, -2.00000000E+00)*_fp.x).x > 1.00000000E+00, (vec4( 1.00000000E+00, -1.00000000E+00, -1.00000000E+00, 1.00000000E+00)*_fp.y + vec4( 5.00000000E-01, 2.00000000E+00, -5.00000000E-01, -2.00000000E+00)*_fp.x).y > 1.00000000E+00, (vec4( 1.00000000E+00, -1.00000000E+00, -1.00000000E+00, 1.00000000E+00)*_fp.y + vec4( 5.00000000E-01, 2.00000000E+00, -5.00000000E-01, -2.00000000E+00)*_fp.x).z > -5.00000000E-01, (vec4( 1.00000000E+00, -1.00000000E+00, -1.00000000E+00, 1.00000000E+00)*_fp.y + vec4( 5.00000000E-01, 2.00000000E+00, -5.00000000E-01, -2.00000000E+00)*_fp.x).w > 0.00000000E+00);
    _fx_up = bvec4((vec4( 1.00000000E+00, -1.00000000E+00, -1.00000000E+00, 1.00000000E+00)*_fp.y + vec4( 2.00000000E+00, 5.00000000E-01, -2.00000000E+00, -5.00000000E-01)*_fp.x).x > 2.00000000E+00, (vec4( 1.00000000E+00, -1.00000000E+00, -1.00000000E+00, 1.00000000E+00)*_fp.y + vec4( 2.00000000E+00, 5.00000000E-01, -2.00000000E+00, -5.00000000E-01)*_fp.x).y > 0.00000000E+00, (vec4( 1.00000000E+00, -1.00000000E+00, -1.00000000E+00, 1.00000000E+00)*_fp.y + vec4( 2.00000000E+00, 5.00000000E-01, -2.00000000E+00, -5.00000000E-01)*_fp.x).z > -1.00000000E+00, (vec4( 1.00000000E+00, -1.00000000E+00, -1.00000000E+00, 1.00000000E+00)*_fp.y + vec4( 2.00000000E+00, 5.00000000E-01, -2.00000000E+00, -5.00000000E-01)*_fp.x).w > 5.00000000E-01);
    _fx3_left = bvec4((vec4( 6.00000000E+00, -2.00000000E+00, -6.00000000E+00, 2.00000000E+00)*_fp.y + vec4( 2.00000000E+00, 6.00000000E+00, -2.00000000E+00, -6.00000000E+00)*_fp.x).x > 5.00000000E+00, (vec4( 6.00000000E+00, -2.00000000E+00, -6.00000000E+00, 2.00000000E+00)*_fp.y + vec4( 2.00000000E+00, 6.00000000E+00, -2.00000000E+00, -6.00000000E+00)*_fp.x).y > 3.00000000E+00, (vec4( 6.00000000E+00, -2.00000000E+00, -6.00000000E+00, 2.00000000E+00)*_fp.y + vec4( 2.00000000E+00, 6.00000000E+00, -2.00000000E+00, -6.00000000E+00)*_fp.x).z > -3.00000000E+00, (vec4( 6.00000000E+00, -2.00000000E+00, -6.00000000E+00, 2.00000000E+00)*_fp.y + vec4( 2.00000000E+00, 6.00000000E+00, -2.00000000E+00, -6.00000000E+00)*_fp.x).w > -1.00000000E+00);
    _fx3_up = bvec4((vec4( 2.00000000E+00, -6.00000000E+00, -2.00000000E+00, 6.00000000E+00)*_fp.y + vec4( 6.00000000E+00, 2.00000000E+00, -6.00000000E+00, -2.00000000E+00)*_fp.x).x > 5.00000000E+00, (vec4( 2.00000000E+00, -6.00000000E+00, -2.00000000E+00, 6.00000000E+00)*_fp.y + vec4( 6.00000000E+00, 2.00000000E+00, -6.00000000E+00, -2.00000000E+00)*_fp.x).y > -1.00000000E+00, (vec4( 2.00000000E+00, -6.00000000E+00, -2.00000000E+00, 6.00000000E+00)*_fp.y + vec4( 6.00000000E+00, 2.00000000E+00, -6.00000000E+00, -2.00000000E+00)*_fp.x).z > -3.00000000E+00, (vec4( 2.00000000E+00, -6.00000000E+00, -2.00000000E+00, 6.00000000E+00)*_fp.y + vec4( 6.00000000E+00, 2.00000000E+00, -6.00000000E+00, -2.00000000E+00)*_fp.x).w > 3.00000000E+00);
    _a0197 = _b1.wxyz - _b1;
    _TMP194 = abs(_a0197);
    _TMP27 = bvec4(_TMP194.x < 1.00000000E+01, _TMP194.y < 1.00000000E+01, _TMP194.z < 1.00000000E+01, _TMP194.w < 1.00000000E+01);
    _a0203 = _b1.zwxy - _b1.yzwx;
    _TMP200 = abs(_a0203);
    _TMP28 = bvec4(_TMP200.x < 1.00000000E+01, _TMP200.y < 1.00000000E+01, _TMP200.z < 1.00000000E+01, _TMP200.w < 1.00000000E+01);
    _a0209 = _e1 - _c3.wxyz;
    _TMP206 = abs(_a0209);
    _TMP29 = bvec4(_TMP206.x < 1.00000000E+01, _TMP206.y < 1.00000000E+01, _TMP206.z < 1.00000000E+01, _TMP206.w < 1.00000000E+01);
    _a0215 = _b1.wxyz - _i4;
    _TMP212 = abs(_a0215);
    _TMP30 = bvec4(_TMP212.x < 1.00000000E+01, _TMP212.y < 1.00000000E+01, _TMP212.z < 1.00000000E+01, _TMP212.w < 1.00000000E+01);
    _a0221 = _b1.zwxy - _i5;
    _TMP218 = abs(_a0221);
    _TMP31 = bvec4(_TMP218.x < 1.00000000E+01, _TMP218.y < 1.00000000E+01, _TMP218.z < 1.00000000E+01, _TMP218.w < 1.00000000E+01);
    _a0227 = _e1 - _c3.zwxy;
    _TMP224 = abs(_a0227);
    _TMP32 = bvec4(_TMP224.x < 1.00000000E+01, _TMP224.y < 1.00000000E+01, _TMP224.z < 1.00000000E+01, _TMP224.w < 1.00000000E+01);
    _a0233 = _e1 - _c3;
    _TMP230 = abs(_a0233);
    _TMP33 = bvec4(_TMP230.x < 1.00000000E+01, _TMP230.y < 1.00000000E+01, _TMP230.z < 1.00000000E+01, _TMP230.w < 1.00000000E+01);
    _a0239 = _b1 - _i4.yzwx;
    _TMP236 = abs(_a0239);
    _TMP34 = bvec4(_TMP236.x < 1.00000000E+01, _TMP236.y < 1.00000000E+01, _TMP236.z < 1.00000000E+01, _TMP236.w < 1.00000000E+01);
    _a0245 = _b1.yzwx - _i5.wxyz;
    _TMP242 = abs(_a0245);
    _TMP35 = bvec4(_TMP242.x < 1.00000000E+01, _TMP242.y < 1.00000000E+01, _TMP242.z < 1.00000000E+01, _TMP242.w < 1.00000000E+01);
    _interp_restriction_lv1 = bvec4(_e1.x != _b1.w && _e1.x != _b1.z && (!_TMP27.x && !_TMP28.x || _TMP29.x && !_TMP30.x && !_TMP31.x || _TMP32.x || _TMP33.x) && (_b1.w != _h5.y && _b1.w != _c3.w || _b1.z != _h5.x && _b1.z != _c3.w || _b1.z != _c3.z || _b1.w != _c3.x || _TMP34.x && _TMP35.x), _e1.y != _b1.x && _e1.y != _b1.w && (!_TMP27.y && !_TMP28.y || _TMP29.y && !_TMP30.y && !_TMP31.y || _TMP32.y || _TMP33.y) && (_b1.x != _h5.z && _b1.x != _c3.x || _b1.w != _h5.y && _b1.w != _c3.x || _b1.w != _c3.w || _b1.x != _c3.y || _TMP34.y && _TMP35.y), _e1.z != _b1.y && _e1.z != _b1.x && (!_TMP27.z && !_TMP28.z || _TMP29.z && !_TMP30.z && !_TMP31.z || _TMP32.z || _TMP33.z) && (_b1.y != _h5.w && _b1.y != _c3.y || _b1.x != _h5.z && _b1.x != _c3.y || _b1.x != _c3.x || _b1.y != _c3.z || _TMP34.z && _TMP35.z), _e1.w != _b1.z && _e1.w != _b1.y && (!_TMP27.w && !_TMP28.w || _TMP29.w && !_TMP30.w && !_TMP31.w || _TMP32.w || _TMP33.w) && (_b1.z != _h5.x && _b1.z != _c3.z || _b1.y != _h5.w && _b1.y != _c3.z || _b1.y != _c3.y || _b1.z != _c3.w || _TMP34.w && _TMP35.w));
    _interp_restriction_lv2_left = bvec4(_e1.x != _c3.z && _b1.y != _c3.z, _e1.y != _c3.w && _b1.z != _c3.w, _e1.z != _c3.x && _b1.w != _c3.x, _e1.w != _c3.y && _b1.x != _c3.y);
    _interp_restriction_lv2_up = bvec4(_e1.x != _c3.x && _b1.x != _c3.x, _e1.y != _c3.y && _b1.y != _c3.y, _e1.z != _c3.z && _b1.z != _c3.z, _e1.w != _c3.w && _b1.w != _c3.w);
    _a0251 = _c3.zwxy - _i5.wxyz;
    _TMP248 = abs(_a0251);
    _TMP36 = bvec4(_TMP248.x < 2.00000000E+00, _TMP248.y < 2.00000000E+00, _TMP248.z < 2.00000000E+00, _TMP248.w < 2.00000000E+00);
    _a0257 = _h5.wxyz - _i5.wxyz;
    _TMP254 = abs(_a0257);
    _TMP37 = bvec4(_TMP254.x < 2.00000000E+00, _TMP254.y < 2.00000000E+00, _TMP254.z < 2.00000000E+00, _TMP254.w < 2.00000000E+00);
    _interp_restriction_lv3_left = bvec4(_TMP36.x && !_TMP37.x, _TMP36.y && !_TMP37.y, _TMP36.z && !_TMP37.z, _TMP36.w && !_TMP37.w);
    _a0263 = _c3 - _i4.yzwx;
    _TMP260 = abs(_a0263);
    _TMP38 = bvec4(_TMP260.x < 2.00000000E+00, _TMP260.y < 2.00000000E+00, _TMP260.z < 2.00000000E+00, _TMP260.w < 2.00000000E+00);
    _a0269 = _h5.zwxy - _i4.yzwx;
    _TMP266 = abs(_a0269);
    _TMP39 = bvec4(_TMP266.x < 2.00000000E+00, _TMP266.y < 2.00000000E+00, _TMP266.z < 2.00000000E+00, _TMP266.w < 2.00000000E+00);
    _interp_restriction_lv3_up = bvec4(_TMP38.x && !_TMP39.x, _TMP38.y && !_TMP39.y, _TMP38.z && !_TMP39.z, _TMP38.w && !_TMP39.w);
    _a0275 = _e1 - _c3;
    _TMP272 = abs(_a0275);
    _a0279 = _e1 - _c3.zwxy;
    _TMP276 = abs(_a0279);
    _a0283 = _c3.wxyz - _h5;
    _TMP280 = abs(_a0283);
    _a0287 = _c3.wxyz - _h5.yzwx;
    _TMP284 = abs(_a0287);
    _a0291 = _b1.zwxy - _b1.wxyz;
    _TMP288 = abs(_a0291);
    _TMP40 = _TMP272 + _TMP276 + _TMP280 + _TMP284 + 4.00000000E+00*_TMP288;
    _a0297 = _b1.zwxy - _b1.yzwx;
    _TMP294 = abs(_a0297);
    _a0301 = _b1.zwxy - _i5;
    _TMP298 = abs(_a0301);
    _a0305 = _b1.wxyz - _i4;
    _TMP302 = abs(_a0305);
    _a0309 = _b1.wxyz - _b1;
    _TMP306 = abs(_a0309);
    _a0313 = _e1 - _c3.wxyz;
    _TMP310 = abs(_a0313);
    _TMP41 = _TMP294 + _TMP298 + _TMP302 + _TMP306 + 4.00000000E+00*_TMP310;
    _edr = bvec4(_TMP40.x < _TMP41.x && _interp_restriction_lv1.x, _TMP40.y < _TMP41.y && _interp_restriction_lv1.y, _TMP40.z < _TMP41.z && _interp_restriction_lv1.z, _TMP40.w < _TMP41.w && _interp_restriction_lv1.w);
    _a0317 = _b1.wxyz - _c3.zwxy;
    _TMP314 = abs(_a0317);
    _a0321 = _b1.zwxy - _c3;
    _TMP318 = abs(_a0321);
    _edr_left = bvec4((2.00000000E+00*_TMP314).x <= _TMP318.x && _interp_restriction_lv2_left.x, (2.00000000E+00*_TMP314).y <= _TMP318.y && _interp_restriction_lv2_left.y, (2.00000000E+00*_TMP314).z <= _TMP318.z && _interp_restriction_lv2_left.z, (2.00000000E+00*_TMP314).w <= _TMP318.w && _interp_restriction_lv2_left.w);
    _a0325 = _b1.wxyz - _c3.zwxy;
    _TMP322 = abs(_a0325);
    _a0329 = _b1.zwxy - _c3;
    _TMP326 = abs(_a0329);
    _edr_up = bvec4(_TMP322.x >= (2.00000000E+00*_TMP326).x && _interp_restriction_lv2_up.x, _TMP322.y >= (2.00000000E+00*_TMP326).y && _interp_restriction_lv2_up.y, _TMP322.z >= (2.00000000E+00*_TMP326).z && _interp_restriction_lv2_up.z, _TMP322.w >= (2.00000000E+00*_TMP326).w && _interp_restriction_lv2_up.w);
    _nc = bvec4(_edr.x && (_fx.x || _edr_left.x && (_fx_left.x || _interp_restriction_lv3_left.x && _fx3_left.x) || _edr_up.x && (_fx_up.x || _interp_restriction_lv3_up.x && _fx3_up.x)), _edr.y && (_fx.y || _edr_left.y && (_fx_left.y || _interp_restriction_lv3_left.y && _fx3_left.y) || _edr_up.y && (_fx_up.y || _interp_restriction_lv3_up.y && _fx3_up.y)), _edr.z && (_fx.z || _edr_left.z && (_fx_left.z || _interp_restriction_lv3_left.z && _fx3_left.z) || _edr_up.z && (_fx_up.z || _interp_restriction_lv3_up.z && _fx3_up.z)), _edr.w && (_fx.w || _edr_left.w && (_fx_left.w || _interp_restriction_lv3_left.w && _fx3_left.w) || _edr_up.w && (_fx_up.w || _interp_restriction_lv3_up.w && _fx3_up.w)));
    _a0333 = _e1 - _b1.wxyz;
    _TMP330 = abs(_a0333);
    _a0337 = _e1 - _b1.zwxy;
    _TMP334 = abs(_a0337);
    _px = bvec4(_TMP330.x <= _TMP334.x, _TMP330.y <= _TMP334.y, _TMP330.z <= _TMP334.z, _TMP330.w <= _TMP334.w);
    if (_nc.x) { 
        if (_px.x) { 
            _TMP49 = _F;
        } else {
            _TMP49 = _H;
        } 
        _TMP48 = _TMP49;
    } else {
        if (_nc.y) { 
            if (_px.y) { 
                _TMP51 = _B3;
            } else {
                _TMP51 = _F;
            } 
            _TMP50 = _TMP51;
        } else {
            if (_nc.z) { 
                if (_px.z) { 
                    _TMP53 = _D;
                } else {
                    _TMP53 = _B3;
                } 
                _TMP52 = _TMP53;
            } else {
                if (_nc.w) { 
                    if (_px.w) { 
                        _TMP55 = _H;
                    } else {
                        _TMP55 = _D;
                    } 
                    _TMP54 = _TMP55;
                } else {
                    _TMP54 = _E;
                } 
                _TMP52 = _TMP54;
            } 
            _TMP50 = _TMP52;
        } 
        _TMP48 = _TMP50;
    } 
    if (_nc.w) { 
        if (_px.w) { 
            _TMP57 = _H;
        } else {
            _TMP57 = _D;
        } 
        _TMP56 = _TMP57;
    } else {
        if (_nc.z) { 
            if (_px.z) { 
                _TMP59 = _D;
            } else {
                _TMP59 = _B3;
            } 
            _TMP58 = _TMP59;
        } else {
            if (_nc.y) { 
                if (_px.y) { 
                    _TMP61 = _B3;
                } else {
                    _TMP61 = _F;
                } 
                _TMP60 = _TMP61;
            } else {
                if (_nc.x) { 
                    if (_px.x) { 
                        _TMP63 = _F;
                    } else {
                        _TMP63 = _H;
                    } 
                    _TMP62 = _TMP63;
                } else {
                    _TMP62 = _E;
                } 
                _TMP60 = _TMP62;
            } 
            _TMP58 = _TMP60;
        } 
        _TMP56 = _TMP58;
    } 
    _a0341 = _E - _TMP48;
    _TMP75 = abs(vec3(float(_a0341.x), float(_a0341.y), float(_a0341.z)));
    _df0339 = vec3(float(_TMP75.x), float(_TMP75.y), float(_TMP75.z));
    _TMP64 = _df0339.x + _df0339.y + _df0339.z;
    _a0345 = _E - _TMP56;
    _TMP75 = abs(vec3(float(_a0345.x), float(_a0345.y), float(_a0345.z)));
    _df0343 = vec3(float(_TMP75.x), float(_TMP75.y), float(_TMP75.z));
    _TMP65 = _df0343.x + _df0343.y + _df0343.z;
    _TMP66 = float((_TMP65 >= _TMP64));
    _res = _TMP48 + _TMP66*(_TMP56 - _TMP48);
    _ret_0 = vec4(float(_res.x), float(_res.y), float(_res.z), 1.00000000E+00);
    FragColor = _ret_0;
    return;
} 
#endif
