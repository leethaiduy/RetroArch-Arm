// GLSL shader autogenerated by cg2glsl.py.
#if defined(VERTEX)

#if __VERSION__ >= 130
#define COMPAT_VARYING out
#define COMPAT_ATTRIBUTE in
#define COMPAT_TEXTURE texture
#else
#define COMPAT_VARYING varying 
#define COMPAT_ATTRIBUTE attribute 
#define COMPAT_TEXTURE texture2D
#endif

#ifdef GL_ES
#define COMPAT_PRECISION mediump
#else
#define COMPAT_PRECISION
#endif
COMPAT_VARYING     vec4 VARt7;
COMPAT_VARYING     vec4 VARt6;
COMPAT_VARYING     vec4 VARt5;
COMPAT_VARYING     vec4 VARt4;
COMPAT_VARYING     vec4 VARt3;
COMPAT_VARYING     vec4 VARt2;
COMPAT_VARYING     vec4 VARt1;
COMPAT_VARYING     vec2 _texCoord2;
COMPAT_VARYING     vec4 _color1;
COMPAT_VARYING     vec4 _position1;
struct input_dummy {
    vec2 _video_size;
    vec2 _texture_size;
    vec2 _output_dummy_size;
};
struct out_vertex {
    vec4 _position1;
    vec4 _color1;
    vec2 _texCoord2;
    vec4 VARt1;
    vec4 VARt2;
    vec4 VARt3;
    vec4 VARt4;
    vec4 VARt5;
    vec4 VARt6;
    vec4 VARt7;
};
out_vertex _ret_0;
input_dummy _IN1;
vec4 _r0011;
vec4 _v0011;
COMPAT_ATTRIBUTE vec4 VertexCoord;
COMPAT_ATTRIBUTE vec4 COLOR;
COMPAT_ATTRIBUTE vec4 TexCoord;
COMPAT_VARYING vec4 COL0;
COMPAT_VARYING vec4 TEX0;
 
uniform mat4 MVPMatrix;
uniform int FrameDirection;
uniform int FrameCount;
uniform COMPAT_PRECISION vec2 OutputSize;
uniform COMPAT_PRECISION vec2 TextureSize;
uniform COMPAT_PRECISION vec2 InputSize;
void main()
{
    out_vertex _OUT;
    vec2 _ps;
    vec2 _texCoord;
    _v0011 = vec4(float(VertexCoord.x), float(VertexCoord.y), float(VertexCoord.z), float(VertexCoord.w));
    _r0011 = _v0011.x*MVPMatrix[0];
    _r0011 = _r0011 + _v0011.y*MVPMatrix[1];
    _r0011 = _r0011 + _v0011.z*MVPMatrix[2];
    _r0011 = _r0011 + _v0011.w*MVPMatrix[3];
    _OUT._position1 = vec4(float(_r0011.x), float(_r0011.y), float(_r0011.z), float(_r0011.w));
    _ps = vec2(1.00000000E+00/TextureSize.x, 1.00000000E+00/TextureSize.y);
    _texCoord = TexCoord.xy + vec2( 1.00000001E-07, 1.00000001E-07);
    _OUT.VARt1 = _texCoord.xxxy + vec4(float(float(-_ps.x)), 0.00000000E+00, float(float(_ps.x)), float(float((-2.00000000E+00*_ps.y))));
    _OUT.VARt2 = _texCoord.xxxy + vec4(float(float(-_ps.x)), 0.00000000E+00, float(float(_ps.x)), float(float(-_ps.y)));
    _OUT.VARt3 = _texCoord.xxxy + vec4(float(float(-_ps.x)), 0.00000000E+00, float(float(_ps.x)), 0.00000000E+00);
    _OUT.VARt4 = _texCoord.xxxy + vec4(float(float(-_ps.x)), 0.00000000E+00, float(float(_ps.x)), float(float(_ps.y)));
    _OUT.VARt5 = _texCoord.xxxy + vec4(float(float(-_ps.x)), 0.00000000E+00, float(float(_ps.x)), float(float((2.00000000E+00*_ps.y))));
    _OUT.VARt6 = _texCoord.xyyy + vec4(float(float((-2.00000000E+00*_ps.x))), float(float(-_ps.y)), 0.00000000E+00, float(float(_ps.y)));
    _OUT.VARt7 = _texCoord.xyyy + vec4(float(float((2.00000000E+00*_ps.x))), float(float(-_ps.y)), 0.00000000E+00, float(float(_ps.y)));
    _ret_0._position1 = _OUT._position1;
    _ret_0._color1 = COLOR;
    _ret_0._texCoord2 = _texCoord;
    VARt1 = _OUT.VARt1;
    VARt2 = _OUT.VARt2;
    VARt3 = _OUT.VARt3;
    VARt4 = _OUT.VARt4;
    VARt5 = _OUT.VARt5;
    VARt6 = _OUT.VARt6;
    VARt7 = _OUT.VARt7;
    gl_Position = _OUT._position1;
    COL0 = COLOR;
    TEX0.xy = _texCoord;
    return;
    COL0 = _ret_0._color1;
    TEX0.xy = _ret_0._texCoord2;
} 
#elif defined(FRAGMENT)

#if __VERSION__ >= 130
#define COMPAT_VARYING in
#define COMPAT_TEXTURE texture
out vec4 FragColor;
#else
#define COMPAT_VARYING varying
#define FragColor gl_FragColor
#define COMPAT_TEXTURE texture2D
#endif

#ifdef GL_ES
#ifdef GL_FRAGMENT_PRECISION_HIGH
precision highp float;
#else
precision mediump float;
#endif
#define COMPAT_PRECISION mediump
#else
#define COMPAT_PRECISION
#endif
COMPAT_VARYING     vec4 VARt7;
COMPAT_VARYING     vec4 VARt6;
COMPAT_VARYING     vec4 VARt5;
COMPAT_VARYING     vec4 VARt4;
COMPAT_VARYING     vec4 VARt3;
COMPAT_VARYING     vec4 VARt2;
COMPAT_VARYING     vec4 VARt1;
COMPAT_VARYING     vec2 _texCoord;
COMPAT_VARYING     vec4 _color;
struct input_dummy {
    vec2 _video_size;
    vec2 _texture_size;
    vec2 _output_dummy_size;
};
struct out_vertex {
    vec4 _color;
    vec2 _texCoord;
    vec4 VARt1;
    vec4 VARt2;
    vec4 VARt3;
    vec4 VARt4;
    vec4 VARt5;
    vec4 VARt6;
    vec4 VARt7;
};
vec4 _ret_0;
vec3 _TMP58;
vec3 _TMP69;
vec3 _TMP74;
vec3 _TMP73;
float _TMP68;
float _TMP67;
float _TMP66;
float _TMP71;
float _TMP57;
float _TMP56;
float _TMP55;
vec3 _TMP72;
vec3 _TMP54;
vec3 _TMP53;
vec3 _TMP52;
vec3 _TMP51;
vec3 _TMP50;
vec3 _TMP49;
vec3 _TMP48;
vec3 _TMP47;
vec3 _TMP46;
vec3 _TMP45;
vec4 _TMP44;
vec4 _TMP37;
vec4 _TMP36;
vec4 _TMP75;
bvec4 _TMP35;
bvec4 _TMP34;
bvec4 _TMP33;
bvec4 _TMP32;
bvec4 _TMP31;
bvec4 _TMP30;
bvec4 _TMP29;
bvec4 _TMP28;
bvec4 _TMP27;
float _TMP70;
vec4 _TMP20;
vec4 _TMP19;
vec4 _TMP18;
vec4 _TMP17;
vec4 _TMP16;
vec4 _TMP15;
vec4 _TMP14;
vec4 _TMP13;
vec4 _TMP12;
vec4 _TMP11;
vec4 _TMP10;
vec4 _TMP9;
vec4 _TMP8;
vec4 _TMP7;
vec4 _TMP6;
vec4 _TMP5;
vec4 _TMP4;
vec4 _TMP3;
vec4 _TMP2;
vec4 _TMP1;
vec4 _TMP0;
out_vertex _VAR1;
uniform sampler2D Texture;
input_dummy _IN1;
vec2 _x0089;
vec4 _r0133;
vec4 _r0143;
vec4 _r0153;
vec4 _r0163;
vec4 _r0173;
vec4 _r0183;
vec4 _TMP194;
vec4 _a0197;
vec4 _TMP200;
vec4 _a0203;
vec4 _TMP206;
vec4 _a0209;
vec4 _TMP212;
vec4 _a0215;
vec4 _TMP218;
vec4 _a0221;
vec4 _TMP224;
vec4 _a0227;
vec4 _TMP230;
vec4 _a0233;
vec4 _TMP236;
vec4 _a0239;
vec4 _TMP242;
vec4 _a0245;
vec4 _x0249;
vec4 _TMP250;
vec4 _x0259;
vec4 _TMP260;
vec4 _x0269;
vec4 _TMP270;
vec4 _TMP278;
vec4 _a0281;
vec4 _TMP282;
vec4 _a0285;
vec4 _TMP286;
vec4 _a0289;
vec4 _TMP290;
vec4 _a0293;
vec4 _TMP294;
vec4 _a0297;
vec4 _TMP300;
vec4 _a0303;
vec4 _TMP304;
vec4 _a0307;
vec4 _TMP308;
vec4 _a0311;
vec4 _TMP312;
vec4 _a0315;
vec4 _TMP316;
vec4 _a0319;
vec4 _TMP320;
vec4 _a0323;
vec4 _TMP324;
vec4 _a0327;
vec4 _TMP328;
vec4 _a0331;
vec4 _TMP332;
vec4 _a0335;
vec4 _TMP336;
vec4 _a0339;
vec4 _TMP340;
vec4 _a0343;
float _t0365;
float _t0375;
vec3 _df0377;
vec3 _a0379;
vec3 _df0381;
vec3 _a0383;
vec3 _TMP396;
COMPAT_VARYING vec4 TEX0;
 
uniform int FrameDirection;
uniform int FrameCount;
uniform COMPAT_PRECISION vec2 OutputSize;
uniform COMPAT_PRECISION vec2 TextureSize;
uniform COMPAT_PRECISION vec2 InputSize;
void main()
{
    bvec4 _edr;
    bvec4 _edr_left;
    bvec4 _edr_up;
    bvec4 _px;
    bvec4 _interp_restriction_lv1;
    bvec4 _interp_restriction_lv2_left;
    bvec4 _interp_restriction_lv2_up;
    bvec4 _nc;
    bvec4 _nc30;
    bvec4 _nc60;
    bvec4 _nc45;
    vec4 _fx;
    vec4 _fx_left;
    vec4 _fx_up;
    vec3 _res1;
    vec3 _res2;
    vec3 _pix1;
    vec3 _pix2;
    float _blend1;
    float _blend2;
    vec2 _fp;
    vec3 _A11;
    vec3 _B11;
    vec3 _C1;
    vec3 _A2;
    vec3 _B2;
    vec3 _C;
    vec3 _D;
    vec3 _E;
    vec3 _F;
    vec3 _G;
    vec3 _H;
    vec3 _I;
    vec3 _G5;
    vec3 _H5;
    vec3 _I5;
    vec3 _A0;
    vec3 _D0;
    vec3 _G0;
    vec3 _C4;
    vec3 _F4;
    vec3 _I4;
    vec4 _b1;
    vec4 _c3;
    vec4 _e1;
    vec4 _i4;
    vec4 _i5;
    vec4 _h5;
    vec4 _fx45;
    vec4 _fx30;
    vec4 _fx60;
    vec4 _final45;
    vec4 _final30;
    vec4 _final60;
    vec4 _maximo;
    vec3 _res;
    _x0089 = TEX0.xy*TextureSize;
    _fp = fract(_x0089);
    _TMP0 = COMPAT_TEXTURE(Texture, VARt1.xw);
    _A11 = vec3(float(_TMP0.x), float(_TMP0.y), float(_TMP0.z));
    _TMP1 = COMPAT_TEXTURE(Texture, VARt1.yw);
    _B11 = vec3(float(_TMP1.x), float(_TMP1.y), float(_TMP1.z));
    _TMP2 = COMPAT_TEXTURE(Texture, VARt1.zw);
    _C1 = vec3(float(_TMP2.x), float(_TMP2.y), float(_TMP2.z));
    _TMP3 = COMPAT_TEXTURE(Texture, VARt2.xw);
    _A2 = vec3(float(_TMP3.x), float(_TMP3.y), float(_TMP3.z));
    _TMP4 = COMPAT_TEXTURE(Texture, VARt2.yw);
    _B2 = vec3(float(_TMP4.x), float(_TMP4.y), float(_TMP4.z));
    _TMP5 = COMPAT_TEXTURE(Texture, VARt2.zw);
    _C = vec3(float(_TMP5.x), float(_TMP5.y), float(_TMP5.z));
    _TMP6 = COMPAT_TEXTURE(Texture, VARt3.xw);
    _D = vec3(float(_TMP6.x), float(_TMP6.y), float(_TMP6.z));
    _TMP7 = COMPAT_TEXTURE(Texture, VARt3.yw);
    _E = vec3(float(_TMP7.x), float(_TMP7.y), float(_TMP7.z));
    _TMP8 = COMPAT_TEXTURE(Texture, VARt3.zw);
    _F = vec3(float(_TMP8.x), float(_TMP8.y), float(_TMP8.z));
    _TMP9 = COMPAT_TEXTURE(Texture, VARt4.xw);
    _G = vec3(float(_TMP9.x), float(_TMP9.y), float(_TMP9.z));
    _TMP10 = COMPAT_TEXTURE(Texture, VARt4.yw);
    _H = vec3(float(_TMP10.x), float(_TMP10.y), float(_TMP10.z));
    _TMP11 = COMPAT_TEXTURE(Texture, VARt4.zw);
    _I = vec3(float(_TMP11.x), float(_TMP11.y), float(_TMP11.z));
    _TMP12 = COMPAT_TEXTURE(Texture, VARt5.xw);
    _G5 = vec3(float(_TMP12.x), float(_TMP12.y), float(_TMP12.z));
    _TMP13 = COMPAT_TEXTURE(Texture, VARt5.yw);
    _H5 = vec3(float(_TMP13.x), float(_TMP13.y), float(_TMP13.z));
    _TMP14 = COMPAT_TEXTURE(Texture, VARt5.zw);
    _I5 = vec3(float(_TMP14.x), float(_TMP14.y), float(_TMP14.z));
    _TMP15 = COMPAT_TEXTURE(Texture, VARt6.xy);
    _A0 = vec3(float(_TMP15.x), float(_TMP15.y), float(_TMP15.z));
    _TMP16 = COMPAT_TEXTURE(Texture, VARt6.xz);
    _D0 = vec3(float(_TMP16.x), float(_TMP16.y), float(_TMP16.z));
    _TMP17 = COMPAT_TEXTURE(Texture, VARt6.xw);
    _G0 = vec3(float(_TMP17.x), float(_TMP17.y), float(_TMP17.z));
    _TMP18 = COMPAT_TEXTURE(Texture, VARt7.xy);
    _C4 = vec3(float(_TMP18.x), float(_TMP18.y), float(_TMP18.z));
    _TMP19 = COMPAT_TEXTURE(Texture, VARt7.xz);
    _F4 = vec3(float(_TMP19.x), float(_TMP19.y), float(_TMP19.z));
    _TMP20 = COMPAT_TEXTURE(Texture, VARt7.xw);
    _I4 = vec3(float(_TMP20.x), float(_TMP20.y), float(_TMP20.z));
    _TMP70 = dot(vec3(float(_B2.x), float(_B2.y), float(_B2.z)), vec3( 1.43593750E+01, 2.81718750E+01, 5.47265625E+00));
    _r0133.x = float(_TMP70);
    _TMP70 = dot(vec3(float(_D.x), float(_D.y), float(_D.z)), vec3( 1.43593750E+01, 2.81718750E+01, 5.47265625E+00));
    _r0133.y = float(_TMP70);
    _TMP70 = dot(vec3(float(_H.x), float(_H.y), float(_H.z)), vec3( 1.43593750E+01, 2.81718750E+01, 5.47265625E+00));
    _r0133.z = float(_TMP70);
    _TMP70 = dot(vec3(float(_F.x), float(_F.y), float(_F.z)), vec3( 1.43593750E+01, 2.81718750E+01, 5.47265625E+00));
    _r0133.w = float(_TMP70);
    _b1 = vec4(float(_r0133.x), float(_r0133.y), float(_r0133.z), float(_r0133.w));
    _TMP70 = dot(vec3(float(_C.x), float(_C.y), float(_C.z)), vec3( 1.43593750E+01, 2.81718750E+01, 5.47265625E+00));
    _r0143.x = float(_TMP70);
    _TMP70 = dot(vec3(float(_A2.x), float(_A2.y), float(_A2.z)), vec3( 1.43593750E+01, 2.81718750E+01, 5.47265625E+00));
    _r0143.y = float(_TMP70);
    _TMP70 = dot(vec3(float(_G.x), float(_G.y), float(_G.z)), vec3( 1.43593750E+01, 2.81718750E+01, 5.47265625E+00));
    _r0143.z = float(_TMP70);
    _TMP70 = dot(vec3(float(_I.x), float(_I.y), float(_I.z)), vec3( 1.43593750E+01, 2.81718750E+01, 5.47265625E+00));
    _r0143.w = float(_TMP70);
    _c3 = vec4(float(_r0143.x), float(_r0143.y), float(_r0143.z), float(_r0143.w));
    _TMP70 = dot(vec3(float(_E.x), float(_E.y), float(_E.z)), vec3( 1.43593750E+01, 2.81718750E+01, 5.47265625E+00));
    _r0153.x = float(_TMP70);
    _TMP70 = dot(vec3(float(_E.x), float(_E.y), float(_E.z)), vec3( 1.43593750E+01, 2.81718750E+01, 5.47265625E+00));
    _r0153.y = float(_TMP70);
    _TMP70 = dot(vec3(float(_E.x), float(_E.y), float(_E.z)), vec3( 1.43593750E+01, 2.81718750E+01, 5.47265625E+00));
    _r0153.z = float(_TMP70);
    _TMP70 = dot(vec3(float(_E.x), float(_E.y), float(_E.z)), vec3( 1.43593750E+01, 2.81718750E+01, 5.47265625E+00));
    _r0153.w = float(_TMP70);
    _e1 = vec4(float(_r0153.x), float(_r0153.y), float(_r0153.z), float(_r0153.w));
    _TMP70 = dot(vec3(float(_I4.x), float(_I4.y), float(_I4.z)), vec3( 1.43593750E+01, 2.81718750E+01, 5.47265625E+00));
    _r0163.x = float(_TMP70);
    _TMP70 = dot(vec3(float(_C1.x), float(_C1.y), float(_C1.z)), vec3( 1.43593750E+01, 2.81718750E+01, 5.47265625E+00));
    _r0163.y = float(_TMP70);
    _TMP70 = dot(vec3(float(_A0.x), float(_A0.y), float(_A0.z)), vec3( 1.43593750E+01, 2.81718750E+01, 5.47265625E+00));
    _r0163.z = float(_TMP70);
    _TMP70 = dot(vec3(float(_G5.x), float(_G5.y), float(_G5.z)), vec3( 1.43593750E+01, 2.81718750E+01, 5.47265625E+00));
    _r0163.w = float(_TMP70);
    _i4 = vec4(float(_r0163.x), float(_r0163.y), float(_r0163.z), float(_r0163.w));
    _TMP70 = dot(vec3(float(_I5.x), float(_I5.y), float(_I5.z)), vec3( 1.43593750E+01, 2.81718750E+01, 5.47265625E+00));
    _r0173.x = float(_TMP70);
    _TMP70 = dot(vec3(float(_C4.x), float(_C4.y), float(_C4.z)), vec3( 1.43593750E+01, 2.81718750E+01, 5.47265625E+00));
    _r0173.y = float(_TMP70);
    _TMP70 = dot(vec3(float(_A11.x), float(_A11.y), float(_A11.z)), vec3( 1.43593750E+01, 2.81718750E+01, 5.47265625E+00));
    _r0173.z = float(_TMP70);
    _TMP70 = dot(vec3(float(_G0.x), float(_G0.y), float(_G0.z)), vec3( 1.43593750E+01, 2.81718750E+01, 5.47265625E+00));
    _r0173.w = float(_TMP70);
    _i5 = vec4(float(_r0173.x), float(_r0173.y), float(_r0173.z), float(_r0173.w));
    _TMP70 = dot(vec3(float(_H5.x), float(_H5.y), float(_H5.z)), vec3( 1.43593750E+01, 2.81718750E+01, 5.47265625E+00));
    _r0183.x = float(_TMP70);
    _TMP70 = dot(vec3(float(_F4.x), float(_F4.y), float(_F4.z)), vec3( 1.43593750E+01, 2.81718750E+01, 5.47265625E+00));
    _r0183.y = float(_TMP70);
    _TMP70 = dot(vec3(float(_B11.x), float(_B11.y), float(_B11.z)), vec3( 1.43593750E+01, 2.81718750E+01, 5.47265625E+00));
    _r0183.z = float(_TMP70);
    _TMP70 = dot(vec3(float(_D0.x), float(_D0.y), float(_D0.z)), vec3( 1.43593750E+01, 2.81718750E+01, 5.47265625E+00));
    _r0183.w = float(_TMP70);
    _h5 = vec4(float(_r0183.x), float(_r0183.y), float(_r0183.z), float(_r0183.w));
    _fx = vec4( 1.00000000E+00, -1.00000000E+00, -1.00000000E+00, 1.00000000E+00)*_fp.y + vec4( 1.00000000E+00, 1.00000000E+00, -1.00000000E+00, -1.00000000E+00)*_fp.x;
    _fx_left = vec4( 1.00000000E+00, -1.00000000E+00, -1.00000000E+00, 1.00000000E+00)*_fp.y + vec4( 5.00000000E-01, 2.00000000E+00, -5.00000000E-01, -2.00000000E+00)*_fp.x;
    _fx_up = vec4( 1.00000000E+00, -1.00000000E+00, -1.00000000E+00, 1.00000000E+00)*_fp.y + vec4( 2.00000000E+00, 5.00000000E-01, -2.00000000E+00, -5.00000000E-01)*_fp.x;
    _a0197 = _b1.wxyz - _b1;
    _TMP194 = abs(_a0197);
    _TMP27 = bvec4(_TMP194.x < 1.00000000E+01, _TMP194.y < 1.00000000E+01, _TMP194.z < 1.00000000E+01, _TMP194.w < 1.00000000E+01);
    _a0203 = _b1.zwxy - _b1.yzwx;
    _TMP200 = abs(_a0203);
    _TMP28 = bvec4(_TMP200.x < 1.00000000E+01, _TMP200.y < 1.00000000E+01, _TMP200.z < 1.00000000E+01, _TMP200.w < 1.00000000E+01);
    _a0209 = _e1 - _c3.wxyz;
    _TMP206 = abs(_a0209);
    _TMP29 = bvec4(_TMP206.x < 1.00000000E+01, _TMP206.y < 1.00000000E+01, _TMP206.z < 1.00000000E+01, _TMP206.w < 1.00000000E+01);
    _a0215 = _b1.wxyz - _i4;
    _TMP212 = abs(_a0215);
    _TMP30 = bvec4(_TMP212.x < 1.00000000E+01, _TMP212.y < 1.00000000E+01, _TMP212.z < 1.00000000E+01, _TMP212.w < 1.00000000E+01);
    _a0221 = _b1.zwxy - _i5;
    _TMP218 = abs(_a0221);
    _TMP31 = bvec4(_TMP218.x < 1.00000000E+01, _TMP218.y < 1.00000000E+01, _TMP218.z < 1.00000000E+01, _TMP218.w < 1.00000000E+01);
    _a0227 = _e1 - _c3.zwxy;
    _TMP224 = abs(_a0227);
    _TMP32 = bvec4(_TMP224.x < 1.00000000E+01, _TMP224.y < 1.00000000E+01, _TMP224.z < 1.00000000E+01, _TMP224.w < 1.00000000E+01);
    _a0233 = _e1 - _c3;
    _TMP230 = abs(_a0233);
    _TMP33 = bvec4(_TMP230.x < 1.00000000E+01, _TMP230.y < 1.00000000E+01, _TMP230.z < 1.00000000E+01, _TMP230.w < 1.00000000E+01);
    _a0239 = _b1 - _i4.yzwx;
    _TMP236 = abs(_a0239);
    _TMP34 = bvec4(_TMP236.x < 1.00000000E+01, _TMP236.y < 1.00000000E+01, _TMP236.z < 1.00000000E+01, _TMP236.w < 1.00000000E+01);
    _a0245 = _b1.yzwx - _i5.wxyz;
    _TMP242 = abs(_a0245);
    _TMP35 = bvec4(_TMP242.x < 1.00000000E+01, _TMP242.y < 1.00000000E+01, _TMP242.z < 1.00000000E+01, _TMP242.w < 1.00000000E+01);
    _interp_restriction_lv1 = bvec4(_e1.x != _b1.w && _e1.x != _b1.z && (!_TMP27.x && !_TMP28.x || _TMP29.x && !_TMP30.x && !_TMP31.x || _TMP32.x || _TMP33.x) && (_b1.w != _h5.y && _b1.w != _c3.w || _b1.z != _h5.x && _b1.z != _c3.w || _b1.z != _c3.z || _b1.w != _c3.x || _TMP34.x && _TMP35.x), _e1.y != _b1.x && _e1.y != _b1.w && (!_TMP27.y && !_TMP28.y || _TMP29.y && !_TMP30.y && !_TMP31.y || _TMP32.y || _TMP33.y) && (_b1.x != _h5.z && _b1.x != _c3.x || _b1.w != _h5.y && _b1.w != _c3.x || _b1.w != _c3.w || _b1.x != _c3.y || _TMP34.y && _TMP35.y), _e1.z != _b1.y && _e1.z != _b1.x && (!_TMP27.z && !_TMP28.z || _TMP29.z && !_TMP30.z && !_TMP31.z || _TMP32.z || _TMP33.z) && (_b1.y != _h5.w && _b1.y != _c3.y || _b1.x != _h5.z && _b1.x != _c3.y || _b1.x != _c3.x || _b1.y != _c3.z || _TMP34.z && _TMP35.z), _e1.w != _b1.z && _e1.w != _b1.y && (!_TMP27.w && !_TMP28.w || _TMP29.w && !_TMP30.w && !_TMP31.w || _TMP32.w || _TMP33.w) && (_b1.z != _h5.x && _b1.z != _c3.z || _b1.y != _h5.w && _b1.y != _c3.z || _b1.y != _c3.y || _b1.z != _c3.w || _TMP34.w && _TMP35.w));
    _interp_restriction_lv2_left = bvec4(_e1.x != _c3.z && _b1.y != _c3.z, _e1.y != _c3.w && _b1.z != _c3.w, _e1.z != _c3.x && _b1.w != _c3.x, _e1.w != _c3.y && _b1.x != _c3.y);
    _interp_restriction_lv2_up = bvec4(_e1.x != _c3.x && _b1.x != _c3.x, _e1.y != _c3.y && _b1.y != _c3.y, _e1.z != _c3.z && _b1.z != _c3.z, _e1.w != _c3.w && _b1.w != _c3.w);
    _x0249 = (_fx - vec4( 1.10000002E+00, 9.99999940E-02, -8.99999976E-01, 9.99999940E-02))/vec4( 7.99999952E-01, 7.99999952E-01, 7.99999952E-01, 7.99999952E-01);
    _TMP75 = min(vec4( 1.00000000E+00, 1.00000000E+00, 1.00000000E+00, 1.00000000E+00), _x0249);
    _TMP250 = max(vec4( 0.00000000E+00, 0.00000000E+00, 0.00000000E+00, 0.00000000E+00), _TMP75);
    _fx45 = _TMP250*_TMP250*(3.00000000E+00 - 2.00000000E+00*_TMP250);
    _x0259 = (_fx_left - vec4( 6.00000024E-01, 6.00000024E-01, -8.99999976E-01, -4.00000006E-01))/vec4( 7.99999952E-01, 7.99999952E-01, 7.99999952E-01, 8.00000012E-01);
    _TMP75 = min(vec4( 1.00000000E+00, 1.00000000E+00, 1.00000000E+00, 1.00000000E+00), _x0259);
    _TMP260 = max(vec4( 0.00000000E+00, 0.00000000E+00, 0.00000000E+00, 0.00000000E+00), _TMP75);
    _fx30 = _TMP260*_TMP260*(3.00000000E+00 - 2.00000000E+00*_TMP260);
    _x0269 = (_fx_up - vec4( 1.60000002E+00, -4.00000006E-01, -1.39999998E+00, 9.99999940E-02))/vec4( 8.00000072E-01, 8.00000012E-01, 7.99999952E-01, 7.99999952E-01);
    _TMP75 = min(vec4( 1.00000000E+00, 1.00000000E+00, 1.00000000E+00, 1.00000000E+00), _x0269);
    _TMP270 = max(vec4( 0.00000000E+00, 0.00000000E+00, 0.00000000E+00, 0.00000000E+00), _TMP75);
    _fx60 = _TMP270*_TMP270*(3.00000000E+00 - 2.00000000E+00*_TMP270);
    _a0281 = _e1 - _c3;
    _TMP278 = abs(_a0281);
    _a0285 = _e1 - _c3.zwxy;
    _TMP282 = abs(_a0285);
    _a0289 = _c3.wxyz - _h5;
    _TMP286 = abs(_a0289);
    _a0293 = _c3.wxyz - _h5.yzwx;
    _TMP290 = abs(_a0293);
    _a0297 = _b1.zwxy - _b1.wxyz;
    _TMP294 = abs(_a0297);
    _TMP36 = _TMP278 + _TMP282 + _TMP286 + _TMP290 + 4.00000000E+00*_TMP294;
    _a0303 = _b1.zwxy - _b1.yzwx;
    _TMP300 = abs(_a0303);
    _a0307 = _b1.zwxy - _i5;
    _TMP304 = abs(_a0307);
    _a0311 = _b1.wxyz - _i4;
    _TMP308 = abs(_a0311);
    _a0315 = _b1.wxyz - _b1;
    _TMP312 = abs(_a0315);
    _a0319 = _e1 - _c3.wxyz;
    _TMP316 = abs(_a0319);
    _TMP37 = _TMP300 + _TMP304 + _TMP308 + _TMP312 + 4.00000000E+00*_TMP316;
    _edr = bvec4(_TMP36.x < _TMP37.x && _interp_restriction_lv1.x, _TMP36.y < _TMP37.y && _interp_restriction_lv1.y, _TMP36.z < _TMP37.z && _interp_restriction_lv1.z, _TMP36.w < _TMP37.w && _interp_restriction_lv1.w);
    _a0323 = _b1.wxyz - _c3.zwxy;
    _TMP320 = abs(_a0323);
    _a0327 = _b1.zwxy - _c3;
    _TMP324 = abs(_a0327);
    _edr_left = bvec4((2.00000000E+00*_TMP320).x <= _TMP324.x && _interp_restriction_lv2_left.x, (2.00000000E+00*_TMP320).y <= _TMP324.y && _interp_restriction_lv2_left.y, (2.00000000E+00*_TMP320).z <= _TMP324.z && _interp_restriction_lv2_left.z, (2.00000000E+00*_TMP320).w <= _TMP324.w && _interp_restriction_lv2_left.w);
    _a0331 = _b1.wxyz - _c3.zwxy;
    _TMP328 = abs(_a0331);
    _a0335 = _b1.zwxy - _c3;
    _TMP332 = abs(_a0335);
    _edr_up = bvec4(_TMP328.x >= (2.00000000E+00*_TMP332).x && _interp_restriction_lv2_up.x, _TMP328.y >= (2.00000000E+00*_TMP332).y && _interp_restriction_lv2_up.y, _TMP328.z >= (2.00000000E+00*_TMP332).z && _interp_restriction_lv2_up.z, _TMP328.w >= (2.00000000E+00*_TMP332).w && _interp_restriction_lv2_up.w);
    _nc45 = bvec4(_edr.x && bool(_fx45.x), _edr.y && bool(_fx45.y), _edr.z && bool(_fx45.z), _edr.w && bool(_fx45.w));
    _nc30 = bvec4(_edr.x && _edr_left.x && bool(_fx30.x), _edr.y && _edr_left.y && bool(_fx30.y), _edr.z && _edr_left.z && bool(_fx30.z), _edr.w && _edr_left.w && bool(_fx30.w));
    _nc60 = bvec4(_edr.x && _edr_up.x && bool(_fx60.x), _edr.y && _edr_up.y && bool(_fx60.y), _edr.z && _edr_up.z && bool(_fx60.z), _edr.w && _edr_up.w && bool(_fx60.w));
    _a0339 = _e1 - _b1.wxyz;
    _TMP336 = abs(_a0339);
    _a0343 = _e1 - _b1.zwxy;
    _TMP340 = abs(_a0343);
    _px = bvec4(_TMP336.x <= _TMP340.x, _TMP336.y <= _TMP340.y, _TMP336.z <= _TMP340.z, _TMP336.w <= _TMP340.w);
    _nc = bvec4(_nc30.x || _nc60.x || _nc45.x, _nc30.y || _nc60.y || _nc45.y, _nc30.z || _nc60.z || _nc45.z, _nc30.w || _nc60.w || _nc45.w);
    _final45 = vec4(float(_nc45.x), float(_nc45.y), float(_nc45.z), float(_nc45.w))*_fx45;
    _final30 = vec4(float(_nc30.x), float(_nc30.y), float(_nc30.z), float(_nc30.w))*_fx30;
    _final60 = vec4(float(_nc60.x), float(_nc60.y), float(_nc60.z), float(_nc60.w))*_fx60;
    _TMP44 = max(_final30, _final60);
    _maximo = max(_TMP44, _final45);
    if (_nc.x) { 
        if (_px.x) { 
            _TMP45 = _F;
        } else {
            _TMP45 = _H;
        } 
        _pix1 = _TMP45;
        _blend1 = _maximo.x;
    } else {
        if (_nc.y) { 
            if (_px.y) { 
                _TMP46 = _B2;
            } else {
                _TMP46 = _F;
            } 
            _pix1 = _TMP46;
            _blend1 = _maximo.y;
        } else {
            if (_nc.z) { 
                if (_px.z) { 
                    _TMP47 = _D;
                } else {
                    _TMP47 = _B2;
                } 
                _pix1 = _TMP47;
                _blend1 = _maximo.z;
            } else {
                if (_nc.w) { 
                    if (_px.w) { 
                        _TMP48 = _H;
                    } else {
                        _TMP48 = _D;
                    } 
                    _pix1 = _TMP48;
                    _blend1 = _maximo.w;
                } 
            } 
        } 
    } 
    if (_nc.w) { 
        if (_px.w) { 
            _TMP49 = _H;
        } else {
            _TMP49 = _D;
        } 
        _pix2 = _TMP49;
        _blend2 = _maximo.w;
    } else {
        if (_nc.z) { 
            if (_px.z) { 
                _TMP50 = _D;
            } else {
                _TMP50 = _B2;
            } 
            _pix2 = _TMP50;
            _blend2 = _maximo.z;
        } else {
            if (_nc.y) { 
                if (_px.y) { 
                    _TMP51 = _B2;
                } else {
                    _TMP51 = _F;
                } 
                _pix2 = _TMP51;
                _blend2 = _maximo.y;
            } else {
                if (_nc.x) { 
                    if (_px.x) { 
                        _TMP52 = _F;
                    } else {
                        _TMP52 = _H;
                    } 
                    _pix2 = _TMP52;
                    _blend2 = _maximo.x;
                } 
            } 
        } 
    } 
    _TMP71 = pow(float(_E.x), 2.40039062E+00);
    _TMP66 = float(_TMP71);
    _TMP71 = pow(float(_E.y), 2.40039062E+00);
    _TMP67 = float(_TMP71);
    _TMP71 = pow(float(_E.z), 2.40039062E+00);
    _TMP68 = float(_TMP71);
    _E = vec3(_TMP66, _TMP67, _TMP68);
    _TMP71 = pow(float(_pix1.x), 2.40039062E+00);
    _TMP66 = float(_TMP71);
    _TMP71 = pow(float(_pix1.y), 2.40039062E+00);
    _TMP67 = float(_TMP71);
    _TMP71 = pow(float(_pix1.z), 2.40039062E+00);
    _TMP68 = float(_TMP71);
    _TMP53 = vec3(_TMP66, _TMP67, _TMP68);
    _t0365 = float(_blend1);
    _res1 = _E + _t0365*(_TMP53 - _E);
    _TMP71 = pow(float(_pix2.x), 2.40039062E+00);
    _TMP66 = float(_TMP71);
    _TMP71 = pow(float(_pix2.y), 2.40039062E+00);
    _TMP67 = float(_TMP71);
    _TMP71 = pow(float(_pix2.z), 2.40039062E+00);
    _TMP68 = float(_TMP71);
    _TMP54 = vec3(_TMP66, _TMP67, _TMP68);
    _t0375 = float(_blend2);
    _res2 = _E + _t0375*(_TMP54 - _E);
    _a0379 = _E - _res1;
    _TMP72 = abs(vec3(float(_a0379.x), float(_a0379.y), float(_a0379.z)));
    _df0377 = vec3(float(_TMP72.x), float(_TMP72.y), float(_TMP72.z));
    _TMP55 = _df0377.x + _df0377.y + _df0377.z;
    _a0383 = _E - _res2;
    _TMP72 = abs(vec3(float(_a0383.x), float(_a0383.y), float(_a0383.z)));
    _df0381 = vec3(float(_TMP72.x), float(_TMP72.y), float(_TMP72.z));
    _TMP56 = _df0381.x + _df0381.y + _df0381.z;
    _TMP57 = float((_TMP56 >= _TMP55));
    _res = _res1 + _TMP57*(_res2 - _res1);
    _TMP71 = pow(float(_res.x), 4.54589844E-01);
    _TMP66 = float(_TMP71);
    _TMP71 = pow(float(_res.y), 4.54589844E-01);
    _TMP67 = float(_TMP71);
    _TMP71 = pow(float(_res.z), 4.54589844E-01);
    _TMP68 = float(_TMP71);
    _TMP58 = vec3(_TMP66, _TMP67, _TMP68);
    _TMP73 = min(vec3( 1.00000000E+00, 1.00000000E+00, 1.00000000E+00), vec3(float(_TMP58.x), float(_TMP58.y), float(_TMP58.z)));
    _TMP69 = vec3(float(_TMP73.x), float(_TMP73.y), float(_TMP73.z));
    _TMP74 = max(vec3( 0.00000000E+00, 0.00000000E+00, 0.00000000E+00), vec3(float(_TMP69.x), float(_TMP69.y), float(_TMP69.z)));
    _TMP396 = vec3(float(_TMP74.x), float(_TMP74.y), float(_TMP74.z));
    _ret_0 = vec4(float(_TMP396.x), float(_TMP396.y), float(_TMP396.z), 1.00000000E+00);
    FragColor = _ret_0;
    return;
} 
#endif
